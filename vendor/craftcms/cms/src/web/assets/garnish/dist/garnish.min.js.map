{"version":3,"sources":["../../../../../../garnishjs/lib/Base.js","../../../../../../garnishjs/src/Garnish.js","../../../../../../garnishjs/src/BaseDrag.js","../../../../../../garnishjs/src/CheckboxSelect.js","../../../../../../garnishjs/src/ContextMenu.js","../../../../../../garnishjs/src/CustomSelect.js","../../../../../../garnishjs/src/DisclosureMenu.js","../../../../../../garnishjs/src/Drag.js","../../../../../../garnishjs/src/DragDrop.js","../../../../../../garnishjs/src/DragMove.js","../../../../../../garnishjs/src/DragSort.js","../../../../../../garnishjs/src/EscManager.js","../../../../../../garnishjs/src/HUD.js","../../../../../../garnishjs/src/MenuBtn.js","../../../../../../garnishjs/src/MixedInput.js","../../../../../../garnishjs/src/Modal.js","../../../../../../garnishjs/src/NiceText.js","../../../../../../garnishjs/src/Select.js","../../../../../../garnishjs/src/SelectMenu.js","../../../../../../garnishjs/src/ShortcutManager.js","garnish.js"],"names":["$","getErd","erd","elementResizeDetectorMaker","callOnAdd","triggerResizeEvent","elem","trigger","Base","extend","_instance","_static","prototype","_prototyping","proto","this","call","base","constructor","klass","_constructing","apply","arguments","ancestor","forEach","implement","toString","valueOf","type","init","source","value","length","test","method","previous","returnValue","toSource","hidden","i","key","desc","Object","getOwnPropertyDescriptor","defineProperty","version","object","block","context","undefined","String","Garnish","$win","window","$doc","document","$bod","body","rtl","hasClass","ltr","$scrollContainer","DELETE_KEY","SHIFT_KEY","TAB_KEY","CTRL_KEY","ALT_KEY","RETURN_KEY","ESC_KEY","SPACE_KEY","LEFT_KEY","UP_KEY","RIGHT_KEY","DOWN_KEY","A_KEY","S_KEY","CMD_KEY","JS_ARIA_CLASS","JS_ARIA_TRUE_CLASS","JS_ARIA_FALSE_CLASS","PRIMARY_CLICK","SECONDARY_CLICK","X_AXIS","Y_AXIS","FX_DURATION","TEXT_NODE","log","msg","console","_isMobileBrowser","_isMobileOrTabletBrowser","isMobileBrowser","detectTablets","a","navigator","userAgent","vendor","opera","RegExp","substr","isArray","val","Array","isJquery","jQuery","isString","hasAttr","attr","isTextNode","nodeType","getOffset","_offset","offset","top","scrollTop","left","scrollLeft","getDist","x1","y1","x2","y2","Math","sqrt","pow","hitTest","x","y","_$elem","_x1","_y1","_x2","outerWidth","_y2","outerHeight","isCursorOver","ev","pageX","pageY","copyTextStyles","target","$source","$target","css","fontFamily","fontSize","fontWeight","letterSpacing","lineHeight","textAlign","textIndent","whiteSpace","wordSpacing","wordWrap","addModalAttributes","container","aria-modal","role","hideModalBackgroundContent","modal","$modal","children","each","hasJsAriaClass","get","contentShouldBeHidden","ariaHide","resetBackgroundContentVisibility","nextVisibleModal","getNextVisibleModal","removeClass","removeAttr","ariaSelector","ariaHiddenElements","element","hide","tagName","prop","ariaHiddenAttribute","addClass","modals","filter","prevContainerIndex","index","newModals","slice","last","trapFocusWithin","$container","on","keyCode","$focusableElements","find","shiftKey","preventDefault","stopPropagation","focus","first","setFocusWithin","getBodyScrollTop","_scrollTop","_maxScrollTop","height","requestAnimationFrame","raf","mozRequestAnimationFrame","webkitRequestAnimationFrame","fn","setTimeout","cancelAnimationFrame","cancel","mozCancelAnimationFrame","webkitCancelAnimationFrame","clearTimeout","id","scrollContainerToElement","$elem","scrollParent","elemScrollOffset","elemOffset","targetScrollTop","elemHeight","containerHeight","innerHeight","clientHeight","velocity","mobileHA","SHAKE_STEPS","SHAKE_STEP_DURATION","shake","startingPoint","parseInt","isNaN","_properties","getElement","makeArray","getInputBasename","name","replace","getInputPostVal","$input","findInputs","findFocusable","findCurrentFocus","getPostData","inputName","postData","arrayInputCounters","$inputs","eq","inputVal","isArrayInput","croppedName","substring","j","copyInputValues","$sourceInputs","$targetInputs","isCtrlKeyPressed","platform","match","metaKey","ctrlKey","_eventHandlers","_normalizeEvents","events","split","data","handler","push","namespace","off","eventHandler","splice","settings","_namespace","_$listeners","_disabled","floor","random","_listeners","noop","setSettings","defaults","baseSettings","_ev","_splitEvents","trim","_formatEvents","join","addListener","func","bind","proxy","inArray","removeListener","removeAllListeners","disable","enable","destroy","event","special","activate","setup","namespaces","eventHandle","mousedown.garnish-activate","e","click.garnish-activate","keydown.garnish-activate","teardown","textchange","handle","el","args","delay","handleObj","targetData","delayTimeout","resize","listenTo","BaseDrag","$items","dragging","mousedownX","mousedownY","realMouseX","realMouseY","mouseX","mouseY","mouseDistX","mouseDistY","mouseOffsetX","mouseOffsetY","$targetItem","scrollProperty","scrollAxis","scrollDist","scrollProxy","scrollFrame","_","items","isPlainObject","addItems","allowDragging","startDragging","onDragStart","drag","didMouseMove","_scrollProperty","axis","_winScrollTop","_minMouseScrollY","windowScrollTargetSize","_scrollAxis","_scrollDist","round","_maxMouseScrollY","_winScrollLeft","_minMouseScrollX","_maxMouseScrollX","width","_scrollWindow","_cancelWindowScroll","onDrag","stopDragging","onDragStop","item","removeItems","add","_deinitItem","removeAllItems","_handleMouseDown","which","$handle","_getItemHandle","currentTarget","is","closest","ignoreHandleSelector","_handleMouseMove","_mouseDist","minMouseDist","_handleMouseUp","scrollPos","removeData","CheckboxSelect","$all","$options","$checkboxes","not","onAllChange","isAllChecked","checked","disabled","ContextMenu","options","$menu","showingMenu","counter","buildMenu","menuClass","$ul","appendTo","hasOwnProperty","option","$li","$a","label","onClick","mousedown","hideMenu","showMenu","showing","show","shortcutManager","addLayer","registerShortcut","removeLayer","CustomSelect","visible","$anchor","menuId","_windowWidth","_windowHeight","_windowScrollLeft","_windowScrollTop","_anchorOffset","_anchorWidth","_anchorHeight","_anchorOffsetRight","_anchorOffsetBottom","_menuWidth","_menuHeight","addOptions","$menuList","aria-hidden","attachToElement","anchor","nodeName","optionKey","tabindex","selectOption","setPositionRelativeToAnchor","topClearance","bottomClearance","maxHeight","windowSpacing","min","align","_alignCenter","rightClearance","leftClearance","_alignRight","_alignLeft","opacity","display","duration","detach","onOptionSelect","selectedOption","right","Menu","DisclosureMenu","$trigger","$alignmentElement","$wrapper","_wrapperElementOffset","_alignmentElementOffset","_triggerWidth","_triggerHeight","triggerId","expanded","alignmentSelector","wrapper","addDisclosureMenuEventListeners","handleTriggerClick","handleKeypress","handleMousedown","focusElement","direction","newIndex","currentFocus","focusable","currentIndex","elementToFocus","newTarget","triggerButton","newTargetIsInsideDisclosure","has","isExpanded","setContainerPosition","firstFocusableEl","getBoundingClientRect","bottom","topAdjustment","bottomAdjustment","bottomClearanceExists","leftAdjustment","rightAdjustment","Drag","targetItemWidth","targetItemHeight","targetItemPositionInDraggee","$draggee","otherItems","totalOtherItems","helpers","helperTargets","helperPositions","helperLagIncrement","updateHelperPosProxy","updateHelperPosFrame","lastMouseX","lastMouseY","_returningHelpersToDraggees","draggeeDisplay","setDraggee","findDraggee","_updateHelperPos","helperLagIncrementDividend","concat","toArray","singleHelper","_createHelper","removeDraggee","collapseDraggees","appendDraggee","$newDraggee","oldLength","newLength","draggeeVirtualMidpointX","draggeeVirtualMidpointY","getHelperTargetX","getHelperTargetY","returnHelpersToDraggees","$helper","visibility","callback","draggeeOffset","_showDraggee","onReturnHelpersToDraggees","$draggeeHelper","clone","copyDraggeeInputValuesToHelper","ceil","margin","pointer-events","helper","append","helperPos","_getHelperTarget","position","zIndex","helperBaseZindex","helperOpacity","_i","_j","_lag","helperLagBase","helperSpacingX","helperSpacingY","remove","DragDrop","$dropTargets","$activeDropTarget","updateDropTargets","dropTargets","_activeDropTarget","_elem","activeDropTargetClass","onDropTargetChange","fadeOutHelpers","complete","DragMove","DragSort","$heightedContainer","$insertion","insertionVisible","oldDraggeeIndexes","newDraggeeIndexes","closestItem","_midpointVersion","_$prevItem","createInsertion","insertion","magnetStrength","_draggeeOffsetX","_draggeeOffsetY","canInsertBefore","$item","canInsertAfter","_getDraggeeIndexes","moveTargetItemToFront","_getItemIndex","insertBefore","_placeInsertionWithDraggee","_clearMidpoints","parent","_removeInsertion","_getClosestItem","_updateInsertion","insertAfter","onSortChange","onInsertionPointChange","indexes","_closestItem","_testForClosestItem","_midpoint","_getItemMidpoint","_startXDist","_lastXDist","abs","_startYDist","_lastYDist","_$otherItem","prev","_xDist","_yDist","next","_repositionDraggee","_moveDraggeeToItem","_$item","prependTo","_mouseDistX","_mouseDistY","_closestItemMouseDistY","_closestItemMouseDistX","EscManager","handlers","escapeLatest","register","obj","unregister","pop","escManager","HUD","$fixedTriggerParent","$hud","$tip","$body","$header","$footer","$mainContainer","$main","$shade","orientation","updatingSizeAndPosition","windowWidth","windowHeight","mainWidth","mainHeight","bodyContents","onShow","onHide","onSubmit","activeHUDs","class","shadeClass","hudClass","tipClass","bodyClass","mainContainerClass","mainClass","updateBody","$parent","offsetParent","hideOnShadeClick","closeBtn","html","headerClass","footerClass","closeOtherHUDs","hudID","hideOnEsc","updateRecords","updateSizeAndPosition","changed","force","updateSizeAndPositionInternal","triggerWidth","triggerHeight","triggerOffset","windowScrollLeft","windowScrollTop","scrollContainerTriggerOffset","scrollContainerScrollLeft","scrollContainerScrollTop","hudBodyWidth","hudBodyHeight","overflow-x","overflow-y","clearances","orientations","relevantSize","triggerSpacing","tipClasses","maxHudBodyWidth","maxHudBodyHeight","minBodyWidth","minBodyHeight","triggerCenter","maxLeft","minLeft","tipLeft","tipWidth","maxTop","minTop","tipTop","toggle","submit","_handleSubmit","MenuBtn","$btn","menu","btn","menuAnchor","aria-controls","aria-haspopup","aria-expanded","onMenuHide","onBlur","contains","activeElement","onKeyDown","$option","$currentOption","click","focusOption","onMouseDown","MixedInput","elements","focussedElement","blurTimeout","getElementIndex","isText","onFocus","setFocus","setCarotPos","addTextElement","text","TextElement","addElement","focussedElementIndex","selectionStart","selectionEnd","preVal","postVal","newText","removeElement","$prevElem","$nextElem","prevElemVal","newVal","blurFocussedElement","focusPreviousElement","$from","focusNextElement","pos","parentInput","$stage","focussed","interval","padding","setWidth","getIndex","buildStage","getTextWidth","stageWidth","setInterval","checkInput","NiceText","clearInterval","getVal","setVal","onChange","Modal","dragger","desiredWidth","desiredHeight","resizeDragger","resizeStartWidth","resizeStartHeight","setContainer","autoShow","instances","draggable","dragHandleSelector","resizable","$resizeDragHandle","_handleResizeStart","_handleResize","closeOtherModals","visibleModal","onFadeIn","quickShow","onFadeOut","triggerElement","quickHide","max","min-width","min-height","_width","getWidth","minGutter","_height","getHeight","_handleWindowResize","relativeElemPadding","$hint","$charsLeft","autoHeight","maxLength","showCharsLeft","showingHint","inputBoxSizing","minHeight","initialized","input","isVisible","initialize","getHeightForValue","updateHeight","hint","$hintContainer","charsLeftClass","updateCharsLeft","initializeIfVisible","showHint","hintFadeDuration","hideHint","onTextChange","border-top","border-right","border-bottom","border-left","padding-top","padding-right","padding-bottom","padding-left","-webkit-box-sizing","-moz-box-sizing","box-sizing","spaces","onHeightChange","updateHeightIfWidthChanged","_charsLeft","charsLeftHtml","negativeCharsLeftClass","charsLeft","Select","$selectedItems","$focusedItem","mousedownTarget","mouseUpTimeout","callbackFrame","$focusable","$first","$last","allowEmpty","checkboxMode","ignoreClick","deselectAll","getItemIndex","isSelected","selectItem","preventScroll","multi","setFocusableItem","focusItem","_selectItems","selectAll","selectRange","sliceFrom","sliceTo","deselectItem","_deselectItems","clearFirst","deselectOthers","toggleItem","_canDeselect","clearMouseUpTimeout","getFirstItem","getLastItem","isPreviousItem","isNextItem","getPreviousItem","getNextItem","getItemToTheLeft","horizontal","vertical","getClosestItem","getItemToTheRight","getItemAbove","getItemBelow","dir","step","axisProps","closestItemAxisProps","dirProps","closestItemDirectionProps","$thisItem","thisOffset","thisMidpoint","midpointOffset","midpointSizeFunc","otherRowPos","smallestMidpointDiff","$closestItem","$otherItem","otherOffset","isNextRow","rowOffset","otherMidpoint","midpointDiff","isWrongDirection","getFurthestItemToTheLeft","getFurthestItem","getFurthestItemToTheRight","getFurthestItemAbove","getFurthestItemBelow","$testItem","totalSelected","getTotalSelected","updateIndexes","itemsChanged","selectionChanged","selectedIndex","selectedClass","onSelectionChange","resetItemOrder","getSelectedItems","_actAsCheckbox","onMouseUp","<","b",">","SelectMenu","selected","build","_addSelectedOptionClass","select","dom","ul","className","setBtnText","$btnLabel","ulClass","ShortcutManager","shortcuts","layer","shortcut","_normalizeShortcut","JSON","stringify","unregisterShortcut","ctrl","shift","alt","triggerShortcut","altKey"],"mappings":"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","file":"garnish.min.js","sourcesContent":["/*!\r\n\tBase.js, version 1.1a\r\n\tCopyright 2006-2010, Dean Edwards\r\n\tLicense: http://www.opensource.org/licenses/mit-license.php\r\n*/\r\n\r\nvar Base = function() {\r\n\t// dummy\r\n};\r\n\r\nBase.extend = function(_instance, _static) { // subclass\r\n\tvar extend = Base.prototype.extend;\r\n\r\n\t// build the prototype\r\n\tBase._prototyping = true;\r\n\tvar proto = new this;\r\n\textend.call(proto, _instance);\r\n\tproto.base = function() {\r\n\t\t// call this method from any other method to invoke that method's ancestor\r\n\t};\r\n\tdelete Base._prototyping;\r\n\r\n\t// create the wrapper for the constructor function\r\n\t//var constructor = proto.constructor.valueOf(); //-dean\r\n\tvar constructor = proto.constructor;\r\n\tvar klass = proto.constructor = function() {\r\n\t\tif (!Base._prototyping) {\r\n\t\t\tif (this._constructing || this.constructor == klass) { // instantiation\r\n\t\t\t\tthis._constructing = true;\r\n\t\t\t\tconstructor.apply(this, arguments);\r\n\t\t\t\tdelete this._constructing;\r\n\t\t\t} else if (arguments[0] != null) { // casting\r\n\t\t\t\treturn (arguments[0].extend || extend).call(arguments[0], proto);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// build the class interface\r\n\tklass.ancestor = this;\r\n\tklass.extend = this.extend;\r\n\tklass.forEach = this.forEach;\r\n\tklass.implement = this.implement;\r\n\tklass.prototype = proto;\r\n\tklass.toString = this.toString;\r\n\tklass.valueOf = function(type) {\r\n\t\t//return (type == \"object\") ? klass : constructor; //-dean\r\n\t\treturn (type == \"object\") ? klass : constructor.valueOf();\r\n\t};\r\n\textend.call(klass, _static);\r\n\t// class initialisation\r\n\tif (typeof klass.init == \"function\") klass.init();\r\n\treturn klass;\r\n};\r\n\r\nBase.prototype = {\r\n\textend: function(source, value) {\r\n\t\tif (arguments.length > 1) { // extending with a name/value pair\r\n\t\t\tvar ancestor = this[source];\r\n\t\t\tif (ancestor && (typeof value == \"function\") && // overriding a method?\r\n\t\t\t\t// the valueOf() comparison is to avoid circular references\r\n\t\t\t\t(!ancestor.valueOf || ancestor.valueOf() != value.valueOf()) &&\r\n\t\t\t\t/\\bbase\\b/.test(value)) {\r\n\t\t\t\t// get the underlying method\r\n\t\t\t\tvar method = value.valueOf();\r\n\t\t\t\t// override\r\n\t\t\t\tvalue = function() {\r\n\t\t\t\t\tvar previous = this.base || Base.prototype.base;\r\n\t\t\t\t\tthis.base = ancestor;\r\n\t\t\t\t\tvar returnValue = method.apply(this, arguments);\r\n\t\t\t\t\tthis.base = previous;\r\n\t\t\t\t\treturn returnValue;\r\n\t\t\t\t};\r\n\t\t\t\t// point to the underlying method\r\n\t\t\t\tvalue.valueOf = function(type) {\r\n\t\t\t\t\treturn (type == \"object\") ? value : method;\r\n\t\t\t\t};\r\n\t\t\t\tvalue.toString = Base.toString;\r\n\t\t\t}\r\n\t\t\tthis[source] = value;\r\n\t\t} else if (source) { // extending with an object literal\r\n\t\t\tvar extend = Base.prototype.extend;\r\n\t\t\t// if this object has a customised extend method then use it\r\n\t\t\tif (!Base._prototyping && typeof this != \"function\") {\r\n\t\t\t\textend = this.extend || extend;\r\n\t\t\t}\r\n\t\t\tvar proto = {toSource: null};\r\n\t\t\t// do the \"toString\" and other methods manually\r\n\t\t\tvar hidden = [\"constructor\", \"toString\", \"valueOf\"];\r\n\t\t\t// if we are prototyping then include the constructor\r\n\t\t\tvar i = Base._prototyping ? 0 : 1;\r\n\t\t\twhile (key = hidden[i++]) {\r\n\t\t\t\tif (source[key] != proto[key]) {\r\n\t\t\t\t\textend.call(this, key, source[key]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// copy each of the source object's properties to this object\r\n\t\t\tfor (var key in source) {\r\n\t\t\t\tif (!proto[key]) {\r\n\t\t\t\t\tvar desc = Object.getOwnPropertyDescriptor(source, key);\r\n\t\t\t\t\tif (typeof desc.value != typeof undefined) {\r\n\t\t\t\t\t\t// set the value normally in case it's a function that needs to be overwritten\r\n\t\t\t\t\t\textend.call(this, key, desc.value);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// set it while maintaining the original descriptor settings\r\n\t\t\t\t\t\tObject.defineProperty(this, key, desc);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n};\r\n\r\n// initialise\r\nBase = Base.extend({\r\n\tconstructor: function() {\r\n\t\tthis.extend(arguments[0]);\r\n\t}\r\n}, {\r\n\tancestor: Object,\r\n\tversion: \"1.1\",\r\n\r\n\tforEach: function(object, block, context) {\r\n\t\tfor (var key in object) {\r\n\t\t\tif (this.prototype[key] === undefined) {\r\n\t\t\t\tblock.call(context, object[key], key, object);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\timplement: function() {\r\n\t\tfor (var i = 0; i < arguments.length; i++) {\r\n\t\t\tif (typeof arguments[i] == \"function\") {\r\n\t\t\t\t// if it's a function, call it\r\n\t\t\t\targuments[i](this.prototype);\r\n\t\t\t} else {\r\n\t\t\t\t// add the interface using the extend method\r\n\t\t\t\tthis.prototype.extend(arguments[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t},\r\n\r\n\ttoString: function() {\r\n\t\treturn String(this.valueOf());\r\n\t}\r\n});\r\n","/**\n * @namespace Garnish\n */\n\n// Bail if Garnish is already defined\nif (typeof Garnish !== 'undefined') {\n    throw 'Garnish is already defined!';\n}\n\nGarnish = {\n\n    // jQuery objects for common elements\n    $win: $(window),\n    $doc: $(document),\n    $bod: $(document.body)\n\n};\n\nGarnish.rtl = Garnish.$bod.hasClass('rtl');\nGarnish.ltr = !Garnish.rtl;\n\nGarnish = $.extend(Garnish, {\n\n    $scrollContainer: Garnish.$win,\n\n    // Key code constants\n    DELETE_KEY: 8,\n    SHIFT_KEY: 16,\n    TAB_KEY: 9,\n    CTRL_KEY: 17,\n    ALT_KEY: 18,\n    RETURN_KEY: 13,\n    ESC_KEY: 27,\n    SPACE_KEY: 32,\n    LEFT_KEY: 37,\n    UP_KEY: 38,\n    RIGHT_KEY: 39,\n    DOWN_KEY: 40,\n    A_KEY: 65,\n    S_KEY: 83,\n    CMD_KEY: 91,\n\n    // ARIA hidden classes\n    JS_ARIA_CLASS: 'garnish-js-aria',\n    JS_ARIA_TRUE_CLASS: 'garnish-js-aria-true',\n    JS_ARIA_FALSE_CLASS: 'garnish-js-aria-false',\n\n    // Mouse button constants\n    PRIMARY_CLICK: 1,\n    SECONDARY_CLICK: 3,\n\n    // Axis constants\n    X_AXIS: 'x',\n    Y_AXIS: 'y',\n\n    FX_DURATION: 100,\n\n    // Node types\n    TEXT_NODE: 3,\n\n    /**\n     * Logs a message to the browser's console, if the browser has one.\n     *\n     * @param {string} msg\n     */\n    log: function(msg) {\n        if (typeof console !== 'undefined' && typeof console.log === 'function') {\n            console.log(msg);\n        }\n    },\n\n    _isMobileBrowser: null,\n    _isMobileOrTabletBrowser: null,\n\n    /**\n     * Returns whether this is a mobile browser.\n     * Detection script courtesy of http://detectmobilebrowsers.com\n     *\n     * Last updated: 2014-11-24\n     *\n     * @param {boolean} detectTablets\n     * @return {boolean}\n     */\n    isMobileBrowser: function(detectTablets) {\n        var key = detectTablets ? '_isMobileOrTabletBrowser' : '_isMobileBrowser';\n\n        if (Garnish[key] === null) {\n            var a = navigator.userAgent || navigator.vendor || window.opera;\n            Garnish[key] = ((new RegExp('(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino' + (detectTablets ? '|android|ipad|playbook|silk' : ''), 'i')).test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4)));\n        }\n\n        return Garnish[key];\n    },\n\n    /**\n     * Returns whether a variable is an array.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isArray: function(val) {\n        return (val instanceof Array);\n    },\n\n    /**\n     * Returns whether a variable is a jQuery collection.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isJquery: function(val) {\n        return (val instanceof jQuery);\n    },\n\n    /**\n     * Returns whether a variable is a string.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isString: function(val) {\n        return (typeof val === 'string');\n    },\n\n    /**\n     * Returns whether an element has an attribute.\n     *\n     * @see http://stackoverflow.com/questions/1318076/jquery-hasattr-checking-to-see-if-there-is-an-attribute-on-an-element/1318091#1318091\n     */\n    hasAttr: function(elem, attr) {\n        var val = $(elem).attr(attr);\n        return (typeof val !== 'undefined' && val !== false);\n    },\n\n    /**\n     * Returns whether something is a text node.\n     *\n     * @param {object} elem\n     * @return {boolean}\n     */\n    isTextNode: function(elem) {\n        return (elem.nodeType === Garnish.TEXT_NODE);\n    },\n\n    /**\n     * Returns the offset of an element within the scroll container, whether that's the window or something else\n     */\n    getOffset: function(elem) {\n        this.getOffset._offset = $(elem).offset();\n\n        if (Garnish.$scrollContainer[0] !== Garnish.$win[0]) {\n            this.getOffset._offset.top += Garnish.$scrollContainer.scrollTop();\n            this.getOffset._offset.left += Garnish.$scrollContainer.scrollLeft();\n        }\n\n        return this.getOffset._offset;\n    },\n\n    /**\n     * Returns the distance between two coordinates.\n     *\n     * @param {number} x1 The first coordinate's X position.\n     * @param {number} y1 The first coordinate's Y position.\n     * @param {number} x2 The second coordinate's X position.\n     * @param {number} y2 The second coordinate's Y position.\n     * @return {number}\n     */\n    getDist: function(x1, y1, x2, y2) {\n        return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n    },\n\n    /**\n     * Returns whether an element is touching an x/y coordinate.\n     *\n     * @param {number}    x    The coordinate's X position.\n     * @param {number}    y    The coordinate's Y position.\n     * @param {object} elem Either an actual element or a jQuery collection.\n     * @return {boolean}\n     */\n    hitTest: function(x, y, elem) {\n        Garnish.hitTest._$elem = $(elem);\n        Garnish.hitTest._offset = Garnish.hitTest._$elem.offset();\n        Garnish.hitTest._x1 = Garnish.hitTest._offset.left;\n        Garnish.hitTest._y1 = Garnish.hitTest._offset.top;\n        Garnish.hitTest._x2 = Garnish.hitTest._x1 + Garnish.hitTest._$elem.outerWidth();\n        Garnish.hitTest._y2 = Garnish.hitTest._y1 + Garnish.hitTest._$elem.outerHeight();\n\n        return (x >= Garnish.hitTest._x1 && x < Garnish.hitTest._x2 && y >= Garnish.hitTest._y1 && y < Garnish.hitTest._y2);\n    },\n\n    /**\n     * Returns whether the cursor is touching an element.\n     *\n     * @param {object} ev   The mouse event object containing pageX and pageY properties.\n     * @param {object} elem Either an actual element or a jQuery collection.\n     * @return {boolean}\n     */\n    isCursorOver: function(ev, elem) {\n        return Garnish.hitTest(ev.pageX, ev.pageY, elem);\n    },\n\n    /**\n     * Copies text styles from one element to another.\n     *\n     * @param {object} source The source element. Can be either an actual element or a jQuery collection.\n     * @param {object} target The target element. Can be either an actual element or a jQuery collection.\n     */\n    copyTextStyles: function(source, target) {\n        var $source = $(source),\n            $target = $(target);\n\n        $target.css({\n            fontFamily: $source.css('fontFamily'),\n            fontSize: $source.css('fontSize'),\n            fontWeight: $source.css('fontWeight'),\n            letterSpacing: $source.css('letterSpacing'),\n            lineHeight: $source.css('lineHeight'),\n            textAlign: $source.css('textAlign'),\n            textIndent: $source.css('textIndent'),\n            whiteSpace: $source.css('whiteSpace'),\n            wordSpacing: $source.css('wordSpacing'),\n            wordWrap: $source.css('wordWrap')\n        });\n    },\n\n    /**\n     * Adds modal ARIA and role attributes to a container\n     *\n     * @param {object} container The container element. Can be either an actual element or a jQuery collection.\n     */\n    addModalAttributes: function(container) {\n        var $container = $(container);\n\n        $(container).attr({\n            'aria-modal': 'true',\n            'role': 'dialog',\n        });\n    },\n\n    /**\n     * Hide immediate descendants of the body element from screen readers\n     *\n     * @param {object} modal The modal container. Can be either an actual element or a jQuery collection.\n     */\n    hideModalBackgroundContent: function(modal) {\n        var $modal = $(modal);\n\n        Garnish.$bod.children().each(function() {\n            // If element is modal or already has jsAria class, do nothing\n            if (Garnish.hasJsAriaClass(this) || this === $modal.get(0)) return;\n\n            if (Garnish.contentShouldBeHidden(this)) {\n                Garnish.ariaHide(this);\n            }\n        });\n    },\n\n    /**\n     * Un-hide elements underneath modal being closed\n     *\n     */\n    resetBackgroundContentVisibility: function(container) {\n        var nextVisibleModal = Garnish.getNextVisibleModal(container);\n\n        // If there is another modal, make it accessible to AT\n        if (nextVisibleModal) {\n            $(nextVisibleModal).removeClass([Garnish.JS_ARIA_CLASS, Garnish.JS_ARIA_TRUE_CLASS, Garnish.JS_ARIA_FALSE_CLASS]);\n            $(nextVisibleModal).removeAttr('aria-hidden');\n            return;\n        };\n\n        // If no more modals in DOM, loop through hidden elements and un-hide them\n        var ariaSelector = '.' + Garnish.JS_ARIA_CLASS + ', .' + Garnish.JS_ARIA_FALSE_CLASS + ', .' + Garnish.JS_ARIA_TRUE_CLASS;\n        var ariaHiddenElements = $(ariaSelector);\n\n        $(ariaHiddenElements).each(function() {\n            if ($(this).hasClass(Garnish.JS_ARIA_CLASS)) {\n                $(this).removeClass(Garnish.JS_ARIA_CLASS);\n                $(this).removeAttr('aria-hidden');\n            } else if ($(this).hasClass(Garnish.JS_ARIA_FALSE_CLASS)) {\n                $(this).removeClass(Garnish.JS_ARIA_FALSE_CLASS);\n                $(this).attr('aria-hidden', false);\n            } else if ($(this).hasClass(Garnish.JS_ARIA_TRUE_CLASS)) {\n                $(this).removeClass(Garnish.JS_ARIA_TRUE_CLASS);\n                $(this).attr('aria-hidden', true);\n            }\n        });\n    },\n\n    contentShouldBeHidden: function(element) {\n        var hide = true;\n        var tagName = $(element).prop('tagName');\n\n        // Do not hide script or style tags, or the visible modal container\n        if (tagName === 'SCRIPT' || tagName === 'STYLE') {\n            hide = false;\n        }\n\n        return hide;\n    },\n\n    /**\n     * Apply aria-hidden=\"true\" to element and store previous value as class\n     *\n     * @param {object} element The element. Can be either an actual element or a jQuery collection.\n     */\n    ariaHide: function(element) {\n        var ariaHiddenAttribute = $(element).attr('aria-hidden');\n\n        // Capture initial aria-hidden values in an applied class\n        if (!ariaHiddenAttribute) {\n            $(element).addClass(Garnish.JS_ARIA_CLASS);\n        } else if (ariaHiddenAttribute === 'false') {\n            $(element).addClass(Garnish.JS_ARIA_FALSE_CLASS);\n        } else if (ariaHiddenAttribute === 'true') {\n            $(element.addClass(Garnish.JS_ARIA_TRUE_CLASS));\n        }\n\n        $(element).attr('aria-hidden', 'true');\n    },\n\n    getNextVisibleModal: function(container) {\n        var modals = $('[aria-modal=\"true\"]').filter(function() {\n            return $(this).css('display') == 'block';\n        });\n\n        var prevContainerIndex = $(modals).index(container);\n        var newModals = $(modals).slice(0, prevContainerIndex);\n\n        if (newModals.length) {\n            return $(newModals).last();\n        } else {\n            return null;\n        }\n    },\n\n    /**\n     * Has been hidden from screen reader users as a result of modal open\n     *\n     * @param {object} element The element. Can be either an actual element or a jQuery collection.\n     */\n    hasJsAriaClass: function(element) {\n        return $(element).hasClass(Garnish.JS_ARIA_CLASS) || $(element).hasClass(Garnish.JS_ARIA_FALSE_CLASS) || $(element).hasClass(Garnish.JS_ARIA_TRUE_CLASS);\n    },\n\n    /**\n     * Traps focus within a container, so when focus is tabbed out of it, it’s cycled back into it.\n     * @param {Object} container\n     */\n    trapFocusWithin: function(container) {\n        var $container = $(container);\n        $container.on('keydown.focus-trap', function (ev) {\n            if (ev.keyCode === Garnish.TAB_KEY) {\n                var $focusableElements = $container.find(':focusable');\n                var index = $focusableElements.index(ev.target);\n\n                if (index === 0 && ev.shiftKey) {\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                    $focusableElements.last().focus();\n                } else if (index === $focusableElements.length - 1 && !ev.shiftKey) {\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                    $focusableElements.first().focus();\n                }\n            }\n        });\n    },\n\n    /**\n     * Sets focus to the first focusable element within a container.\n     * @param {Object} container\n     */\n    setFocusWithin: function(container) {\n        $(container).find(':focusable:first').focus();\n    },\n\n    /**\n     * Returns the body's real scrollTop, discarding any window banding in Safari.\n     *\n     * @return {number}\n     */\n    getBodyScrollTop: function() {\n        Garnish.getBodyScrollTop._scrollTop = document.body.scrollTop;\n\n        if (Garnish.getBodyScrollTop._scrollTop < 0) {\n            Garnish.getBodyScrollTop._scrollTop = 0;\n        }\n        else {\n            Garnish.getBodyScrollTop._maxScrollTop = Garnish.$bod.outerHeight() - Garnish.$win.height();\n\n            if (Garnish.getBodyScrollTop._scrollTop > Garnish.getBodyScrollTop._maxScrollTop) {\n                Garnish.getBodyScrollTop._scrollTop = Garnish.getBodyScrollTop._maxScrollTop;\n            }\n        }\n\n        return Garnish.getBodyScrollTop._scrollTop;\n    },\n\n    requestAnimationFrame: (function() {\n            var raf = (\n                window.requestAnimationFrame ||\n                window.mozRequestAnimationFrame ||\n                window.webkitRequestAnimationFrame ||\n                function(fn) {\n                    return window.setTimeout(fn, 20);\n                }\n            );\n\n            return function(fn) {\n                return raf(fn);\n            };\n        })(),\n\n    cancelAnimationFrame: (function() {\n            var cancel = (\n                window.cancelAnimationFrame ||\n                window.mozCancelAnimationFrame ||\n                window.webkitCancelAnimationFrame ||\n                window.clearTimeout\n            );\n\n            return function(id) {\n                return cancel(id);\n            };\n        })(),\n\n    /**\n     * Scrolls a container element to an element within it.\n     *\n     * @param {object} container Either an actual element or a jQuery collection.\n     * @param {object} elem      Either an actual element or a jQuery collection.\n     */\n    scrollContainerToElement: function(container, elem) {\n        var $elem;\n\n        if (typeof elem === 'undefined') {\n            $elem = $(container);\n            $container = $elem.scrollParent();\n        }\n        else {\n            var $container = $(container);\n            $elem = $(elem);\n        }\n\n        if ($container.prop('nodeName') === 'HTML' || $container[0] === Garnish.$doc[0]) {\n            $container = Garnish.$win;\n        }\n\n        var scrollTop = $container.scrollTop(),\n            elemOffset = $elem.offset().top;\n\n        var elemScrollOffset;\n\n        if ($container[0] === window) {\n            elemScrollOffset = elemOffset - scrollTop;\n        }\n        else {\n            elemScrollOffset = elemOffset - $container.offset().top;\n        }\n\n        var targetScrollTop = false;\n\n        // Is the element above the fold?\n        if (elemScrollOffset < 0) {\n            targetScrollTop = scrollTop + elemScrollOffset - 10;\n        }\n        else {\n            var elemHeight = $elem.outerHeight(),\n                containerHeight = ($container[0] === window ? window.innerHeight : $container[0].clientHeight);\n\n            // Is it below the fold?\n            if (elemScrollOffset + elemHeight > containerHeight) {\n                targetScrollTop = scrollTop + (elemScrollOffset - (containerHeight - elemHeight)) + 10;\n            }\n        }\n\n        if (targetScrollTop !== false) {\n            // Velocity only allows you to scroll to an arbitrary position if you're scrolling the main window\n            if ($container[0] === window) {\n                $('html').velocity('scroll', {\n                    offset: targetScrollTop + 'px',\n                    mobileHA: false\n                });\n            }\n            else {\n                $container.scrollTop(targetScrollTop);\n            }\n        }\n    },\n\n    SHAKE_STEPS: 10,\n    SHAKE_STEP_DURATION: 25,\n\n    /**\n     * Shakes an element.\n     *\n     * @param {object}  elem Either an actual element or a jQuery collection.\n     * @param {string} prop The property that should be adjusted (default is 'margin-left').\n     */\n    shake: function(elem, prop) {\n        var $elem = $(elem);\n\n        if (!prop) {\n            prop = 'margin-left';\n        }\n\n        var startingPoint = parseInt($elem.css(prop));\n        if (isNaN(startingPoint)) {\n            startingPoint = 0;\n        }\n\n        for (var i = 0; i <= Garnish.SHAKE_STEPS; i++) {\n            (function(i) {\n                setTimeout(function() {\n                    Garnish.shake._properties = {};\n                    Garnish.shake._properties[prop] = startingPoint + (i % 2 ? -1 : 1) * (10 - i);\n                    $elem.velocity(Garnish.shake._properties, Garnish.SHAKE_STEP_DURATION);\n                }, (Garnish.SHAKE_STEP_DURATION * i));\n            })(i);\n        }\n    },\n\n    /**\n     * Returns the first element in an array or jQuery collection.\n     *\n     * @param {object} elem\n     * @return mixed\n     */\n    getElement: function(elem) {\n        return $.makeArray(elem)[0];\n    },\n\n    /**\n     * Returns the beginning of an input's name= attribute value with any [bracktes] stripped out.\n     *\n     * @param {object} elem\n     * @return string|null\n     */\n    getInputBasename: function(elem) {\n        var name = $(elem).attr('name');\n\n        if (name) {\n            return name.replace(/\\[.*/, '');\n        }\n        else {\n            return null;\n        }\n    },\n\n    /**\n     * Returns an input's value as it would be POSTed.\n     * So unchecked checkboxes and radio buttons return null,\n     * and multi-selects whose name don't end in \"[]\" only return the last selection\n     *\n     * @param {object} $input\n     * @return {(string|string[])}\n     */\n    getInputPostVal: function($input) {\n        var type = $input.attr('type'),\n            val = $input.val();\n\n        // Is this an unchecked checkbox or radio button?\n        if ((type === 'checkbox' || type === 'radio')) {\n            if ($input.prop('checked')) {\n                return val;\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Flatten any array values whose input name doesn't end in \"[]\"\n        //  - e.g. a multi-select\n        else if (Garnish.isArray(val) && $input.attr('name').substr(-2) !== '[]') {\n            if (val.length) {\n                return val[val.length - 1];\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Just return the value\n        else {\n            return val;\n        }\n    },\n\n    /**\n     * Returns the inputs within a container\n     *\n     * @param {object} container The container element. Can be either an actual element or a jQuery collection.\n     * @return {object}\n     */\n    findInputs: function(container) {\n        return $(container).find('input,text,textarea,select,button');\n    },\n\n    /**\n     * Returns the focusable elements within a container\n     *\n     * @param {object} container The container element. Can be either an actual element or a jQuery collection.\n     * @return {object}\n     */\n    findFocusable: function(container) {\n        return $(container).find(':focusable');\n    },\n\n    /**\n     * Returns the currently focused element\n     *\n     * @return {object}\n     */\n    findCurrentFocus: function() {\n        return $(':focus');\n    },\n\n    /**\n     * Returns the post data within a container.\n     *\n     * @param {object} container\n     * @return {array}\n     */\n    getPostData: function(container) {\n        var postData = {},\n            arrayInputCounters = {},\n            $inputs = Garnish.findInputs(container);\n\n        var inputName;\n\n        for (var i = 0; i < $inputs.length; i++) {\n            var $input = $inputs.eq(i);\n\n            if ($input.prop('disabled')) {\n                continue;\n            }\n\n            inputName = $input.attr('name');\n            if (!inputName) {\n                continue;\n            }\n\n            var inputVal = Garnish.getInputPostVal($input);\n            if (inputVal === null) {\n                continue;\n            }\n\n            var isArrayInput = (inputName.substr(-2) === '[]');\n\n            if (isArrayInput) {\n                // Get the cropped input name\n                var croppedName = inputName.substring(0, inputName.length - 2);\n\n                // Prep the input counter\n                if (typeof arrayInputCounters[croppedName] === 'undefined') {\n                    arrayInputCounters[croppedName] = 0;\n                }\n            }\n\n            if (!Garnish.isArray(inputVal)) {\n                inputVal = [inputVal];\n            }\n\n            for (var j = 0; j < inputVal.length; j++) {\n                if (isArrayInput) {\n                    inputName = croppedName + '[' + arrayInputCounters[croppedName] + ']';\n                    arrayInputCounters[croppedName]++;\n                }\n\n                postData[inputName] = inputVal[j];\n            }\n        }\n\n        return postData;\n    },\n\n    copyInputValues: function(source, target) {\n        var $sourceInputs = Garnish.findInputs(source),\n            $targetInputs = Garnish.findInputs(target);\n\n        for (var i = 0; i < $sourceInputs.length; i++) {\n            if (typeof $targetInputs[i] === 'undefined') {\n                break;\n            }\n\n            $targetInputs.eq(i).val(\n                $sourceInputs.eq(i).val()\n            );\n        }\n    },\n\n    /**\n     * Returns whether the \"Ctrl\" key is pressed (or ⌘ if this is a Mac) for a given keyboard event\n     *\n     * @param ev The keyboard event\n     *\n     * @return {boolean} Whether the \"Ctrl\" key is pressed\n     */\n    isCtrlKeyPressed: function(ev) {\n        if (window.navigator.platform.match(/Mac/)) {\n            // metaKey maps to ⌘ on Macs\n            return ev.metaKey;\n        }\n        return ev.ctrlKey;\n    },\n\n    _eventHandlers: [],\n\n    _normalizeEvents: function(events) {\n        if (typeof events === 'string') {\n            events = events.split(' ');\n        }\n\n        for (var i = 0; i < events.length; i++) {\n            if (typeof events[i] === 'string') {\n                events[i] = events[i].split('.');\n            }\n        }\n\n        return events;\n    },\n\n    on: function(target, events, data, handler) {\n        if (typeof data === 'function') {\n            handler = data;\n            data = {};\n        }\n\n        events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n            this._eventHandlers.push({\n                target: target,\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(target, events, handler) {\n        events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (\n                    eventHandler.target === target &&\n                    eventHandler.type === ev[0] &&\n                    (!ev[1] || eventHandler.namespace === ev[1]) &&\n                    eventHandler.handler === handler\n                ) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    }\n});\n\n\n/**\n * Garnish base class\n */\nGarnish.Base = Base.extend({\n\n    settings: null,\n\n    _eventHandlers: null,\n    _namespace: null,\n    _$listeners: null,\n    _disabled: false,\n\n    constructor: function() {\n        this._eventHandlers = [];\n        this._namespace = '.Garnish' + Math.floor(Math.random() * 1000000000);\n        this._listeners = [];\n        this.init.apply(this, arguments);\n    },\n\n    init: $.noop,\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend({}, baseSettings, defaults, settings);\n    },\n\n    on: function(events, data, handler) {\n        if (typeof data === 'function') {\n            handler = data;\n            data = {};\n        }\n\n        events = Garnish._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n            this._eventHandlers.push({\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(events, handler) {\n        events = Garnish._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (\n                    eventHandler.type === ev[0] &&\n                    (!ev[1] || eventHandler.namespace === ev[1]) &&\n                    eventHandler.handler === handler\n                ) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    },\n\n    trigger: function(type, data) {\n        var ev = {\n            type: type,\n            target: this\n        };\n\n        // instance level event handlers\n        var i, handler, _ev;\n        for (i = 0; i < this._eventHandlers.length; i++) {\n            handler = this._eventHandlers[i];\n\n            if (handler.type === type) {\n                _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev);\n            }\n        }\n\n        // class level event handlers\n        for (i = 0; i < Garnish._eventHandlers.length; i++) {\n            handler = Garnish._eventHandlers[i];\n\n            if (this instanceof handler.target && handler.type === type) {\n                _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev);\n            }\n        }\n    },\n\n    _splitEvents: function(events) {\n        if (typeof events === 'string') {\n            events = events.split(',');\n\n            for (var i = 0; i < events.length; i++) {\n                events[i] = $.trim(events[i]);\n            }\n        }\n\n        return events;\n    },\n\n    _formatEvents: function(events) {\n        events = this._splitEvents(events).slice(0);\n\n        for (var i = 0; i < events.length; i++) {\n            events[i] += this._namespace;\n        }\n\n        return events.join(' ');\n    },\n\n    addListener: function(elem, events, data, func) {\n        var $elem = $(elem);\n\n        // Ignore if there aren't any elements\n        if (!$elem.length) {\n            return;\n        }\n\n        events = this._splitEvents(events);\n\n        // Param mapping\n        if (typeof func === 'undefined' && typeof data !== 'object') {\n            // (elem, events, func)\n            func = data;\n            data = {};\n        }\n\n        if (typeof func === 'function') {\n            func = func.bind(this);\n        }\n        else {\n            func = this[func].bind(this);\n        }\n\n        $elem.on(this._formatEvents(events), data, $.proxy(function() {\n            if (!this._disabled) {\n                return func.apply(this, arguments);\n            }\n        }, this));\n\n        // Remember that we're listening to this element\n        if ($.inArray(elem, this._listeners) === -1) {\n            this._listeners.push(elem);\n        }\n    },\n\n    removeListener: function(elem, events) {\n        $(elem).off(this._formatEvents(events));\n    },\n\n    removeAllListeners: function(elem) {\n        $(elem).off(this._namespace);\n    },\n\n    disable: function() {\n        this._disabled = true;\n    },\n\n    enable: function() {\n        this._disabled = false;\n    },\n\n    destroy: function() {\n        this.trigger('destroy');\n        this.removeAllListeners(this._listeners);\n    }\n});\n\n// Custom events\n// -----------------------------------------------------------------------------\n\nvar erd;\n\nfunction getErd() {\n    if (typeof erd === 'undefined') {\n        erd = elementResizeDetectorMaker({\n            callOnAdd: false\n        });\n    }\n\n    return erd;\n}\n\nfunction triggerResizeEvent(elem) {\n    $(elem).trigger('resize');\n}\n\n// Work them into jQuery's event system\n$.extend(jQuery.event.special, {\n    activate: {\n        setup: function(data, namespaces, eventHandle) {\n            var activateNamespace = this._namespace + '-activate';\n            var $elem = $(this);\n\n            $elem.on({\n                'mousedown.garnish-activate': function(e) {\n                    // Prevent buttons from getting focus on click\n                    e.preventDefault();\n                },\n                'click.garnish-activate': function(e) {\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.trigger('activate');\n                    }\n                },\n                'keydown.garnish-activate': function(e) {\n                    // Ignore if the event was bubbled up, or if it wasn't the space key\n                    if (this !== $elem[0] || e.keyCode !== Garnish.SPACE_KEY) {\n                        return;\n                    }\n\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.addClass('active');\n\n                        Garnish.$doc.on('keyup.garnish-activate', function(e) {\n                            $elem.removeClass('active');\n\n                            if (e.keyCode === Garnish.SPACE_KEY) {\n                                e.preventDefault();\n                                $elem.trigger('activate');\n                            }\n\n                            Garnish.$doc.off('keyup.garnish-activate');\n                        });\n                    }\n                }\n            });\n\n            if (!$elem.hasClass('disabled')) {\n                $elem.attr('tabindex', '0');\n            } else {\n                $elem.removeAttr('tabindex');\n            }\n        },\n        teardown: function() {\n            $(this).off('.garnish-activate');\n        }\n    },\n\n    textchange: {\n        setup: function(data, namespaces, eventHandle) {\n            var $elem = $(this);\n            $elem.data('garnish-textchange-value', $elem.val());\n            $elem.on('keypress.garnish-textchange keyup.garnish-textchange change.garnish-textchange blur.garnish-textchange', function(e) {\n                var val = $elem.val();\n                if (val !== $elem.data('garnish-textchange-value')) {\n                    $elem.data('garnish-textchange-value', val);\n                    $elem.trigger('textchange');\n                }\n            });\n        },\n        teardown: function() {\n            $(this).off('.garnish-textchange');\n        },\n        handle: function(ev, data) {\n            var el = this;\n            var args = arguments;\n            var delay = data && typeof data.delay !== 'undefined' ? data.delay : (ev.data && ev.data.delay !== undefined ? ev.data.delay : null);\n            var handleObj = ev.handleObj;\n            var targetData = $.data(ev.target);\n\n            // Was this event configured with a delay?\n            if (delay) {\n                if (targetData.delayTimeout) {\n                    clearTimeout(targetData.delayTimeout);\n                }\n\n                targetData.delayTimeout = setTimeout(function() {\n                    handleObj.handler.apply(el, args);\n                }, delay);\n            } else {\n                return handleObj.handler.apply(el, args);\n            }\n        }\n    },\n\n    resize: {\n        setup: function(data, namespaces, eventHandle) {\n            // window is the only element that natively supports a resize event\n            if (this === window) {\n                return false;\n            }\n\n            $('> :last-child', this).addClass('last');\n            getErd().listenTo(this, triggerResizeEvent)\n        },\n        teardown: function() {\n            if (this === window) {\n                return false;\n            }\n\n            getErd().removeListener(this, triggerResizeEvent);\n        }\n    }\n});\n\n// Give them their own element collection chaining methods\njQuery.each(['activate', 'textchange', 'resize'], function(i, name) {\n    jQuery.fn[name] = function(data, fn) {\n        return arguments.length > 0 ?\n            this.on(name, null, data, fn) :\n            this.trigger(name);\n    };\n});\n","/** global: Garnish */\n/**\n * Base drag class\n *\n * Does all the grunt work for manipulating elements via click-and-drag,\n * while leaving the actual element manipulation up to a subclass.\n */\nGarnish.BaseDrag = Garnish.Base.extend(\n    {\n        $items: null,\n\n        dragging: false,\n\n        mousedownX: null,\n        mousedownY: null,\n        realMouseX: null,\n        realMouseY: null,\n        mouseX: null,\n        mouseY: null,\n        mouseDistX: null,\n        mouseDistY: null,\n        mouseOffsetX: null,\n        mouseOffsetY: null,\n\n        $targetItem: null,\n\n        scrollProperty: null,\n        scrollAxis: null,\n        scrollDist: null,\n        scrollProxy: null,\n        scrollFrame: null,\n\n        _: null,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            this.settings = $.extend({}, Garnish.BaseDrag.defaults, settings);\n\n            this.$items = $();\n            this._ = {};\n\n            if (items) {\n                this.addItems(items);\n            }\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            return true;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            this.dragging = true;\n            this.onDragStart();\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            if (didMouseMove) {\n                // Is the mouse up against one of the window edges?\n                this.drag._scrollProperty = null;\n\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    // Scrolling up?\n                    this.drag._winScrollTop = Garnish.$win.scrollTop();\n                    this.drag._minMouseScrollY = this.drag._winScrollTop + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseY < this.drag._minMouseScrollY) {\n                        this.drag._scrollProperty = 'scrollTop';\n                        this.drag._scrollAxis = 'Y';\n                        this.drag._scrollDist = Math.round((this.mouseY - this.drag._minMouseScrollY) / 2);\n                    }\n                    else {\n                        // Scrolling down?\n                        this.drag._maxMouseScrollY = this.drag._winScrollTop + Garnish.$win.height() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseY > this.drag._maxMouseScrollY) {\n                            this.drag._scrollProperty = 'scrollTop';\n                            this.drag._scrollAxis = 'Y';\n                            this.drag._scrollDist = Math.round((this.mouseY - this.drag._maxMouseScrollY) / 2);\n                        }\n                    }\n                }\n\n                if (!this.drag._scrollProperty && this.settings.axis !== Garnish.Y_AXIS) {\n                    // Scrolling left?\n                    this.drag._winScrollLeft = Garnish.$win.scrollLeft();\n                    this.drag._minMouseScrollX = this.drag._winScrollLeft + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseX < this.drag._minMouseScrollX) {\n                        this.drag._scrollProperty = 'scrollLeft';\n                        this.drag._scrollAxis = 'X';\n                        this.drag._scrollDist = Math.round((this.mouseX - this.drag._minMouseScrollX) / 2);\n                    }\n                    else {\n                        // Scrolling right?\n                        this.drag._maxMouseScrollX = this.drag._winScrollLeft + Garnish.$win.width() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseX > this.drag._maxMouseScrollX) {\n                            this.drag._scrollProperty = 'scrollLeft';\n                            this.drag._scrollAxis = 'X';\n                            this.drag._scrollDist = Math.round((this.mouseX - this.drag._maxMouseScrollX) / 2);\n                        }\n                    }\n                }\n\n                if (this.drag._scrollProperty) {\n                    // Are we starting to scroll now?\n                    if (!this.scrollProperty) {\n                        if (!this.scrollProxy) {\n                            this.scrollProxy = this._scrollWindow.bind(this);\n                        }\n\n                        if (this.scrollFrame) {\n                            Garnish.cancelAnimationFrame(this.scrollFrame);\n                            this.scrollFrame = null;\n                        }\n\n                        this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n                    }\n\n                    this.scrollProperty = this.drag._scrollProperty;\n                    this.scrollAxis = this.drag._scrollAxis;\n                    this.scrollDist = this.drag._scrollDist;\n                }\n                else {\n                    this._cancelWindowScroll();\n                }\n            }\n\n            this.onDrag();\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            this.dragging = false;\n            this.onDragStop();\n\n            // Clear the scroll animation\n            this._cancelWindowScroll();\n        },\n\n        /**\n         * Add Items\n         *\n         * @param {object} items Elements that should be draggable.\n         */\n        addItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure this element doesn't belong to another dragger\n                if ($.data(item, 'drag')) {\n                    Garnish.log('Element was added to more than one dragger');\n                    $.data(item, 'drag').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'drag', this);\n\n                // Add the listener\n                this.addListener(item, 'mousedown', '_handleMouseDown');\n            }\n\n            this.$items = this.$items.add(items);\n        },\n\n        /**\n         * Remove Items\n         *\n         * @param {object} items Elements that should no longer be draggable.\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index !== -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('dragStart');\n                this.settings.onDragStart();\n            }.bind(this));\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('drag');\n                this.settings.onDrag();\n            }.bind(this));\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('dragStop');\n                this.settings.onDragStop();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Handle Mouse Down\n         */\n        _handleMouseDown: function(ev) {\n            // Ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Ignore if we already have a target\n            if (this.$targetItem) {\n                return;\n            }\n\n            // Ignore if they didn't actually click on the handle\n            var $target = $(ev.target),\n                $handle = this._getItemHandle(ev.currentTarget);\n\n            if (!$target.is($handle) && !$target.closest($handle).length) {\n                return;\n            }\n\n            // Make sure the target isn't a button (unless the button is the handle)\n            if (ev.currentTarget !== ev.target && this.settings.ignoreHandleSelector) {\n                if (\n                    $target.is(this.settings.ignoreHandleSelector) ||\n                    $target.closest(this.settings.ignoreHandleSelector).length\n                ) {\n                    return;\n                }\n            }\n\n            ev.preventDefault();\n\n            // Make sure that dragging is allowed right now\n            if (!this.allowDragging()) {\n                return;\n            }\n\n            // Capture the target\n            this.$targetItem = $(ev.currentTarget);\n\n            // Capture the current mouse position\n            this.mousedownX = this.mouseX = ev.pageX;\n            this.mousedownY = this.mouseY = ev.pageY;\n\n            // Capture the difference between the mouse position and the target item's offset\n            var offset = this.$targetItem.offset();\n            this.mouseOffsetX = ev.pageX - offset.left;\n            this.mouseOffsetY = ev.pageY - offset.top;\n\n            // Listen for mousemove, mouseup\n            this.addListener(Garnish.$doc, 'mousemove', '_handleMouseMove');\n            this.addListener(Garnish.$doc, 'mouseup', '_handleMouseUp');\n        },\n\n        _getItemHandle: function(item) {\n            if (this.settings.handle) {\n                if (typeof this.settings.handle === 'object') {\n                    return $(this.settings.handle);\n                }\n\n                if (typeof this.settings.handle === 'string') {\n                    return $(this.settings.handle, item);\n                }\n\n                if (typeof this.settings.handle === 'function') {\n                    return $(this.settings.handle(item));\n                }\n            }\n\n            return $(item);\n        },\n\n        /**\n         * Handle Mouse Move\n         */\n        _handleMouseMove: function(ev) {\n            ev.preventDefault();\n\n            this.realMouseX = ev.pageX;\n            this.realMouseY = ev.pageY;\n\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this.mouseX = ev.pageX;\n            }\n\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this.mouseY = ev.pageY;\n            }\n\n            this.mouseDistX = this.mouseX - this.mousedownX;\n            this.mouseDistY = this.mouseY - this.mousedownY;\n\n            if (!this.dragging) {\n                // Has the mouse moved far enough to initiate dragging yet?\n                this._handleMouseMove._mouseDist = Garnish.getDist(this.mousedownX, this.mousedownY, this.realMouseX, this.realMouseY);\n\n                if (this._handleMouseMove._mouseDist >= Garnish.BaseDrag.minMouseDist) {\n                    this.startDragging();\n                }\n            }\n\n            if (this.dragging) {\n                this.drag(true);\n            }\n        },\n\n        /**\n         * Handle Moues Up\n         */\n        _handleMouseUp: function(ev) {\n            // Unbind the document events\n            this.removeAllListeners(Garnish.$doc);\n\n            if (this.dragging) {\n                this.stopDragging();\n            }\n\n            this.$targetItem = null;\n        },\n\n        /**\n         * Scroll Window\n         */\n        _scrollWindow: function() {\n            this._.scrollPos = Garnish.$scrollContainer[this.scrollProperty]();\n            Garnish.$scrollContainer[this.scrollProperty](this._.scrollPos + this.scrollDist);\n\n            this['mouse' + this.scrollAxis] -= this._.scrollPos - Garnish.$scrollContainer[this.scrollProperty]();\n            this['realMouse' + this.scrollAxis] = this['mouse' + this.scrollAxis];\n\n            this.drag();\n\n            this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n        },\n\n        /**\n         * Cancel Window Scroll\n         */\n        _cancelWindowScroll: function() {\n            if (this.scrollFrame) {\n                Garnish.cancelAnimationFrame(this.scrollFrame);\n                this.scrollFrame = null;\n            }\n\n            this.scrollProperty = null;\n            this.scrollAxis = null;\n            this.scrollDist = null;\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            this.removeAllListeners(item);\n            $.removeData(item, 'drag');\n        }\n    },\n    {\n        minMouseDist: 1,\n        windowScrollTargetSize: 25,\n\n        defaults: {\n            handle: null,\n            axis: null,\n            ignoreHandleSelector: 'input, textarea, button, select, .btn',\n\n            onDragStart: $.noop,\n            onDrag: $.noop,\n            onDragStop: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Checkbox select class\n */\nGarnish.CheckboxSelect = Garnish.Base.extend(\n    {\n        $container: null,\n        $all: null,\n        $options: null,\n\n        init: function(container) {\n            this.$container = $(container);\n\n            // Is this already a checkbox select?\n            if (this.$container.data('checkboxSelect')) {\n                Garnish.log('Double-instantiating a checkbox select on an element');\n                this.$container.data('checkbox-select').destroy();\n            }\n\n            this.$container.data('checkboxSelect', this);\n\n            var $checkboxes = this.$container.find('input');\n            this.$all = $checkboxes.filter('.all:first');\n            this.$options = $checkboxes.not(this.$all);\n\n            this.addListener(this.$all, 'change', 'onAllChange');\n        },\n\n        onAllChange: function() {\n            var isAllChecked = this.$all.prop('checked');\n\n            this.$options.prop({\n                checked: isAllChecked,\n                disabled: isAllChecked\n            });\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('checkboxSelect');\n            this.base();\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Context Menu\n */\nGarnish.ContextMenu = Garnish.Base.extend(\n    {\n        $target: null,\n        options: null,\n        $menu: null,\n        showingMenu: false,\n\n        /**\n         * Constructor\n         */\n        init: function(target, options, settings) {\n            this.$target = $(target);\n\n            // Is this already a context menu target?\n            if (this.$target.data('contextmenu')) {\n                Garnish.log('Double-instantiating a context menu on an element');\n                this.$target.data('contextmenu').destroy();\n            }\n\n            this.$target.data('contextmenu', this);\n\n            this.options = options;\n            this.setSettings(settings, Garnish.ContextMenu.defaults);\n\n            Garnish.ContextMenu.counter++;\n\n            this.enable();\n        },\n\n        /**\n         * Build Menu\n         */\n        buildMenu: function() {\n            this.$menu = $('<div class=\"' + this.settings.menuClass + '\" style=\"display: none\" />');\n\n            var $ul = $('<ul/>').appendTo(this.$menu);\n\n            for (var i in this.options) {\n                if (!this.options.hasOwnProperty(i)) {\n                    continue;\n                }\n\n                var option = this.options[i];\n\n                if (option === '-') {\n                    // Create a new <ul>\n                    $('<hr/>').appendTo(this.$menu);\n                    $ul = $('<ul/>').appendTo(this.$menu);\n                }\n                else {\n                    var $li = $('<li></li>').appendTo($ul),\n                        $a = $('<a>' + option.label + '</a>').appendTo($li);\n\n                    if (typeof option.onClick === 'function') {\n                        // maintain the current $a and options.onClick variables\n                        (function($a, onClick) {\n                            setTimeout(function() {\n                                $a.mousedown(function(ev) {\n                                    this.hideMenu();\n                                    // call the onClick callback, with the scope set to the item,\n                                    // and pass it the event with currentTarget set to the item as well\n                                    onClick.call(this.currentTarget, $.extend(ev, {currentTarget: this.currentTarget}));\n                                }.bind(this));\n                            }.bind(this), 1);\n                        }).call(this, $a, option.onClick);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Show Menu\n         */\n        showMenu: function(ev) {\n            // Ignore left mouse clicks\n            if (ev.type === 'mousedown' && ev.which !== Garnish.SECONDARY_CLICK) {\n                return;\n            }\n\n            if (ev.type === 'contextmenu') {\n                // Prevent the real context menu from showing\n                ev.preventDefault();\n            }\n\n            // Ignore if already showing\n            if (this.showing && ev.currentTarget === this.currentTarget) {\n                return;\n            }\n\n            this.currentTarget = ev.currentTarget;\n\n            if (!this.$menu) {\n                this.buildMenu();\n            }\n\n            this.$menu.appendTo(document.body);\n            this.$menu.show();\n            this.$menu.css({left: ev.pageX + 1, top: ev.pageY - 4});\n\n            this.showing = true;\n            this.trigger('show');\n            Garnish.shortcutManager.addLayer();\n            Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.hideMenu.bind(this));\n\n            setTimeout(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'hideMenu');\n            }.bind(this), 0);\n        },\n\n        /**\n         * Hide Menu\n         */\n        hideMenu: function() {\n            this.removeListener(Garnish.$doc, 'mousedown');\n            this.$menu.hide();\n            this.showing = false;\n            this.trigger('hide');\n            Garnish.shortcutManager.removeLayer();\n        },\n\n        /**\n         * Enable\n         */\n        enable: function() {\n            this.addListener(this.$target, 'contextmenu,mousedown', 'showMenu');\n        },\n\n        /**\n         * Disable\n         */\n        disable: function() {\n            this.removeListener(this.$target, 'contextmenu,mousedown');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$target.removeData('contextmenu');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuClass: 'menu'\n        },\n        counter: 0\n    }\n);\n","/** global: Garnish */\n/**\n * Custom Select Menu\n */\nGarnish.CustomSelect = Garnish.Base.extend(\n  {\n    settings: null,\n    visible: false,\n\n    $container: null,\n    $options: null,\n    $anchor: null,\n\n    menuId: null,\n\n    _windowWidth: null,\n    _windowHeight: null,\n    _windowScrollLeft: null,\n    _windowScrollTop: null,\n\n    _anchorOffset: null,\n    _anchorWidth: null,\n    _anchorHeight: null,\n    _anchorOffsetRight: null,\n    _anchorOffsetBottom: null,\n\n    _menuWidth: null,\n    _menuHeight: null,\n\n    /**\n     * Constructor\n     */\n    init: function (container, settings) {\n      this.setSettings(settings, Garnish.CustomSelect.defaults);\n\n      this.$container = $(container);\n\n      this.$options = $();\n      this.addOptions(this.$container.find('a'));\n\n      // Menu List\n      this.menuId = 'menu' + this._namespace;\n      this.$menuList = $('ul', this.$container);\n      this.$menuList.attr({\n        role: 'listbox',\n        id: this.menuId,\n        'aria-hidden': 'true',\n      });\n\n      // Deprecated\n      if (this.settings.attachToElement) {\n        this.settings.anchor = this.settings.attachToElement;\n        Garnish.log(\n          \"The 'attachToElement' setting is deprecated. Use 'anchor' instead.\"\n        );\n      }\n\n      if (this.settings.anchor) {\n        this.$anchor = $(this.settings.anchor);\n      }\n\n      // Prevent clicking on the container from hiding the menu\n      this.addListener(this.$container, 'mousedown', function (ev) {\n        ev.stopPropagation();\n\n        if (ev.target.nodeName !== 'INPUT') {\n          // Prevent this from causing the menu button to blur\n          ev.preventDefault();\n        }\n      });\n    },\n\n    addOptions: function ($options) {\n      this.$options = this.$options.add($options);\n      $options.data('menu', this);\n\n      $options.each(\n        function (optionKey, option) {\n          $(option).attr({\n            role: 'option',\n            tabindex: '-1',\n            id: this.menuId + '-option-' + optionKey,\n          });\n        }.bind(this)\n      );\n\n      this.removeAllListeners($options);\n      this.addListener($options, 'click', function (ev) {\n        this.selectOption(ev.currentTarget);\n      });\n    },\n\n    setPositionRelativeToAnchor: function () {\n      this._windowWidth = Garnish.$win.width();\n      this._windowHeight = Garnish.$win.height();\n      this._windowScrollLeft = Garnish.$win.scrollLeft();\n      this._windowScrollTop = Garnish.$win.scrollTop();\n\n      this._anchorOffset = this.$anchor.offset();\n      this._anchorWidth = this.$anchor.outerWidth();\n      this._anchorHeight = this.$anchor.outerHeight();\n      this._anchorOffsetRight = this._anchorOffset.left + this._anchorHeight;\n      this._anchorOffsetBottom = this._anchorOffset.top + this._anchorHeight;\n\n      this.$container.css('minWidth', 0);\n      this.$container.css(\n        'minWidth',\n        this._anchorWidth -\n          (this.$container.outerWidth() - this.$container.width())\n      );\n\n      this._menuWidth = this.$container.outerWidth();\n      this._menuHeight = this.$container.outerHeight();\n\n      // Is there room for the menu below the anchor?\n      var topClearance = this._anchorOffset.top - this._windowScrollTop,\n        bottomClearance =\n          this._windowHeight + this._windowScrollTop - this._anchorOffsetBottom;\n\n      if (\n        bottomClearance >= this._menuHeight ||\n        (topClearance < this._menuHeight && bottomClearance >= topClearance)\n      ) {\n        this.$container.css({\n          top: this._anchorOffsetBottom,\n          maxHeight: bottomClearance - this.settings.windowSpacing,\n        });\n      } else {\n        this.$container.css({\n          top:\n            this._anchorOffset.top -\n            Math.min(\n              this._menuHeight,\n              topClearance - this.settings.windowSpacing\n            ),\n          maxHeight: topClearance - this.settings.windowSpacing,\n        });\n      }\n\n      // Figure out how we're aliging it\n      var align = this.$container.data('align');\n\n      if (align !== 'left' && align !== 'center' && align !== 'right') {\n        align = 'left';\n      }\n\n      if (align === 'center') {\n        this._alignCenter();\n      } else {\n        // Figure out which options are actually possible\n        var rightClearance =\n            this._windowWidth +\n            this._windowScrollLeft -\n            (this._anchorOffset.left + this._menuWidth),\n          leftClearance = this._anchorOffsetRight - this._menuWidth;\n\n        if ((align === 'right' && leftClearance >= 0) || rightClearance < 0) {\n          this._alignRight();\n        } else {\n          this._alignLeft();\n        }\n      }\n\n      delete this._windowWidth;\n      delete this._windowHeight;\n      delete this._windowScrollLeft;\n      delete this._windowScrollTop;\n      delete this._anchorOffset;\n      delete this._anchorWidth;\n      delete this._anchorHeight;\n      delete this._anchorOffsetRight;\n      delete this._anchorOffsetBottom;\n      delete this._menuWidth;\n      delete this._menuHeight;\n    },\n\n    show: function () {\n      if (this.visible) {\n        return;\n      }\n\n      // Move the menu to the end of the DOM\n      this.$container.appendTo(Garnish.$bod);\n\n      if (this.$anchor) {\n        this.setPositionRelativeToAnchor();\n      }\n\n      this.$container.velocity('stop');\n      this.$container.css({\n        opacity: 1,\n        display: 'block',\n      });\n\n      this.$menuList.attr('aria-hidden', 'false');\n\n      Garnish.shortcutManager\n        .addLayer()\n        .registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n\n      this.addListener(\n        Garnish.$scrollContainer,\n        'scroll',\n        'setPositionRelativeToAnchor'\n      );\n\n      this.visible = true;\n      this.trigger('show');\n    },\n\n    hide: function () {\n      if (!this.visible) {\n        return;\n      }\n\n      this.$menuList.attr('aria-hidden', 'true');\n\n      this.$container.velocity(\n        'fadeOut',\n        { duration: Garnish.FX_DURATION },\n        function () {\n          this.$container.detach();\n        }.bind(this)\n      );\n\n      Garnish.shortcutManager.removeLayer();\n      this.removeListener(Garnish.$scrollContainer, 'scroll');\n      this.visible = false;\n      this.trigger('hide');\n    },\n\n    selectOption: function (option) {\n      this.settings.onOptionSelect(option);\n      this.trigger('optionselect', { selectedOption: option });\n      this.hide();\n    },\n\n    _alignLeft: function () {\n      this.$container.css({\n        left: this._anchorOffset.left,\n        right: 'auto',\n      });\n    },\n\n    _alignRight: function () {\n      this.$container.css({\n        right:\n          this._windowWidth - (this._anchorOffset.left + this._anchorWidth),\n        left: 'auto',\n      });\n    },\n\n    _alignCenter: function () {\n      var left = Math.round(\n        this._anchorOffset.left + this._anchorWidth / 2 - this._menuWidth / 2\n      );\n\n      if (left < 0) {\n        left = 0;\n      }\n\n      this.$container.css('left', left);\n    },\n  },\n  {\n    defaults: {\n      anchor: null,\n      windowSpacing: 5,\n      onOptionSelect: $.noop,\n    },\n  }\n);\n\n/**\n * @deprecated\n */\nGarnish.Menu = Garnish.CustomSelect;\n","/** global: Garnish */\n/**\n * Disclosure Widget\n */\nGarnish.DisclosureMenu = Garnish.Base.extend(\n  {\n    settings: null,\n\n    $trigger: null,\n    $container: null,\n    $alignmentElement: null,\n    $wrapper: null,\n\n    _windowWidth: null,\n    _windowHeight: null,\n    _windowScrollLeft: null,\n    _windowScrollTop: null,\n\n    _wrapperElementOffset: null,\n    _alignmentElementOffset: null,\n    _triggerWidth: null,\n    _triggerHeight: null,\n\n    _menuWidth: null,\n    _menuHeight: null,\n\n    /**\n     * Constructor\n     */\n    init: function (trigger, settings) {\n      this.setSettings(settings, Garnish.DisclosureMenu.defaults);\n\n      this.$trigger = $(trigger);\n      var triggerId = this.$trigger.attr('aria-controls');\n      this.$container = $(\"#\" + triggerId);\n\n      if (!this.$container) return; /* Exit if no disclosure container is found */\n\n      // Get and store expanded state from trigger\n      var expanded = this.$trigger.attr('aria-expanded');\n\n      // If no expanded state exists on trigger, add for a11y\n      if (!expanded) {\n        this.$trigger.attr('aria-expanded', 'false');\n      }\n\n      // Capture additional alignment element\n      var alignmentSelector = this.$container.data('align-to');\n      if (alignmentSelector) {\n        this.$alignmentElement = $(alignmentSelector);\n      } else {\n        this.$alignmentElement = this.$trigger;\n      }\n\n      var wrapper = this.$container.closest('[data-wrapper]');\n      if (wrapper) {\n        this.$wrapper = wrapper;\n      }\n\n      this.addDisclosureMenuEventListeners();\n    },\n\n    addDisclosureMenuEventListeners: function() {\n      this.addListener(this.$trigger, 'click', function() {\n        this.handleTriggerClick();\n      });\n\n      this.addListener(this.$container, 'keydown', function(event) {\n        this.handleKeypress(event);\n      });\n\n      this.addListener(Garnish.$doc, 'mousedown', this.handleMousedown)\n    },\n\n    focusElement: function(direction) {\n      var currentFocus = $(':focus');\n\n      var focusable = Garnish.findFocusable(this.$container);\n\n      var currentIndex = focusable.index(currentFocus);\n      var newIndex;\n\n      if (direction === 'prev') {\n        newIndex = currentIndex - 1;\n      } else {\n        newIndex = currentIndex + 1;\n      }\n\n      if (newIndex >= 0 && newIndex < focusable.length) {\n        var elementToFocus = focusable[newIndex];\n        elementToFocus.focus();\n      }\n    },\n\n    handleMousedown: function (event) {\n      var newTarget = event.target;\n      var triggerButton = $(newTarget).closest('[data-disclosure-trigger]');\n      var newTargetIsInsideDisclosure = this.$container.has(newTarget).length > 0;\n\n      // If click target matches trigger element or disclosure child, do nothing\n      if ($(triggerButton).is(this.$trigger) || newTargetIsInsideDisclosure) {\n        return;\n      }\n\n      this.hide();\n    },\n\n    handleKeypress: function(event) {\n      var keyCode = event.keyCode;\n      \n      switch (keyCode) {\n        case Garnish.RIGHT_KEY:\n        case Garnish.DOWN_KEY:\n          event.preventDefault();\n          this.focusElement('next');\n          break;\n        case Garnish.LEFT_KEY:\n        case Garnish.UP_KEY:\n          event.preventDefault();\n          this.focusElement('prev');\n          break;\n        default:\n          break;\n      }\n    },\n\n    isExpanded: function () {\n      var isExpanded = this.$trigger.attr('aria-expanded');\n\n      return isExpanded === 'true';\n    },\n\n    handleTriggerClick: function() {\n      if (!this.isExpanded()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    },\n\n    show: function () {\n      if (this.isExpanded()) {\n        return;\n      }\n\n      this.setContainerPosition();\n      this.addListener(\n        Garnish.$scrollContainer,\n        'scroll',\n        'setContainerPosition'\n      );\n      \n      this.$container.velocity('stop');\n      this.$container.css({\n        opacity: 1,\n        display: 'block',\n      });\n\n      \n      // Set ARIA attribute for expanded\n      this.$trigger.attr('aria-expanded', 'true');\n\n      // Focus first focusable element\n      var firstFocusableEl = this.$container.find(':focusable')[0];\n      if (firstFocusableEl) {\n        firstFocusableEl.focus();\n      } else {\n        this.$container.attr('tabindex', '-1');\n        this.$container.focus();\n      }\n\n      this.trigger('show');\n      Garnish.shortcutManager.addLayer();\n      Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, function() {\n        this.hide();\n        this.$trigger.focus();\n      }.bind(this));\n    },\n\n    hide: function () {\n      if (!this.isExpanded()) {\n        return;\n      }\n\n      this.$container.velocity(\n        'fadeOut',\n        { duration: Garnish.FX_DURATION }\n      );\n\n      this.$trigger.attr('aria-expanded', 'false');\n\n      this.trigger('hide');\n      Garnish.shortcutManager.removeLayer();\n    },\n\n    setContainerPosition: function () {\n      this._windowWidth = Garnish.$win.width();\n      this._windowHeight = Garnish.$win.height();\n      this._windowScrollLeft = Garnish.$win.scrollLeft();\n      this._windowScrollTop = Garnish.$win.scrollTop();\n\n      this._alignmentElementOffset = this.$alignmentElement[0].getBoundingClientRect();\n\n      this._wrapperElementOffset = this.$wrapper[0].getBoundingClientRect();\n\n      this._triggerWidth = this.$trigger.outerWidth();\n\n      this.$container.css('minWidth', 0);\n      this.$container.css(\n        'minWidth',\n        this._triggerWidth -\n          (this.$container.outerWidth() - this.$container.width())\n      );\n\n      this._menuWidth = this.$container.outerWidth();\n      this._menuHeight = this.$container.outerHeight();\n\n      // Is there room for the menu below the trigger?\n      var topClearance = this._alignmentElementOffset.top,\n        bottomClearance = this._windowHeight - this._alignmentElementOffset.bottom;\n\n      // Find top/bottom offset relative to wrapper element\n      var topAdjustment = this._alignmentElementOffset.top - this._wrapperElementOffset.top;\n      var bottomAdjustment = this._alignmentElementOffset.bottom - this._wrapperElementOffset.bottom;\n\n      var bottomClearanceExists = \n        bottomClearance >= this._menuHeight ||\n        (topClearance < this._menuHeight && bottomClearance >= topClearance);\n      \n      if (bottomClearanceExists) {\n        this.$container.css({\n          top: 'calc(100% + ' + bottomAdjustment + 'px)',\n          bottom: 'unset',\n          maxHeight: bottomClearance - this.settings.windowSpacing,\n        });\n      } else {\n        this.$container.css({\n          bottom: 'calc(100% - ' + topAdjustment + 'px)',\n          top: 'unset',\n          maxHeight: topClearance - this.settings.windowSpacing,\n        });\n      }\n\n      // Figure out how we're aliging it\n      var align = this.$container.data('align');\n\n      if (align !== 'left' && align !== 'center' && align !== 'right') {\n        align = 'left';\n      }\n\n      if (align === 'center') {\n        this._alignCenter();\n      } else {\n        // Figure out which options are actually possible\n        var rightClearance =\n            this._windowWidth +\n            this._windowScrollLeft -\n            (this._alignmentElementOffset.left + this._menuWidth),\n          leftClearance = this._alignmentElementOffset.right - this._menuWidth;\n\n        if ((align === 'right' && leftClearance >= 0) || rightClearance < 0) {\n          this._alignRight();\n        } else {\n          this._alignLeft();\n        }\n      }\n\n      delete this._windowWidth;\n      delete this._windowHeight;\n      delete this._windowScrollLeft;\n      delete this._windowScrollTop;\n      delete this._wrapperElementOffset;\n      delete this._alignmentElementOffset;\n      delete this._triggerWidth;\n      delete this._triggerHeight;\n      delete this._menuWidth;\n      delete this._menuHeight;\n    },\n\n    _alignLeft: function () {\n      var leftAdjustment = this._alignmentElementOffset.left - this._wrapperElementOffset.left;\n\n      this.$container.css({\n        right: 'unset',\n        left: leftAdjustment + 'px',\n      });\n    },\n\n    _alignRight: function () {\n      var rightAdjustment = this._alignmentElementOffset.right - this._wrapperElementOffset.right;\n      \n      this.$container.css({\n        left: 'unset',\n        right: - rightAdjustment + 'px',\n      });\n    },\n\n    _alignCenter: function () {\n      var left = Math.round(this._triggerWidth / 2 - this._menuWidth / 2);\n      var leftAdjustment = this._alignmentElementOffset.left - this._wrapperElementOffset.left;\n\n      this.$container.css('left', left - leftAdjustment);\n    },\n  },\n  {\n    defaults: {\n      windowSpacing: 5,\n    },\n  }\n);\n","/** global: Garnish */\n/**\n * Drag class\n *\n * Builds on the BaseDrag class by \"picking up\" the selceted element(s),\n * without worrying about what to do when an element is being dragged.\n */\nGarnish.Drag = Garnish.BaseDrag.extend(\n    {\n        targetItemWidth: null,\n        targetItemHeight: null,\n        targetItemPositionInDraggee: null,\n\n        $draggee: null,\n\n        otherItems: null,\n        totalOtherItems: null,\n\n        helpers: null,\n        helperTargets: null,\n        helperPositions: null,\n        helperLagIncrement: null,\n        updateHelperPosProxy: null,\n        updateHelperPosFrame: null,\n\n        lastMouseX: null,\n        lastMouseY: null,\n\n        _returningHelpersToDraggees: false,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.Drag.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            // Don't allow dragging if we're in the middle of animating the helpers back to the draggees\n            return !this._returningHelpersToDraggees;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            // Reset some things\n            this.helpers = [];\n            this.helperTargets = [];\n            this.helperPositions = [];\n            this.lastMouseX = this.lastMouseY = null;\n\n            // Capture the target item's width/height\n            this.targetItemWidth = this.$targetItem.outerWidth();\n            this.targetItemHeight = this.$targetItem.outerHeight();\n\n            // Save the draggee's display style (block/table-row) so we can re-apply it later\n            this.draggeeDisplay = this.$targetItem.css('display');\n\n            // Set the $draggee\n            this.setDraggee(this.findDraggee());\n\n            // Create an array of all the other items\n            this.otherItems = [];\n\n            for (var i = 0; i < this.$items.length; i++) {\n                var item = this.$items[i];\n\n                if ($.inArray(item, this.$draggee) === -1) {\n                    this.otherItems.push(item);\n                }\n            }\n\n            this.totalOtherItems = this.otherItems.length;\n\n            // Keep the helpers following the cursor, with a little lag to smooth it out\n            if (!this.updateHelperPosProxy) {\n                this.updateHelperPosProxy = this._updateHelperPos.bind(this);\n            }\n\n            this.helperLagIncrement = this.helpers.length === 1 ? 0 : this.settings.helperLagIncrementDividend / (this.helpers.length - 1);\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n\n            this.base();\n        },\n\n        /**\n         * Sets the draggee.\n         */\n        setDraggee: function($draggee) {\n            // Record the target item's position in the draggee\n            this.targetItemPositionInDraggee = $.inArray(this.$targetItem[0], $draggee.add(this.$targetItem[0]));\n\n            // Keep the target item at the front of the list\n            this.$draggee = $([this.$targetItem[0]].concat($draggee.not(this.$targetItem).toArray()));\n\n            // Create the helper(s)\n            if (this.settings.singleHelper) {\n                this._createHelper(0);\n            }\n            else {\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee) {\n                this.$draggee.hide();\n            }\n            else if (this.settings.collapseDraggees) {\n                this.$targetItem.css('visibility', 'hidden');\n                this.$draggee.not(this.$targetItem).hide();\n            }\n            else {\n                this.$draggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Appends additional items to the draggee.\n         */\n        appendDraggee: function($newDraggee) {\n            if (!$newDraggee.length) {\n                return;\n            }\n\n            if (!this.settings.collapseDraggees) {\n                var oldLength = this.$draggee.length;\n            }\n\n            this.$draggee = $(this.$draggee.toArray().concat($newDraggee.toArray()));\n\n            // Create new helpers?\n            if (!this.settings.collapseDraggees) {\n                var newLength = this.$draggee.length;\n\n                for (var i = oldLength; i < newLength; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee || this.settings.collapseDraggees) {\n                $newDraggee.hide();\n            }\n            else {\n                $newDraggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            // Update the draggee's virtual midpoint\n            this.draggeeVirtualMidpointX = this.mouseX - this.mouseOffsetX + (this.targetItemWidth / 2);\n            this.draggeeVirtualMidpointY = this.mouseY - this.mouseOffsetY + (this.targetItemHeight / 2);\n\n            this.base(didMouseMove);\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            // Clear the helper animation\n            Garnish.cancelAnimationFrame(this.updateHelperPosFrame);\n\n            this.base();\n        },\n\n        /**\n         * Identifies the item(s) that are being dragged.\n         */\n        findDraggee: function() {\n            switch (typeof this.settings.filter) {\n                case 'function': {\n                    return this.settings.filter();\n                }\n\n                case 'string': {\n                    return this.$items.filter(this.settings.filter);\n                }\n\n                default: {\n                    return this.$targetItem;\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            return this.mouseX - this.mouseOffsetX;\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            return this.mouseY - this.mouseOffsetY;\n        },\n\n        /**\n         * Return Helpers to Draggees\n         */\n        returnHelpersToDraggees: function() {\n            this._returningHelpersToDraggees = true;\n\n            for (var i = 0; i < this.helpers.length; i++) {\n                var $draggee = this.$draggee.eq(i),\n                    $helper = this.helpers[i];\n\n                $draggee.css({\n                    display: this.draggeeDisplay,\n                    visibility: 'hidden'\n                });\n\n                var draggeeOffset = $draggee.offset();\n                var callback;\n\n                if (i === 0) {\n                    callback = this._showDraggee.bind(this);\n                }\n                else {\n                    callback = null;\n                }\n\n                $helper.velocity({left: draggeeOffset.left, top: draggeeOffset.top}, Garnish.FX_DURATION, callback);\n            }\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        onReturnHelpersToDraggees: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('returnHelpersToDraggees');\n                this.settings.onReturnHelpersToDraggees();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Creates a helper.\n         */\n        _createHelper: function(i) {\n            var $draggee = this.$draggee.eq(i),\n                $draggeeHelper = $draggee.clone().addClass('draghelper');\n\n            if (this.settings.copyDraggeeInputValuesToHelper) {\n                Garnish.copyInputValues($draggee, $draggeeHelper);\n            }\n\n            // Remove any name= attributes so radio buttons don't lose their values\n            $draggeeHelper.find('[name]').attr('name', '');\n\n            $draggeeHelper\n                .outerWidth(Math.ceil($draggee.outerWidth()))\n                .outerHeight(Math.ceil($draggee.outerHeight()))\n                .css({margin: 0, 'pointer-events': 'none'});\n\n            if (this.settings.helper) {\n                if (typeof this.settings.helper === 'function') {\n                    $draggeeHelper = this.settings.helper($draggeeHelper);\n                }\n                else {\n                    $draggeeHelper = $(this.settings.helper).append($draggeeHelper);\n                }\n            }\n\n            $draggeeHelper.appendTo(Garnish.$bod);\n\n            var helperPos = this._getHelperTarget(i);\n\n            $draggeeHelper.css({\n                position: 'absolute',\n                top: helperPos.top,\n                left: helperPos.left,\n                zIndex: this.settings.helperBaseZindex + this.$draggee.length - i,\n                opacity: this.settings.helperOpacity\n            });\n\n            this.helperPositions[i] = {\n                top: helperPos.top,\n                left: helperPos.left\n            };\n\n            this.helpers.push($draggeeHelper);\n        },\n\n        /**\n         * Update Helper Position\n         */\n        _updateHelperPos: function() {\n            // Has the mouse moved?\n            if (this.mouseX !== this.lastMouseX || this.mouseY !== this.lastMouseY) {\n                // Get the new target helper positions\n                for (this._updateHelperPos._i = 0; this._updateHelperPos._i < this.helpers.length; this._updateHelperPos._i++) {\n                    this.helperTargets[this._updateHelperPos._i] = this._getHelperTarget(this._updateHelperPos._i);\n                }\n\n                this.lastMouseX = this.mouseX;\n                this.lastMouseY = this.mouseY;\n            }\n\n            // Gravitate helpers toward their target positions\n            for (this._updateHelperPos._j = 0; this._updateHelperPos._j < this.helpers.length; this._updateHelperPos._j++) {\n                this._updateHelperPos._lag = this.settings.helperLagBase + (this.helperLagIncrement * this._updateHelperPos._j);\n\n                this.helperPositions[this._updateHelperPos._j] = {\n                    left: this.helperPositions[this._updateHelperPos._j].left + ((this.helperTargets[this._updateHelperPos._j].left - this.helperPositions[this._updateHelperPos._j].left) / this._updateHelperPos._lag),\n                    top: this.helperPositions[this._updateHelperPos._j].top + ((this.helperTargets[this._updateHelperPos._j].top - this.helperPositions[this._updateHelperPos._j].top) / this._updateHelperPos._lag)\n                };\n\n                this.helpers[this._updateHelperPos._j].css(this.helperPositions[this._updateHelperPos._j]);\n            }\n\n            // Let's do this again on the next frame!\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n        },\n\n        /**\n         * Get the helper position for a draggee helper\n         */\n        _getHelperTarget: function(i) {\n            return {\n                left: this.getHelperTargetX() + (this.settings.helperSpacingX * i),\n                top: this.getHelperTargetY() + (this.settings.helperSpacingY * i)\n            };\n        },\n\n        _showDraggee: function() {\n            // Remove the helpers\n            for (var i = 0; i < this.helpers.length; i++) {\n                this.helpers[i].remove();\n            }\n\n            this.helpers = null;\n\n            this.$draggee.show().css('visibility', 'inherit');\n\n            this.onReturnHelpersToDraggees();\n\n            this._returningHelpersToDraggees = false;\n        }\n    },\n    {\n        defaults: {\n            filter: null,\n            singleHelper: false,\n            collapseDraggees: false,\n            removeDraggee: false,\n            copyDraggeeInputValuesToHelper: false,\n            helperOpacity: 1,\n            helper: null,\n            helperBaseZindex: 1000,\n            helperLagBase: 1,\n            helperLagIncrementDividend: 1.5,\n            helperSpacingX: 5,\n            helperSpacingY: 5,\n            onReturnHelpersToDraggees: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Drag-and-drop class\n *\n * Builds on the Drag class by allowing you to set up \"drop targets\"\n * which the dragged elemements can be dropped onto.\n */\nGarnish.DragDrop = Garnish.Drag.extend({\n\n        $dropTargets: null,\n        $activeDropTarget: null,\n\n        /**\n         * Constructor\n         */\n        init: function(settings) {\n            settings = $.extend({}, Garnish.DragDrop.defaults, settings);\n            this.base(settings);\n        },\n\n        updateDropTargets: function() {\n            if (this.settings.dropTargets) {\n                if (typeof this.settings.dropTargets === 'function') {\n                    this.$dropTargets = $(this.settings.dropTargets());\n                }\n                else {\n                    this.$dropTargets = $(this.settings.dropTargets);\n                }\n\n                // Discard if it's an empty array\n                if (!this.$dropTargets.length) {\n                    this.$dropTargets = null;\n                }\n            }\n        },\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.updateDropTargets();\n            this.$activeDropTarget = null;\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            if (this.$dropTargets) {\n                this.onDrag._activeDropTarget = null;\n\n                // is the cursor over any of the drop target?\n                for (this.onDrag._i = 0; this.onDrag._i < this.$dropTargets.length; this.onDrag._i++) {\n                    this.onDrag._elem = this.$dropTargets[this.onDrag._i];\n\n                    if (Garnish.hitTest(this.mouseX, this.mouseY, this.onDrag._elem)) {\n                        this.onDrag._activeDropTarget = this.onDrag._elem;\n                        break;\n                    }\n                }\n\n                // has the drop target changed?\n                if (\n                    (this.$activeDropTarget && this.onDrag._activeDropTarget !== this.$activeDropTarget[0]) ||\n                    (!this.$activeDropTarget && this.onDrag._activeDropTarget !== null)\n                ) {\n                    // was there a previous one?\n                    if (this.$activeDropTarget) {\n                        this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n                    }\n\n                    // remember the new one\n                    if (this.onDrag._activeDropTarget) {\n                        this.$activeDropTarget = $(this.onDrag._activeDropTarget).addClass(this.settings.activeDropTargetClass);\n                    }\n                    else {\n                        this.$activeDropTarget = null;\n                    }\n\n                    this.settings.onDropTargetChange(this.$activeDropTarget);\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.$dropTargets && this.$activeDropTarget) {\n                this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n            }\n\n            this.base();\n        },\n\n        /**\n         * Fade Out Helpers\n         */\n        fadeOutHelpers: function() {\n            for (var i = 0; i < this.helpers.length; i++) {\n                (function($draggeeHelper) {\n                    $draggeeHelper.velocity('fadeOut', {\n                        duration: Garnish.FX_DURATION,\n                        complete: function() {\n                            $draggeeHelper.remove();\n                        }\n                    });\n                })(this.helpers[i]);\n            }\n        }\n    },\n    {\n        defaults: {\n            dropTargets: null,\n            onDropTargetChange: $.noop,\n            activeDropTargetClass: 'active'\n        }\n    });\n","/** global: Garnish */\n/**\n * Drag-to-move clas\n *\n * Builds on the BaseDrag class by simply moving the dragged element(s) along with the mouse.\n */\nGarnish.DragMove = Garnish.BaseDrag.extend(\n    {\n        onDrag: function(items, settings) {\n            this.$targetItem.css({\n                left: this.mouseX - this.mouseOffsetX,\n                top: this.mouseY - this.mouseOffsetY\n            });\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Drag-to-sort class\n *\n * Builds on the Drag class by allowing you to sort the elements amongst themselves.\n */\nGarnish.DragSort = Garnish.Drag.extend(\n    {\n        $heightedContainer: null,\n        $insertion: null,\n        insertionVisible: false,\n        oldDraggeeIndexes: null,\n        newDraggeeIndexes: null,\n        closestItem: null,\n\n        _midpointVersion: 0,\n        _$prevItem: null,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.DragSort.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Creates the insertion element.\n         */\n        createInsertion: function() {\n            if (this.settings.insertion) {\n                if (typeof this.settings.insertion === 'function') {\n                    return $(this.settings.insertion(this.$draggee));\n                }\n                else {\n                    return $(this.settings.insertion);\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            if (this.settings.magnetStrength !== 1) {\n                this.getHelperTargetX._draggeeOffsetX = this.$draggee.offset().left;\n                return this.getHelperTargetX._draggeeOffsetX + ((this.mouseX - this.mouseOffsetX - this.getHelperTargetX._draggeeOffsetX) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            if (this.settings.magnetStrength !== 1) {\n                this.getHelperTargetY._draggeeOffsetY = this.$draggee.offset().top;\n                return this.getHelperTargetY._draggeeOffsetY + ((this.mouseY - this.mouseOffsetY - this.getHelperTargetY._draggeeOffsetY) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            return true;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            return true;\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.oldDraggeeIndexes = this._getDraggeeIndexes();\n\n            // Are we supposed to be moving the target item to the front, and is it not already there?\n            if (\n                this.settings.moveTargetItemToFront &&\n                this.$draggee.length > 1 &&\n                this._getItemIndex(this.$draggee[0]) > this._getItemIndex(this.$draggee[1])\n            ) {\n                // Reposition the target item before the other draggee items in the DOM\n                this.$draggee.first().insertBefore(this.$draggee[1]);\n            }\n\n            // Create the insertion\n            this.$insertion = this.createInsertion();\n            this._placeInsertionWithDraggee();\n\n            this.closestItem = null;\n            this._clearMidpoints();\n\n            //  Get the closest container that has a height\n            if (this.settings.container) {\n                this.$heightedContainer = $(this.settings.container);\n\n                while (!this.$heightedContainer.height()) {\n                    this.$heightedContainer = this.$heightedContainer.parent();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            // If there's a container set, make sure that we're hovering over it\n            if (this.$heightedContainer && !Garnish.hitTest(this.mouseX, this.mouseY, this.$heightedContainer)) {\n                if (this.closestItem) {\n                    this.closestItem = null;\n                    this._removeInsertion();\n                }\n            }\n            else {\n                // Is there a new closest item?\n                if (\n                    this.closestItem !== (this.closestItem = this._getClosestItem()) &&\n                    this.closestItem !== null\n                ) {\n                    this._updateInsertion();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._removeInsertion();\n\n            // Should we keep the target item where it was?\n            if (!this.settings.moveTargetItemToFront && this.targetItemPositionInDraggee !== 0) {\n                this.$targetItem.insertAfter(this.$draggee.eq(this.targetItemPositionInDraggee));\n            }\n\n            // Return the helpers to the draggees\n            this.returnHelpersToDraggees();\n\n            this.base();\n\n            // Has the item actually moved?\n            this.$items = $().add(this.$items);\n            this.newDraggeeIndexes = this._getDraggeeIndexes();\n\n            if (this.newDraggeeIndexes.join(',') !== this.oldDraggeeIndexes.join(',')) {\n                this.onSortChange();\n            }\n        },\n\n        /**\n         * On Insertion Point Change event\n         */\n        onInsertionPointChange: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('insertionPointChange');\n                this.settings.onInsertionPointChange();\n            }.bind(this));\n        },\n\n        /**\n         * On Sort Change event\n         */\n        onSortChange: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('sortChange');\n                this.settings.onSortChange();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _getItemIndex: function(item) {\n            return $.inArray(item, this.$items);\n        },\n\n        _getDraggeeIndexes: function() {\n            var indexes = [];\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                indexes.push(this._getItemIndex(this.$draggee[i]))\n            }\n\n            return indexes;\n        },\n\n        /**\n         * Returns the closest item to the cursor.\n         */\n        _getClosestItem: function() {\n            this._getClosestItem._closestItem = null;\n\n            // Start by checking the draggee/insertion, if either are visible\n            if (!this.settings.removeDraggee) {\n                this._testForClosestItem(this.$draggee[0]);\n            }\n            else if (this.insertionVisible) {\n                this._testForClosestItem(this.$insertion[0]);\n            }\n\n            // Check items before the draggee\n            if (this._getClosestItem._closestItem) {\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._closestItem)\n            }\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this._getClosestItem._startXDist = this._getClosestItem._lastXDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX) : null;\n            }\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this._getClosestItem._startYDist = this._getClosestItem._lastYDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY) : null;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.first().prev();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis === Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis === Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertBefore(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.prev();\n            }\n\n            // Check items after the draggee\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this._getClosestItem._lastXDist = this._getClosestItem._startXDist;\n            }\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this._getClosestItem._lastYDist = this._getClosestItem._startYDist;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.last().next();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis === Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis === Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertAfter(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.next();\n            }\n\n            // Return the result\n\n            // Ignore if it's the draggee or insertion\n            if (\n                this._getClosestItem._closestItem !== this.$draggee[0] &&\n                (!this.insertionVisible || this._getClosestItem._closestItem !== this.$insertion[0])\n            ) {\n                return this._getClosestItem._closestItem;\n            }\n            else {\n                return null;\n            }\n        },\n\n        _clearMidpoints: function() {\n            this._midpointVersion++;\n            this._$prevItem = null;\n        },\n\n        _getItemMidpoint: function(item) {\n            if ($.data(item, 'midpointVersion') !== this._midpointVersion) {\n                // If this isn't the draggee, temporarily move the draggee to this item\n                this._getItemMidpoint._repositionDraggee = (\n                    !this.settings.axis &&\n                    (!this.settings.removeDraggee || this.insertionVisible) &&\n                    item !== this.$draggee[0] &&\n                    (!this.$insertion || item !== this.$insertion.get(0))\n                );\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Is this the first time we've had to temporarily reposition the draggee since the last midpoint clearing?\n                    if (!this._$prevItem) {\n                        this._$prevItem = (this.insertionVisible ? this.$insertion : this.$draggee).first().prev();\n                    }\n\n                    this._moveDraggeeToItem(item);\n\n                    // Now figure out which element we're actually getting the midpoint of\n                    if (!this.settings.removeDraggee) {\n                        this._getItemMidpoint._$item = this.$draggee;\n                    }\n                    else {\n                        this._getItemMidpoint._$item = this.$insertion;\n                    }\n                }\n                else {\n                    // We're actually getting the midpoint of this item\n                    this._getItemMidpoint._$item = $(item);\n                }\n\n                this._getItemMidpoint._offset = this._getItemMidpoint._$item.offset();\n\n                $.data(item, 'midpoint', {\n                    x: this._getItemMidpoint._offset.left + this._getItemMidpoint._$item.outerWidth() / 2,\n                    y: this._getItemMidpoint._offset.top + this._getItemMidpoint._$item.outerHeight() / 2\n                });\n\n                $.data(item, 'midpointVersion', this._midpointVersion);\n\n                delete this._getItemMidpoint._$item;\n                delete this._getItemMidpoint._offset;\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Move the draggee back\n                    if (this._$prevItem.length) {\n                        this.$draggee.insertAfter(this._$prevItem);\n                    }\n                    else {\n                        this.$draggee.prependTo(this.$draggee.parent());\n                    }\n\n                    this._placeInsertionWithDraggee();\n                }\n            }\n\n            return $.data(item, 'midpoint');\n        },\n\n        _testForClosestItem: function(item) {\n            this._testForClosestItem._midpoint = this._getItemMidpoint(item);\n            this._testForClosestItem._mouseDistX = Math.abs(this._testForClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n            this._testForClosestItem._mouseDistY = Math.abs(this._testForClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n\n            // Don't even consider items that are further away on the Y axis\n            if (\n                this._getClosestItem._closestItem === null ||\n                this._testForClosestItem._mouseDistY < this._getClosestItem._closestItemMouseDistY ||\n                (\n                    this._testForClosestItem._mouseDistY === this._getClosestItem._closestItemMouseDistY &&\n                    this._testForClosestItem._mouseDistX <= this._getClosestItem._closestItemMouseDistX\n                )\n            ) {\n                this._getClosestItem._closestItem = item;\n                this._getClosestItem._closestItemMouseDistX = this._testForClosestItem._mouseDistX;\n                this._getClosestItem._closestItemMouseDistY = this._testForClosestItem._mouseDistY;\n            }\n        },\n\n        /**\n         * Updates the position of the insertion point.\n         */\n        _updateInsertion: function() {\n            if (this.closestItem) {\n                this._moveDraggeeToItem(this.closestItem);\n            }\n\n            // Now that things have shifted around, invalidate the midpoints\n            this._clearMidpoints();\n\n            this.onInsertionPointChange();\n        },\n\n        _moveDraggeeToItem: function(item) {\n            // Going down?\n            if (this.$draggee.index() < $(item).index()) {\n                this.$draggee.insertAfter(item);\n            }\n            else {\n                this.$draggee.insertBefore(item);\n            }\n\n            this._placeInsertionWithDraggee();\n        },\n\n        _placeInsertionWithDraggee: function() {\n            if (this.$insertion) {\n                this.$insertion.insertBefore(this.$draggee.first());\n                this.insertionVisible = true;\n            }\n        },\n\n        /**\n         * Removes the insertion, if it's visible.\n         */\n        _removeInsertion: function() {\n            if (this.insertionVisible) {\n                this.$insertion.remove();\n                this.insertionVisible = false;\n            }\n        }\n    },\n    {\n        defaults: {\n            container: null,\n            insertion: null,\n            moveTargetItemToFront: false,\n            magnetStrength: 1,\n            onInsertionPointChange: $.noop,\n            onSortChange: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * ESC key manager class\n * @deprecated Use Garnish.ShortcutManager instead\n */\nGarnish.EscManager = Garnish.Base.extend(\n    {\n        handlers: null,\n\n        init: function() {\n            this.handlers = [];\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.escapeLatest(ev);\n                }\n            });\n        },\n\n        register: function(obj, func) {\n            this.handlers.push({\n                obj: obj,\n                func: func\n            });\n        },\n\n        unregister: function(obj) {\n            for (var i = this.handlers.length - 1; i >= 0; i--) {\n                if (this.handlers[i].obj === obj) {\n                    this.handlers.splice(i, 1);\n                }\n            }\n        },\n\n        escapeLatest: function(ev) {\n            if (this.handlers.length) {\n                var handler = this.handlers.pop();\n\n                var func;\n\n                if (typeof handler.func === 'function') {\n                    func = handler.func;\n                }\n                else {\n                    func = handler.obj[handler.func];\n                }\n\n                func.call(handler.obj, ev);\n\n                if (typeof handler.obj.trigger === 'function') {\n                    handler.obj.trigger('escape');\n                }\n            }\n        }\n    }\n);\n\nGarnish.escManager = new Garnish.EscManager();\n","/** global: Garnish */\n/**\n * HUD\n */\nGarnish.HUD = Garnish.Base.extend(\n    {\n        $trigger: null,\n        $fixedTriggerParent: null,\n        $hud: null,\n        $tip: null,\n        $body: null,\n        $header: null,\n        $footer: null,\n        $mainContainer: null,\n        $main: null,\n        $shade: null,\n\n        showing: false,\n        orientation: null,\n\n        updatingSizeAndPosition: false,\n        windowWidth: null,\n        windowHeight: null,\n        scrollTop: null,\n        scrollLeft: null,\n        mainWidth: null,\n        mainHeight: null,\n\n        /**\n         * Constructor\n         */\n        init: function(trigger, bodyContents, settings) {\n\n            this.$trigger = $(trigger);\n\n            this.setSettings(settings, Garnish.HUD.defaults);\n            this.on('show', this.settings.onShow);\n            this.on('hide', this.settings.onHide);\n            this.on('submit', this.settings.onSubmit);\n\n            if (typeof Garnish.HUD.activeHUDs === 'undefined') {\n                Garnish.HUD.activeHUDs = {};\n            }\n\n            this.$shade = $('<div/>', {'class': this.settings.shadeClass});\n            this.$hud = $('<div/>', {'class': this.settings.hudClass}).data('hud', this);\n            this.$tip = $('<div/>', {'class': this.settings.tipClass}).appendTo(this.$hud);\n            this.$body = $('<form/>', {'class': this.settings.bodyClass}).appendTo(this.$hud);\n            this.$mainContainer = $('<div/>', {'class': this.settings.mainContainerClass}).appendTo(this.$body);\n            this.$main = $('<div/>', {'class': this.settings.mainClass}).appendTo(this.$mainContainer);\n\n            this.updateBody(bodyContents);\n\n            // See if the trigger is fixed\n            var $parent = this.$trigger;\n\n            do {\n                if ($parent.css('position') === 'fixed') {\n                    this.$fixedTriggerParent = $parent;\n                    break;\n                }\n\n                $parent = $parent.offsetParent();\n            }\n            while ($parent.length && $parent.prop('nodeName') !== 'HTML');\n\n            if (this.$fixedTriggerParent) {\n                this.$hud.css('position', 'fixed');\n            }\n            else {\n                this.$hud.css('position', 'absolute');\n            }\n\n            // Hide the HUD until it gets positioned\n\t\t\tthis.$hud.css('opacity', 0);\n            this.show();\n            this.$hud.css('opacity', 1);\n\n            this.addListener(this.$body, 'submit', '_handleSubmit');\n\n            if (this.settings.hideOnShadeClick) {\n                this.addListener(this.$shade, 'tap,click', 'hide');\n            }\n\n            if (this.settings.closeBtn) {\n                this.addListener(this.settings.closeBtn, 'activate', 'hide');\n            }\n\n            this.addListener(Garnish.$win, 'resize', 'updateSizeAndPosition');\n            this.addListener(this.$main, 'resize', 'updateSizeAndPosition');\n            if (!this.$fixedTriggerParent && Garnish.$scrollContainer[0] !== Garnish.$win[0]) {\n                this.addListener(Garnish.$scrollContainer, 'scroll', 'updateSizeAndPosition');\n            }\n        },\n\n        /**\n         * Update the body contents\n         */\n        updateBody: function(bodyContents) {\n            // Cleanup\n            this.$main.html('');\n\n            if (this.$header) {\n                this.$hud.removeClass('has-header');\n                this.$header.remove();\n                this.$header = null;\n            }\n\n            if (this.$footer) {\n                this.$hud.removeClass('has-footer');\n                this.$footer.remove();\n                this.$footer = null;\n            }\n\n            // Append the new body contents\n            this.$main.append(bodyContents);\n\n            // Look for a header and footer\n            var $header = this.$main.find('.' + this.settings.headerClass + ':first'),\n                $footer = this.$main.find('.' + this.settings.footerClass + ':first');\n\n            if ($header.length) {\n                this.$header = $header.insertBefore(this.$mainContainer);\n                this.$hud.addClass('has-header');\n            }\n\n            if ($footer.length) {\n                this.$footer = $footer.insertAfter(this.$mainContainer);\n                this.$hud.addClass('has-footer');\n            }\n        },\n\n        /**\n         * Show\n         */\n        show: function(ev) {\n            if (ev && ev.stopPropagation) {\n                ev.stopPropagation();\n            }\n\n            if (this.showing) {\n                return;\n            }\n\n            if (this.settings.closeOtherHUDs) {\n                for (var hudID in Garnish.HUD.activeHUDs) {\n                    if (!Garnish.HUD.activeHUDs.hasOwnProperty(hudID)) {\n                        continue;\n                    }\n                    Garnish.HUD.activeHUDs[hudID].hide();\n                }\n            }\n\n            // Move it to the end of <body> so it gets the highest sub-z-index\n            this.$shade.appendTo(Garnish.$bod);\n            this.$hud.appendTo(Garnish.$bod);\n\n            this.$hud.show();\n            this.$shade.show();\n            this.showing = true;\n            Garnish.HUD.activeHUDs[this._namespace] = this;\n\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.hideOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n            }\n\n            this.onShow();\n            this.enable();\n\n            if (this.updateRecords()) {\n                // Prevent the browser from jumping\n                this.$hud.css('top', Garnish.$scrollContainer.scrollTop());\n\n                this.updateSizeAndPosition(true);\n            }\n        },\n\n        onShow: function() {\n            this.trigger('show');\n        },\n\n        updateRecords: function() {\n            var changed = false;\n            changed = (this.windowWidth !== (this.windowWidth = Garnish.$win.width())) || changed;\n            changed = (this.windowHeight !== (this.windowHeight = Garnish.$win.height())) || changed;\n            changed = (this.scrollTop !== (this.scrollTop = Garnish.$scrollContainer.scrollTop())) || changed;\n            changed = (this.scrollLeft !== (this.scrollLeft = Garnish.$scrollContainer.scrollLeft())) || changed;\n            changed = (this.mainWidth !== (this.mainWidth = this.$main.outerWidth())) || changed;\n            changed = (this.mainHeight !== (this.mainHeight = this.$main.outerHeight())) || changed;\n            return changed;\n        },\n\n        updateSizeAndPosition: function(force) {\n            if (force === true || (this.updateRecords() && !this.updatingSizeAndPosition)) {\n                this.updatingSizeAndPosition = true;\n                Garnish.requestAnimationFrame(this.updateSizeAndPositionInternal.bind(this));\n            }\n        },\n\n        updateSizeAndPositionInternal: function() {\n            var triggerWidth,\n                triggerHeight,\n                triggerOffset,\n                windowScrollLeft,\n                windowScrollTop,\n                scrollContainerTriggerOffset,\n                scrollContainerScrollLeft,\n                scrollContainerScrollTop,\n                hudBodyWidth,\n                hudBodyHeight;\n\n            // Get the window sizes and trigger offset\n\n            windowScrollLeft = Garnish.$win.scrollLeft();\n            windowScrollTop = Garnish.$win.scrollTop();\n\n            // Get the trigger's dimensions\n            triggerWidth = this.$trigger.outerWidth();\n            triggerHeight = this.$trigger.outerHeight();\n\n            // Get the offsets for each side of the trigger element\n            triggerOffset = this.$trigger.offset();\n\n            if (this.$fixedTriggerParent) {\n                triggerOffset.left -= windowScrollLeft;\n                triggerOffset.top -= windowScrollTop;\n\n                scrollContainerTriggerOffset = triggerOffset;\n\n                windowScrollLeft = 0;\n                windowScrollTop = 0;\n                scrollContainerScrollLeft = 0;\n                scrollContainerScrollTop = 0;\n            }\n            else {\n                scrollContainerTriggerOffset = Garnish.getOffset(this.$trigger);\n\n                scrollContainerScrollLeft = Garnish.$scrollContainer.scrollLeft();\n                scrollContainerScrollTop = Garnish.$scrollContainer.scrollTop();\n            }\n\n            triggerOffset.right = triggerOffset.left + triggerWidth;\n            triggerOffset.bottom = triggerOffset.top + triggerHeight;\n\n            scrollContainerTriggerOffset.right = scrollContainerTriggerOffset.left + triggerWidth;\n            scrollContainerTriggerOffset.bottom = scrollContainerTriggerOffset.top + triggerHeight;\n\n            // Get the HUD dimensions\n            this.$hud.css({\n                width: ''\n            });\n\n            this.$mainContainer.css({\n                height: '',\n                'overflow-x': '',\n                'overflow-y': ''\n            });\n\n            hudBodyWidth = this.$body.width();\n            hudBodyHeight = this.$body.height();\n\n            // Determine the best orientation for the HUD\n\n            // Find the actual available top/right/bottom/left clearances\n            var clearances = {\n                bottom: this.windowHeight + scrollContainerScrollTop - scrollContainerTriggerOffset.bottom,\n                top: scrollContainerTriggerOffset.top - scrollContainerScrollTop,\n                right: this.windowWidth + scrollContainerScrollLeft - scrollContainerTriggerOffset.right,\n                left: scrollContainerTriggerOffset.left - scrollContainerScrollLeft\n            };\n\n            // Find the first position that has enough room\n            this.orientation = null;\n\n            for (var i = 0; i < this.settings.orientations.length; i++) {\n                var orientation = this.settings.orientations[i],\n                    relevantSize = (orientation === 'top' || orientation === 'bottom' ? hudBodyHeight : hudBodyWidth);\n\n                if (clearances[orientation] - (this.settings.windowSpacing + this.settings.triggerSpacing) >= relevantSize) {\n                    // This is the first orientation that has enough room in order of preference, so we'll go with this\n                    this.orientation = orientation;\n                    break;\n                }\n\n                if (!this.orientation || clearances[orientation] > clearances[this.orientation]) {\n                    // Use this as a fallback as it's the orientation with the most clearance so far\n                    this.orientation = orientation;\n                }\n            }\n\n            // Just in case...\n            if (!this.orientation || $.inArray(this.orientation, ['bottom', 'top', 'right', 'left']) === -1) {\n                this.orientation = 'bottom'\n            }\n\n            // Update the tip class\n            if (this.tipClass) {\n                this.$tip.removeClass(this.tipClass);\n            }\n\n            this.tipClass = this.settings.tipClass + '-' + Garnish.HUD.tipClasses[this.orientation];\n            this.$tip.addClass(this.tipClass);\n\n            // Make sure the HUD body is within the allowed size\n\n            var maxHudBodyWidth,\n                maxHudBodyHeight;\n\n            if (this.orientation === 'top' || this.orientation === 'bottom') {\n                maxHudBodyWidth = this.windowWidth - this.settings.windowSpacing * 2;\n                maxHudBodyHeight = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n            }\n            else {\n                maxHudBodyWidth = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n                maxHudBodyHeight = this.windowHeight - this.settings.windowSpacing * 2;\n            }\n\n            if (maxHudBodyWidth < this.settings.minBodyWidth) {\n                maxHudBodyWidth = this.settings.minBodyWidth;\n            }\n\n            if (maxHudBodyHeight < this.settings.minBodyHeight) {\n                maxHudBodyHeight = this.settings.minBodyHeight;\n            }\n\n            if (hudBodyWidth > maxHudBodyWidth || hudBodyWidth < this.settings.minBodyWidth) {\n                if (hudBodyWidth > maxHudBodyWidth) {\n                    hudBodyWidth = maxHudBodyWidth;\n                }\n                else {\n                    hudBodyWidth = this.settings.minBodyWidth;\n                }\n\n                this.$hud.width(hudBodyWidth);\n\n                // Is there any overflow now?\n                if (this.mainWidth > maxHudBodyWidth) {\n                    this.$mainContainer.css('overflow-x', 'scroll');\n                }\n\n                // The height may have just changed\n                hudBodyHeight = this.$body.height();\n            }\n\n            if (hudBodyHeight > maxHudBodyHeight || hudBodyHeight < this.settings.minBodyHeight) {\n                if (hudBodyHeight > maxHudBodyHeight) {\n                    hudBodyHeight = maxHudBodyHeight;\n                }\n                else {\n                    hudBodyHeight = this.settings.minBodyHeight;\n                }\n\n                var mainHeight = hudBodyHeight;\n\n                if (this.$header) {\n                    mainHeight -= this.$header.outerHeight();\n                }\n\n                if (this.$footer) {\n                    mainHeight -= this.$footer.outerHeight();\n                }\n\n                this.$mainContainer.height(mainHeight);\n\n                // Is there any overflow now?\n                if (this.mainHeight > mainHeight) {\n                    this.$mainContainer.css('overflow-y', 'scroll');\n                }\n            }\n\n            // Set the HUD/tip positions\n            var triggerCenter, left, top;\n\n            if (this.orientation === 'top' || this.orientation === 'bottom') {\n                // Center the HUD horizontally\n                var maxLeft = (this.windowWidth + windowScrollLeft) - (hudBodyWidth + this.settings.windowSpacing);\n                var minLeft = (windowScrollLeft + this.settings.windowSpacing);\n                triggerCenter = triggerOffset.left + Math.round(triggerWidth / 2);\n                left = triggerCenter - Math.round(hudBodyWidth / 2);\n\n                if (left > maxLeft) {\n                    left = maxLeft;\n                }\n                if (left < minLeft) {\n                    left = minLeft;\n                }\n\n                this.$hud.css('left', left);\n\n                var tipLeft = (triggerCenter - left) - (this.settings.tipWidth / 2);\n                this.$tip.css({left: tipLeft, top: ''});\n\n                if (this.orientation === 'top') {\n                    top = triggerOffset.top - (hudBodyHeight + this.settings.triggerSpacing);\n                    this.$hud.css('top', top);\n                }\n                else {\n                    top = triggerOffset.bottom + this.settings.triggerSpacing;\n                    this.$hud.css('top', top);\n                }\n            }\n            else {\n                // Center the HUD vertically\n                var maxTop = (this.windowHeight + windowScrollTop) - (hudBodyHeight + this.settings.windowSpacing);\n                var minTop = (windowScrollTop + this.settings.windowSpacing);\n                triggerCenter = triggerOffset.top + Math.round(triggerHeight / 2);\n                top = triggerCenter - Math.round(hudBodyHeight / 2);\n\n                if (top > maxTop) {\n                    top = maxTop;\n                }\n                if (top < minTop) {\n                    top = minTop;\n                }\n\n                this.$hud.css('top', top);\n\n                var tipTop = (triggerCenter - top) - (this.settings.tipWidth / 2);\n                this.$tip.css({top: tipTop, left: ''});\n\n\n                if (this.orientation === 'left') {\n                    left = triggerOffset.left - (hudBodyWidth + this.settings.triggerSpacing);\n                    this.$hud.css('left', left);\n                }\n                else {\n                    left = triggerOffset.right + this.settings.triggerSpacing;\n                    this.$hud.css('left', left);\n                }\n            }\n\n            this.updatingSizeAndPosition = false;\n            this.trigger('updateSizeAndPosition');\n        },\n\n        /**\n         * Hide\n         */\n        hide: function() {\n            if (!this.showing) {\n                return;\n            }\n\n            this.disable();\n\n            this.$hud.hide();\n            this.$shade.hide();\n\n            this.showing = false;\n            delete Garnish.HUD.activeHUDs[this._namespace];\n            Garnish.shortcutManager.removeLayer();\n            this.onHide();\n        },\n\n        onHide: function() {\n            this.trigger('hide');\n        },\n\n        toggle: function() {\n            if (this.showing) {\n                this.hide();\n            }\n            else {\n                this.show();\n            }\n        },\n\n        submit: function() {\n            this.onSubmit();\n        },\n\n        onSubmit: function() {\n            this.trigger('submit');\n        },\n\n        _handleSubmit: function(ev) {\n            ev.preventDefault();\n            this.submit();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$hud) {\n                this.$hud.remove();\n            }\n\n            if (this.$shade) {\n                this.$shade.remove();\n            }\n\n            this.base();\n        }\n    },\n    {\n        tipClasses: {bottom: 'top', top: 'bottom', right: 'left', left: 'right'},\n\n        defaults: {\n            shadeClass: 'hud-shade',\n            hudClass: 'hud',\n            tipClass: 'tip',\n            bodyClass: 'body',\n            headerClass: 'hud-header',\n            footerClass: 'hud-footer',\n            mainContainerClass: 'main-container',\n            mainClass: 'main',\n            orientations: ['bottom', 'top', 'right', 'left'],\n            triggerSpacing: 10,\n            windowSpacing: 10,\n            tipWidth: 30,\n            minBodyWidth: 200,\n            minBodyHeight: 0,\n            onShow: $.noop,\n            onHide: $.noop,\n            onSubmit: $.noop,\n            closeBtn: null,\n            closeOtherHUDs: true,\n            hideOnEsc: true,\n            hideOnShadeClick: true,\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Menu Button\n */\nGarnish.MenuBtn = Garnish.Base.extend(\n    {\n        $btn: null,\n        menu: null,\n        showingMenu: false,\n        disabled: true,\n\n        /**\n         * Constructor\n         */\n        init: function(btn, menu, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(menu)) {\n                // (btn, settings)\n                settings = menu;\n                menu = null;\n            }\n\n            this.$btn = $(btn);\n            var $menu;\n\n            // Is this already a menu button?\n            if (this.$btn.data('menubtn')) {\n                // Grab the old MenuBtn's menu container\n                if (!menu) {\n                    $menu = this.$btn.data('menubtn').menu.$container;\n                }\n\n                Garnish.log('Double-instantiating a menu button on an element');\n                this.$btn.data('menubtn').destroy();\n            }\n            else if (!menu) {\n                $menu = this.$btn.next('.menu').detach();\n            }\n\n            this.$btn.data('menubtn', this);\n\n            this.setSettings(settings, Garnish.MenuBtn.defaults);\n\n            this.menu = menu || new Garnish.CustomSelect($menu);\n            this.menu.$anchor = $(this.settings.menuAnchor || this.$btn);\n            this.menu.on('optionselect', function(ev) {\n                this.onOptionSelect(ev.selectedOption);\n            }.bind(this));\n\n            this.$btn.attr({\n                'tabindex': 0,\n                'aria-controls': this.menu.menuId,\n                'aria-haspopup': 'listbox',\n                'aria-expanded': 'false'\n            });\n\n            this.menu.on('hide', this.onMenuHide.bind(this));\n            this.addListener(this.$btn, 'mousedown', 'onMouseDown');\n            this.addListener(this.$btn, 'keydown', 'onKeyDown');\n            this.addListener(this.$btn, 'blur', 'onBlur');\n            this.enable();\n        },\n\n        onBlur: function() {\n            if (this.showingMenu) {\n                Garnish.requestAnimationFrame(function() {\n                    if (!$.contains(this.menu.$container.get(0), document.activeElement)) {\n                        this.hideMenu();\n                    }\n                }.bind(this));\n            }\n        },\n\n        onKeyDown: function(ev) {\n            var $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n\n                    const $currentOption = this.menu.$options.filter('.hover');\n                    if ($currentOption.length > 0) {\n                        $currentOption.get(0).click();\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        const $currentOption = this.menu.$options.filter('.hover');\n                        if ($currentOption.length > 0) {\n                            $currentOption.get(0).click();\n                        }\n                    } else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.first();\n                        }\n\n                        this.focusOption($option);\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index + 1) < this.menu.$options.length) {\n                                        $option = $(this.menu.$options[(index + 1)]);\n                                    }\n                                }\n                            }\n                        }.bind(this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[0]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.first();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index - 1) >= 0) {\n                                        $option = $(this.menu.$options[(index - 1)]);\n                                    }\n                                }\n                            }\n                        }.bind(this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[(this.menu.$options.length - 1)]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.last();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n            }\n        },\n\n        focusOption: function($option) {\n            this.menu.$options.removeClass('hover');\n\n            $option.addClass('hover');\n\n            this.menu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n            this.$btn.attr('aria-activedescendant', $option.attr('id'));\n        },\n\n        onMouseDown: function(ev) {\n            if (ev.which !== Garnish.PRIMARY_CLICK || Garnish.isCtrlKeyPressed(ev) || ev.target.nodeName === 'INPUT') {\n                return;\n            }\n\n            ev.preventDefault();\n\n            if (this.showingMenu) {\n                this.hideMenu();\n            }\n            else {\n                this.showMenu();\n            }\n        },\n\n        showMenu: function() {\n            if (this.disabled) {\n                return;\n            }\n\n            this.menu.show();\n            this.$btn.addClass('active');\n            this.$btn.trigger('focus');\n            this.$btn.attr('aria-expanded', 'true');\n\n            this.showingMenu = true;\n\n            setTimeout(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'onMouseDown');\n            }.bind(this), 1);\n        },\n\n        hideMenu: function() {\n            this.menu.hide();\n        },\n\n        onMenuHide: function() {\n            this.$btn.removeClass('active');\n            this.$btn.attr('aria-expanded', 'false');\n            this.showingMenu = false;\n\n            this.removeListener(Garnish.$doc, 'mousedown');\n        },\n\n        onOptionSelect: function(option) {\n            this.settings.onOptionSelect(option);\n            this.trigger('optionSelect', {option: option});\n        },\n\n        enable: function() {\n            this.disabled = false;\n        },\n\n        disable: function() {\n            this.disabled = true;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$btn.removeData('menubtn');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuAnchor: null,\n            onOptionSelect: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Mixed input\n *\n * @todo RTL support, in the event that the input doesn't have dir=\"ltr\".\n */\nGarnish.MixedInput = Garnish.Base.extend(\n    {\n        $container: null,\n        elements: null,\n        focussedElement: null,\n        blurTimeout: null,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n            this.setSettings(settings, Garnish.MixedInput.defaults);\n\n            this.elements = [];\n\n            // Allow the container to receive focus\n            this.$container.attr('tabindex', 0);\n            this.addListener(this.$container, 'focus', 'onFocus');\n        },\n\n        getElementIndex: function($elem) {\n            return $.inArray($elem, this.elements);\n        },\n\n        isText: function($elem) {\n            return ($elem.prop('nodeName') === 'INPUT');\n        },\n\n        onFocus: function() {\n            // Set focus to the first element\n            if (this.elements.length) {\n                var $elem = this.elements[0];\n                this.setFocus($elem);\n                this.setCarotPos($elem, 0);\n            }\n            else {\n                this.addTextElement();\n            }\n        },\n\n        addTextElement: function(index) {\n            var text = new TextElement(this);\n            this.addElement(text.$input, index);\n            return text;\n        },\n\n        addElement: function($elem, index) {\n            // Was a target index passed, and is it valid?\n            if (typeof index === 'undefined') {\n                if (this.focussedElement) {\n                    var focussedElement = this.focussedElement,\n                        focussedElementIndex = this.getElementIndex(focussedElement);\n\n                    // Is the focus on a text element?\n                    if (this.isText(focussedElement)) {\n                        var selectionStart = focussedElement.prop('selectionStart'),\n                            selectionEnd = focussedElement.prop('selectionEnd'),\n                            val = focussedElement.val(),\n                            preVal = val.substring(0, selectionStart),\n                            postVal = val.substr(selectionEnd);\n\n                        if (preVal && postVal) {\n                            // Split the input into two\n                            focussedElement.val(preVal).trigger('change');\n                            var newText = new TextElement(this);\n                            newText.$input.val(postVal).trigger('change');\n                            this.addElement(newText.$input, focussedElementIndex + 1);\n\n                            // Insert the new element in between them\n                            index = focussedElementIndex + 1;\n                        }\n                        else if (!preVal) {\n                            // Insert the new element before this one\n                            index = focussedElementIndex;\n                        }\n                        else {\n                            // Insert it after this one\n                            index = focussedElementIndex + 1;\n                        }\n                    }\n                    else {\n                        // Just insert the new one after this one\n                        index = focussedElementIndex + 1;\n                    }\n                }\n                else {\n                    // Insert the new element at the end\n                    index = this.elements.length;\n                }\n            }\n\n            // Add the element\n            if (typeof this.elements[index] !== 'undefined') {\n                $elem.insertBefore(this.elements[index]);\n                this.elements.splice(index, 0, $elem);\n            }\n            else {\n                // Just for safe measure, set the index to what it really will be\n                index = this.elements.length;\n\n                this.$container.append($elem);\n                this.elements.push($elem);\n            }\n\n            // Make sure that there are text elements surrounding all non-text elements\n            if (!this.isText($elem)) {\n                // Add a text element before?\n                if (index === 0 || !this.isText(this.elements[index - 1])) {\n                    this.addTextElement(index);\n                    index++;\n                }\n\n                // Add a text element after?\n                if (index === this.elements.length - 1 || !this.isText(this.elements[index + 1])) {\n                    this.addTextElement(index + 1);\n                }\n            }\n\n            // Add event listeners\n            this.addListener($elem, 'click', function() {\n                this.setFocus($elem);\n            });\n\n            // Set focus to the new element\n            setTimeout(function() {\n                this.setFocus($elem);\n            }.bind(this), 1);\n        },\n\n        removeElement: function($elem) {\n            var index = this.getElementIndex($elem);\n            if (index !== -1) {\n                this.elements.splice(index, 1);\n\n                if (!this.isText($elem)) {\n                    // Combine the two now-adjacent text elements\n                    var $prevElem = this.elements[index - 1],\n                        $nextElem = this.elements[index];\n\n                    if (this.isText($prevElem) && this.isText($nextElem)) {\n                        var prevElemVal = $prevElem.val(),\n                            newVal = prevElemVal + $nextElem.val();\n                        $prevElem.val(newVal).trigger('change');\n                        this.removeElement($nextElem);\n                        this.setFocus($prevElem);\n                        this.setCarotPos($prevElem, prevElemVal.length);\n                    }\n                }\n\n                $elem.remove();\n            }\n        },\n\n        setFocus: function($elem) {\n            this.$container.addClass('focus');\n\n            if (!this.focussedElement) {\n                // Prevent the container from receiving focus\n                // as long as one of its elements has focus\n                this.$container.attr('tabindex', '-1');\n            }\n            else {\n                // Blur the previously-focussed element\n                this.blurFocussedElement();\n            }\n\n            $elem.attr('tabindex', '0');\n            $elem.focus();\n            this.focussedElement = $elem;\n\n            this.addListener($elem, 'blur', function() {\n                this.blurTimeout = setTimeout(function() {\n                    if (this.focussedElement === $elem) {\n                        this.blurFocussedElement();\n                        this.focussedElement = null;\n                        this.$container.removeClass('focus');\n\n                        // Get ready for future focus\n                        this.$container.attr('tabindex', '0');\n                    }\n                }.bind(this), 1);\n            });\n        },\n\n        blurFocussedElement: function() {\n            this.removeListener(this.focussedElement, 'blur');\n            this.focussedElement.attr('tabindex', '-1');\n        },\n\n        focusPreviousElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index > 0) {\n                var $elem = this.elements[index - 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the end\n                if (this.isText($elem)) {\n                    var length = $elem.val().length;\n                    this.setCarotPos($elem, length);\n                }\n            }\n        },\n\n        focusNextElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index < this.elements.length - 1) {\n                var $elem = this.elements[index + 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the beginning\n                if (this.isText($elem)) {\n                    this.setCarotPos($elem, 0)\n                }\n            }\n        },\n\n        setCarotPos: function($elem, pos) {\n            $elem.prop('selectionStart', pos);\n            $elem.prop('selectionEnd', pos);\n        }\n\n    });\n\n\nvar TextElement = Garnish.Base.extend({\n\n        parentInput: null,\n        $input: null,\n        $stage: null,\n        val: null,\n        focussed: false,\n        interval: null,\n\n        init: function(parentInput) {\n            this.parentInput = parentInput;\n\n            this.$input = $('<input type=\"text\"/>').appendTo(this.parentInput.$container);\n            this.$input.css('margin-right', (2 - TextElement.padding) + 'px');\n\n            this.setWidth();\n\n            this.addListener(this.$input, 'focus', 'onFocus');\n            this.addListener(this.$input, 'blur', 'onBlur');\n            this.addListener(this.$input, 'keydown', 'onKeyDown');\n            this.addListener(this.$input, 'change', 'checkInput');\n        },\n\n        getIndex: function() {\n            return this.parentInput.getElementIndex(this.$input);\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                position: 'absolute',\n                top: -9999,\n                left: -9999,\n                wordWrap: 'nowrap'\n            });\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getTextWidth: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (val) {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Spaces\n                val = val.replace(/ /g, '&nbsp;');\n            }\n\n            this.$stage.html(val);\n            this.stageWidth = this.$stage.width();\n            return this.stageWidth;\n        },\n\n        onFocus: function() {\n            this.focussed = true;\n            this.interval = setInterval(this.checkInput.bind(this), Garnish.NiceText.interval);\n            this.checkInput();\n        },\n\n        onBlur: function() {\n            this.focussed = false;\n            clearInterval(this.interval);\n            this.checkInput();\n        },\n\n        onKeyDown: function(ev) {\n            setTimeout(this.checkInput.bind(this), 1);\n\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    if (this.$input.prop('selectionStart') === 0 && this.$input.prop('selectionEnd') === 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    if (this.$input.prop('selectionStart') === this.val.length && this.$input.prop('selectionEnd') === this.val.length) {\n                        // Set focus to the next element\n                        this.parentInput.focusNextElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.DELETE_KEY: {\n                    if (this.$input.prop('selectionStart') === 0 && this.$input.prop('selectionEnd') === 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                        ev.preventDefault();\n                    }\n                }\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        setVal: function(val) {\n            this.$input.val(val);\n            this.checkInput();\n        },\n\n        checkInput: function() {\n            // Has the value changed?\n            var changed = (this.val !== this.getVal());\n            if (changed) {\n                this.setWidth();\n                this.onChange();\n            }\n\n            return changed;\n        },\n\n        setWidth: function() {\n            // has the width changed?\n            if (this.stageWidth !== this.getTextWidth(this.val)) {\n                // update the textarea width\n                var width = this.stageWidth + TextElement.padding;\n                this.$input.width(width);\n            }\n        },\n\n        onChange: $.noop\n    },\n    {\n        padding: 20\n    }\n);\n","/** global: Garnish */\n/**\n * Modal\n */\nGarnish.Modal = Garnish.Base.extend(\n    {\n        $container: null,\n        $shade: null,\n\n        visible: false,\n\n        dragger: null,\n\n        desiredWidth: null,\n        desiredHeight: null,\n        resizeDragger: null,\n        resizeStartWidth: null,\n        resizeStartHeight: null,\n\n        init: function(container, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n            }\n\n            this.setSettings(settings, Garnish.Modal.defaults);\n\n            // Create the shade\n            this.$shade = $('<div class=\"' + this.settings.shadeClass + '\"/>');\n\n            // If the container is already set, drop the shade below it.\n            if (container) {\n                this.$shade.insertBefore(container);\n            }\n            else {\n                this.$shade.appendTo(Garnish.$bod);\n            }\n\n            if (container) {\n                Garnish.addModalAttributes(container);\n                this.setContainer(container);\n\n                if (this.settings.autoShow) {\n                    this.show();\n                }\n            }\n\n            Garnish.Modal.instances.push(this);\n        },\n\n        setContainer: function(container) {\n            this.$container = $(container);\n\n            // Is this already a modal?\n            if (this.$container.data('modal')) {\n                Garnish.log('Double-instantiating a modal on an element');\n                this.$container.data('modal').destroy();\n            }\n\n            this.$container.data('modal', this);\n\n            if (this.settings.draggable) {\n                this.dragger = new Garnish.DragMove(this.$container, {\n                    handle: (this.settings.dragHandleSelector ? this.$container.find(this.settings.dragHandleSelector) : this.$container)\n                });\n            }\n\n            if (this.settings.resizable) {\n                var $resizeDragHandle = $('<div class=\"resizehandle\"/>').appendTo(this.$container);\n\n                this.resizeDragger = new Garnish.BaseDrag($resizeDragHandle, {\n                    onDragStart: this._handleResizeStart.bind(this),\n                    onDrag: this._handleResize.bind(this)\n                });\n            }\n\n            this.addListener(this.$container, 'click', function(ev) {\n                ev.stopPropagation();\n            });\n\n            // Show it if we're late to the party\n            if (this.visible) {\n                this.show();\n            }\n        },\n\n        show: function() {\n            // Close other modals as needed\n            if (this.settings.closeOtherModals && Garnish.Modal.visibleModal && Garnish.Modal.visibleModal !== this) {\n                Garnish.Modal.visibleModal.hide();\n            }\n\n            if (this.$container) {\n                // Move it to the end of <body> so it gets the highest sub-z-index\n                this.$shade.appendTo(Garnish.$bod);\n                this.$container.appendTo(Garnish.$bod);\n\n                this.$container.show();\n                this.updateSizeAndPosition();\n\n                this.$shade.velocity('fadeIn', {\n                    duration: 50,\n                    complete: function() {\n                        this.$container.velocity('fadeIn', {\n                            complete: function() {\n                                this.updateSizeAndPosition();\n                                Garnish.setFocusWithin(this.$container);\n                                this.onFadeIn();\n                            }.bind(this)\n                        });\n                    }.bind(this)\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.addListener(this.$shade, 'click', 'hide');\n                }\n\n                // Add focus trap\n                Garnish.trapFocusWithin(this.$container);\n\n                this.addListener(Garnish.$win, 'resize', '_handleWindowResize');\n            }\n\n            this.enable();\n\n            if (!this.visible) {\n                this.visible = true;\n                Garnish.Modal.visibleModal = this;\n\n                Garnish.shortcutManager.addLayer();\n\n                if (this.settings.hideOnEsc) {\n                    Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n                }\n\n                Garnish.hideModalBackgroundContent(this.$container);\n\n                this.trigger('show');\n                this.settings.onShow();\n            }\n        },\n\n        quickShow: function() {\n            this.show();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n        },\n\n        hide: function(ev) {\n            if (!this.visible) {\n                return;\n            }\n\n            this.disable();\n\n            if (ev) {\n                ev.stopPropagation();\n            }\n\n            if (this.$container) {\n                this.$container.velocity('fadeOut', {duration: Garnish.FX_DURATION});\n                this.$shade.velocity('fadeOut', {\n                    duration: Garnish.FX_DURATION,\n                    complete: this.onFadeOut.bind(this)\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.removeListener(this.$shade, 'click');\n                }\n\n                this.removeListener(Garnish.$win, 'resize');\n            }\n\n            if (this.settings.triggerElement) {\n                this.settings.triggerElement.focus();\n            }\n\n            this.visible = false;\n            Garnish.Modal.visibleModal = null;\n            Garnish.shortcutManager.removeLayer();\n            this.trigger('hide');\n            Garnish.resetBackgroundContentVisibility(this.$container);\n            this.settings.onHide();\n        },\n\n        quickHide: function() {\n            this.hide();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.css('opacity', 0).hide();\n\n                this.$shade.velocity('stop');\n                this.$shade.css('opacity', 0).hide();\n            }\n        },\n\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            this.$container.css({\n                'width': (this.desiredWidth ? Math.max(this.desiredWidth, 200) : ''),\n                'height': (this.desiredHeight ? Math.max(this.desiredHeight, 200) : ''),\n                'min-width': '',\n                'min-height': ''\n            });\n\n            // Set the width first so that the height can adjust for the width\n            this.updateSizeAndPosition._windowWidth = Garnish.$win.width();\n            this.updateSizeAndPosition._width = Math.min(this.getWidth(), this.updateSizeAndPosition._windowWidth - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'width': this.updateSizeAndPosition._width,\n                'min-width': this.updateSizeAndPosition._width,\n                'left': Math.round((this.updateSizeAndPosition._windowWidth - this.updateSizeAndPosition._width) / 2)\n            });\n\n            // Now set the height\n            this.updateSizeAndPosition._windowHeight = Garnish.$win.height();\n            this.updateSizeAndPosition._height = Math.min(this.getHeight(), this.updateSizeAndPosition._windowHeight - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'height': this.updateSizeAndPosition._height,\n                'min-height': this.updateSizeAndPosition._height,\n                'top': Math.round((this.updateSizeAndPosition._windowHeight - this.updateSizeAndPosition._height) / 2)\n            });\n\n            this.trigger('updateSizeAndPosition');\n        },\n\n        onFadeIn: function() {\n            this.trigger('fadeIn');\n            this.settings.onFadeIn();\n        },\n\n        onFadeOut: function() {\n            this.trigger('fadeOut');\n            this.settings.onFadeOut();\n        },\n\n        getHeight: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the height of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            this.getHeight._height = this.$container.outerHeight();\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getHeight._height;\n        },\n\n        getWidth: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the width of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            // Chrome might be 1px shy here for some reason\n            this.getWidth._width = this.$container.outerWidth() + 1;\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getWidth._width;\n        },\n\n        _handleWindowResize: function(ev) {\n            // ignore propagated resize events\n            if (ev.target === window) {\n                this.updateSizeAndPosition();\n            }\n        },\n\n        _handleResizeStart: function() {\n            this.resizeStartWidth = this.getWidth();\n            this.resizeStartHeight = this.getHeight();\n        },\n\n        _handleResize: function() {\n            if (Garnish.ltr) {\n                this.desiredWidth = this.resizeStartWidth + (this.resizeDragger.mouseDistX * 2);\n            }\n            else {\n                this.desiredWidth = this.resizeStartWidth - (this.resizeDragger.mouseDistX * 2);\n            }\n\n            this.desiredHeight = this.resizeStartHeight + (this.resizeDragger.mouseDistY * 2);\n\n            this.updateSizeAndPosition();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$container) {\n                this.$container.removeData('modal').remove();\n            }\n\n            if (this.$shade) {\n                this.$shade.remove();\n            }\n\n            if (this.dragger) {\n                this.dragger.destroy();\n            }\n\n            if (this.resizeDragger) {\n                this.resizeDragger.destroy();\n            }\n\n            this.base();\n        }\n    },\n    {\n        relativeElemPadding: 8,\n        defaults: {\n            autoShow: true,\n            draggable: false,\n            dragHandleSelector: null,\n            resizable: false,\n            minGutter: 10,\n            onShow: $.noop,\n            onHide: $.noop,\n            onFadeIn: $.noop,\n            onFadeOut: $.noop,\n            closeOtherModals: false,\n            hideOnEsc: true,\n            hideOnShadeClick: true,\n            triggerElement: null,\n            shadeClass: 'modal-shade',\n        },\n        instances: [],\n        visibleModal: null\n    }\n);\n","/** global: Garnish */\n/**\n * Nice Text\n */\nGarnish.NiceText = Garnish.Base.extend(\n    {\n        $input: null,\n        $hint: null,\n        $stage: null,\n        $charsLeft: null,\n        autoHeight: null,\n        maxLength: null,\n        showCharsLeft: false,\n        showingHint: false,\n        val: null,\n        inputBoxSizing: 'content-box',\n        width: null,\n        height: null,\n        minHeight: null,\n        initialized: false,\n\n        init: function(input, settings) {\n            this.$input = $(input);\n            this.settings = $.extend({}, Garnish.NiceText.defaults, settings);\n\n            if (this.isVisible()) {\n                this.initialize();\n            }\n            else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n\n        isVisible: function() {\n            return (this.$input.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            this.maxLength = this.$input.attr('maxlength');\n\n            if (this.maxLength) {\n                this.maxLength = parseInt(this.maxLength);\n            }\n\n            if (this.maxLength && (this.settings.showCharsLeft || Garnish.hasAttr(this.$input, 'data-show-chars-left'))) {\n                this.showCharsLeft = true;\n\n                // Remove the maxlength attribute\n                this.$input.removeAttr('maxlength');\n            }\n\n            // Is this already a transparent text input?\n            if (this.$input.data('nicetext')) {\n                Garnish.log('Double-instantiating a transparent text input on an element');\n                this.$input.data('nicetext').destroy();\n            }\n\n            this.$input.data('nicetext', this);\n\n            this.getVal();\n\n            this.autoHeight = (this.settings.autoHeight && this.$input.prop('nodeName') === 'TEXTAREA');\n\n            if (this.autoHeight) {\n                this.minHeight = this.getHeightForValue('');\n                this.updateHeight();\n\n                // Update height when the window resizes\n                this.width = this.$input.width();\n                this.addListener(Garnish.$win, 'resize', 'updateHeightIfWidthChanged');\n            }\n\n            if (this.settings.hint) {\n                this.$hintContainer = $('<div class=\"texthint-container\"/>').insertBefore(this.$input);\n                this.$hint = $('<div class=\"texthint\">' + this.settings.hint + '</div>').appendTo(this.$hintContainer);\n                this.$hint.css({\n                    top: (parseInt(this.$input.css('borderTopWidth')) + parseInt(this.$input.css('paddingTop'))),\n                    left: (parseInt(this.$input.css('borderLeftWidth')) + parseInt(this.$input.css('paddingLeft')) + 1)\n                });\n                Garnish.copyTextStyles(this.$input, this.$hint);\n\n                if (this.val) {\n                    this.$hint.hide();\n                }\n                else {\n                    this.showingHint = true;\n                }\n\n                // Focus the input when clicking on the hint\n                this.addListener(this.$hint, 'mousedown', function(ev) {\n                    ev.preventDefault();\n                    this.$input.focus();\n                });\n            }\n\n            if (this.showCharsLeft) {\n                this.$charsLeft = $('<div aria-live=\"polite\" class=\"' + this.settings.charsLeftClass + '\"/>').insertAfter(this.$input);\n                this.updateCharsLeft();\n            }\n\n            this.addListener(this.$input, 'textchange', 'onTextChange');\n            this.addListener(this.$input, 'keydown', 'onKeyDown');\n        },\n\n        initializeIfVisible: function() {\n            if (this.isVisible()) {\n                this.initialize();\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        showHint: function() {\n            this.$hint.velocity('fadeIn', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = true;\n        },\n\n        hideHint: function() {\n            this.$hint.velocity('fadeOut', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = false;\n        },\n\n        onTextChange: function() {\n            this.getVal();\n\n            if (this.$hint) {\n                if (this.showingHint && this.val) {\n                    this.hideHint();\n                }\n                else if (!this.showingHint && !this.val) {\n                    this.showHint();\n                }\n            }\n\n            if (this.autoHeight) {\n                this.updateHeight();\n            }\n\n            if (this.showCharsLeft) {\n                this.updateCharsLeft();\n            }\n        },\n\n        onKeyDown: function(ev) {\n            // If Ctrl/Command + Return is pressed, submit the closest form\n            if (ev.keyCode === Garnish.RETURN_KEY && Garnish.isCtrlKeyPressed(ev)) {\n                ev.preventDefault();\n                this.$input.closest('form').submit();\n            }\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                display: 'block',\n                position: 'absolute',\n                top: -9999,\n                left: -9999\n            });\n\n            this.inputBoxSizing = this.$input.css('box-sizing');\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.$stage.css({\n                    'border-top': this.$input.css('border-top'),\n                    'border-right': this.$input.css('border-right'),\n                    'border-bottom': this.$input.css('border-bottom'),\n                    'border-left': this.$input.css('border-left'),\n                    'padding-top': this.$input.css('padding-top'),\n                    'padding-right': this.$input.css('padding-right'),\n                    'padding-bottom': this.$input.css('padding-bottom'),\n                    'padding-left': this.$input.css('padding-left'),\n                    '-webkit-box-sizing': this.inputBoxSizing,\n                    '-moz-box-sizing': this.inputBoxSizing,\n                    'box-sizing': this.inputBoxSizing\n                });\n            }\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getHeightForValue: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.$stage.css('width', this.$input.outerWidth());\n            }\n            else {\n                this.$stage.css('width', this.$input.width());\n            }\n\n            if (!val) {\n                val = '&nbsp;';\n                for (var i = 1; i < this.$input.prop('rows'); i++) {\n                    val += '<br/>&nbsp;';\n                }\n            }\n            else {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Multiple spaces\n                val = val.replace(/ {2,}/g, function(spaces) {\n                    // TODO: replace with String.repeat() when more broadly available?\n                    var replace = '';\n                    for (var i = 0; i < spaces.length - 1; i++) {\n                        replace += '&nbsp;';\n                    }\n                    return replace + ' ';\n                });\n\n                // Line breaks\n                val = val.replace(/[\\n\\r]$/g, '<br/>&nbsp;');\n                val = val.replace(/[\\n\\r]/g, '<br/>');\n            }\n\n            this.$stage.html(val);\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.getHeightForValue._height = this.$stage.outerHeight();\n            }\n            else {\n                this.getHeightForValue._height = this.$stage.height();\n            }\n\n            if (this.minHeight && this.getHeightForValue._height < this.minHeight) {\n                this.getHeightForValue._height = this.minHeight;\n            }\n\n            return this.getHeightForValue._height;\n        },\n\n        updateHeight: function() {\n            // has the height changed?\n            if (this.height !== (this.height = this.getHeightForValue(this.val))) {\n                this.$input.css('min-height', this.height);\n\n                if (this.initialized) {\n                    this.onHeightChange();\n                }\n            }\n        },\n\n        updateHeightIfWidthChanged: function() {\n            if (this.isVisible() && this.width !== (this.width = this.$input.width()) && this.width) {\n                this.updateHeight();\n            }\n        },\n\n        onHeightChange: function() {\n            this.settings.onHeightChange();\n        },\n\n        updateCharsLeft: function() {\n            this.updateCharsLeft._charsLeft = this.maxLength - this.val.length;\n            this.$charsLeft.html(Garnish.NiceText.charsLeftHtml(this.updateCharsLeft._charsLeft));\n\n            if (this.updateCharsLeft._charsLeft >= 0) {\n                this.$charsLeft.removeClass(this.settings.negativeCharsLeftClass);\n            }\n            else {\n                this.$charsLeft.addClass(this.settings.negativeCharsLeftClass);\n            }\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$input.removeData('nicetext');\n\n            if (this.$hint) {\n                this.$hint.remove();\n            }\n\n            if (this.$stage) {\n                this.$stage.remove();\n            }\n\n            this.base();\n        }\n    },\n    {\n        interval: 100,\n        hintFadeDuration: 50,\n        charsLeftHtml: function(charsLeft) {\n            return charsLeft;\n        },\n        defaults: {\n            autoHeight: true,\n            showCharsLeft: false,\n            charsLeftClass: 'chars-left',\n            negativeCharsLeftClass: 'negative-chars-left',\n            onHeightChange: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Select\n */\nGarnish.Select = Garnish.Base.extend(\n    {\n        $container: null,\n        $items: null,\n        $selectedItems: null,\n        $focusedItem: null,\n\n        mousedownTarget: null,\n        mouseUpTimeout: null,\n        callbackFrame: null,\n\n        $focusable: null,\n        $first: null,\n        first: null,\n        $last: null,\n        last: null,\n\n        /**\n         * Constructor\n         */\n        init: function(container, items, settings) {\n            this.$container = $(container);\n\n            // Param mapping\n            if (typeof items === 'undefined' && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n                items = null;\n            }\n            else if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (container, settings)\n                settings = items;\n                items = null;\n            }\n\n            // Is this already a select?\n            if (this.$container.data('select')) {\n                Garnish.log('Double-instantiating a select on an element');\n                this.$container.data('select').destroy();\n            }\n\n            this.$container.data('select', this);\n\n            this.setSettings(settings, Garnish.Select.defaults);\n\n            this.$items = $();\n            this.$selectedItems = $();\n\n            this.addItems(items);\n\n            // --------------------------------------------------------------------\n\n            if (this.settings.allowEmpty && !this.settings.checkboxMode) {\n                this.addListener(this.$container, 'click', function() {\n                    if (this.ignoreClick) {\n                        this.ignoreClick = false;\n                    }\n                    else {\n                        // Deselect all items on container click\n                        this.deselectAll(true);\n                    }\n                });\n            }\n        },\n\n        /**\n         * Get Item Index\n         */\n        getItemIndex: function($item) {\n            return this.$items.index($item[0]);\n        },\n\n        /**\n         * Is Selected?\n         */\n        isSelected: function(item) {\n            if (Garnish.isJquery(item)) {\n                if (!item[0]) {\n                    return false;\n                }\n\n                item = item[0];\n            }\n\n            return ($.inArray(item, this.$selectedItems) !== -1);\n        },\n\n        /**\n         * Select Item\n         */\n        selectItem: function($item, focus, preventScroll) {\n            if (!this.settings.multi) {\n                this.deselectAll();\n            }\n\n            this.$first = this.$last = $item;\n            this.first = this.last = this.getItemIndex($item);\n\n            if (focus) {\n                this.setFocusableItem($item);\n                this.focusItem($item, preventScroll);\n            }\n\n            this._selectItems($item);\n        },\n\n        selectAll: function() {\n            if (!this.settings.multi || !this.$items.length) {\n                return;\n            }\n\n            this.first = 0;\n            this.last = this.$items.length - 1;\n            this.$first = this.$items.eq(this.first);\n            this.$last = this.$items.eq(this.last);\n\n            this._selectItems(this.$items);\n        },\n\n        /**\n         * Select Range\n         */\n        selectRange: function($item, preventScroll) {\n            if (!this.settings.multi) {\n                return this.selectItem($item, true, true);\n            }\n\n            this.deselectAll();\n\n            this.$last = $item;\n            this.last = this.getItemIndex($item);\n\n            this.setFocusableItem($item);\n            this.focusItem($item, preventScroll);\n\n            // prepare params for $.slice()\n            var sliceFrom, sliceTo;\n\n            if (this.first < this.last) {\n                sliceFrom = this.first;\n                sliceTo = this.last + 1;\n            }\n            else {\n                sliceFrom = this.last;\n                sliceTo = this.first + 1;\n            }\n\n            this._selectItems(this.$items.slice(sliceFrom, sliceTo));\n        },\n\n        /**\n         * Deselect Item\n         */\n        deselectItem: function($item) {\n            var index = this.getItemIndex($item);\n            if (this.first === index) {\n                this.$first = this.first = null;\n            }\n            if (this.last === index) {\n                this.$last = this.last = null;\n            }\n\n            this._deselectItems($item);\n        },\n\n        /**\n         * Deselect All\n         */\n        deselectAll: function(clearFirst) {\n            if (clearFirst) {\n                this.$first = this.first = this.$last = this.last = null;\n            }\n\n            this._deselectItems(this.$items);\n        },\n\n        /**\n         * Deselect Others\n         */\n        deselectOthers: function($item) {\n            this.deselectAll();\n            this.selectItem($item, true, true);\n        },\n\n        /**\n         * Toggle Item\n         */\n        toggleItem: function($item, preventScroll) {\n            if (!this.isSelected($item)) {\n                this.selectItem($item, true, preventScroll);\n            }\n            else {\n                if (this._canDeselect($item)) {\n                    this.deselectItem($item, true);\n                }\n            }\n        },\n\n        clearMouseUpTimeout: function() {\n            clearTimeout(this.mouseUpTimeout);\n        },\n\n        getFirstItem: function() {\n            if (this.$items.length) {\n                return this.$items.first();\n            }\n        },\n\n        getLastItem: function() {\n            if (this.$items.length) {\n                return this.$items.last();\n            }\n        },\n\n        isPreviousItem: function(index) {\n            return (index > 0);\n        },\n\n        isNextItem: function(index) {\n            return (index < this.$items.length - 1);\n        },\n\n        getPreviousItem: function(index) {\n            if (this.isPreviousItem(index)) {\n                return this.$items.eq(index - 1);\n            }\n        },\n\n        getNextItem: function(index) {\n            if (this.isNextItem(index)) {\n                return this.$items.eq(index + 1);\n            }\n        },\n\n        getItemToTheLeft: function(index) {\n            var func = (Garnish.ltr ? 'Previous' : 'Next');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '<');\n                }\n            }\n        },\n\n        getItemToTheRight: function(index) {\n            var func = (Garnish.ltr ? 'Next' : 'Previous');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                else if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '>');\n                }\n            }\n        },\n\n        getItemAbove: function(index) {\n            if (this.isPreviousItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getPreviousItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '<');\n                }\n            }\n        },\n\n        getItemBelow: function(index) {\n            if (this.isNextItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getNextItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '>');\n                }\n            }\n        },\n\n        getClosestItem: function(index, axis, dir) {\n            var axisProps = Garnish.Select.closestItemAxisProps[axis],\n                dirProps = Garnish.Select.closestItemDirectionProps[dir];\n\n            var $thisItem = this.$items.eq(index),\n                thisOffset = $thisItem.offset(),\n                thisMidpoint = thisOffset[axisProps.midpointOffset] + Math.round($thisItem[axisProps.midpointSizeFunc]() / 2),\n                otherRowPos = null,\n                smallestMidpointDiff = null,\n                $closestItem = null;\n\n            // Go the other way if this is the X axis and a RTL page\n            var step;\n\n            if (Garnish.rtl && axis === Garnish.X_AXIS) {\n                step = dirProps.step * -1;\n            }\n            else {\n                step = dirProps.step;\n            }\n\n            for (var i = index + step; (typeof this.$items[i] !== 'undefined'); i += step) {\n                var $otherItem = this.$items.eq(i),\n                    otherOffset = $otherItem.offset();\n\n                // Are we on the next row yet?\n                if (dirProps.isNextRow(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    // Is this the first time we've seen this row?\n                    if (otherRowPos === null) {\n                        otherRowPos = otherOffset[axisProps.rowOffset];\n                    }\n                    // Have we gone too far?\n                    else if (otherOffset[axisProps.rowOffset] !== otherRowPos) {\n                        break;\n                    }\n\n                    var otherMidpoint = otherOffset[axisProps.midpointOffset] + Math.round($otherItem[axisProps.midpointSizeFunc]() / 2),\n                        midpointDiff = Math.abs(thisMidpoint - otherMidpoint);\n\n                    // Are we getting warmer?\n                    if (smallestMidpointDiff === null || midpointDiff < smallestMidpointDiff) {\n                        smallestMidpointDiff = midpointDiff;\n                        $closestItem = $otherItem;\n                    }\n                    // Getting colder?\n                    else {\n                        break;\n                    }\n                }\n                // Getting colder?\n                else if (dirProps.isWrongDirection(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    break;\n                }\n            }\n\n            return $closestItem;\n        },\n\n        getFurthestItemToTheLeft: function(index) {\n            return this.getFurthestItem(index, 'ToTheLeft');\n        },\n\n        getFurthestItemToTheRight: function(index) {\n            return this.getFurthestItem(index, 'ToTheRight');\n        },\n\n        getFurthestItemAbove: function(index) {\n            return this.getFurthestItem(index, 'Above');\n        },\n\n        getFurthestItemBelow: function(index) {\n            return this.getFurthestItem(index, 'Below');\n        },\n\n        getFurthestItem: function(index, dir) {\n            var $item, $testItem;\n\n            while ($testItem = this['getItem' + dir](index)) {\n                $item = $testItem;\n                index = this.getItemIndex($item);\n            }\n\n            return $item;\n        },\n\n        /**\n         * totalSelected getter\n         */\n        get totalSelected() {\n            return this.getTotalSelected();\n        },\n\n        /**\n         * Get Total Selected\n         */\n        getTotalSelected: function() {\n            return this.$selectedItems.length;\n        },\n\n        /**\n         * Add Items\n         */\n        addItems: function(items) {\n            var $items = $(items);\n\n            for (var i = 0; i < $items.length; i++) {\n                var item = $items[i];\n\n                // Make sure this element doesn't belong to another selector\n                if ($.data(item, 'select')) {\n                    Garnish.log('Element was added to more than one selector');\n                    $.data(item, 'select').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'select', this);\n\n                // Get the handle\n                var $handle;\n\n                if (this.settings.handle) {\n                    if (typeof this.settings.handle === 'object') {\n                        $handle = $(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle === 'string') {\n                        $handle = $(item).find(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle === 'function') {\n                        $handle = $(this.settings.handle(item));\n                    }\n                }\n                else {\n                    $handle = $(item);\n                }\n\n                $.data(item, 'select-handle', $handle);\n                $handle.data('select-item', item);\n\n                this.addListener($handle, 'mousedown', 'onMouseDown');\n                this.addListener($handle, 'mouseup', 'onMouseUp');\n                this.addListener($handle, 'click', function() {\n                    this.ignoreClick = true;\n                });\n\n                this.addListener(item, 'keydown', 'onKeyDown');\n            }\n\n            this.$items = this.$items.add($items);\n            this.updateIndexes();\n        },\n\n        /**\n         * Remove Items\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            var itemsChanged = false,\n                selectionChanged = false;\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index !== -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                    itemsChanged = true;\n\n                    var selectedIndex = $.inArray(item, this.$selectedItems);\n                    if (selectedIndex !== -1) {\n                        this.$selectedItems.splice(selectedIndex, 1);\n                        selectionChanged = true;\n                    }\n                }\n            }\n\n            if (itemsChanged) {\n                this.updateIndexes();\n\n                if (selectionChanged) {\n                    $(items).removeClass(this.settings.selectedClass);\n                    this.onSelectionChange();\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n            this.$selectedItems = $();\n            this.updateIndexes();\n        },\n\n        /**\n         * Update First/Last indexes\n         */\n        updateIndexes: function() {\n            if (this.first !== null) {\n                this.first = this.getItemIndex(this.$first);\n                this.setFocusableItem(this.$first);\n            }\n            else if (this.$items.length) {\n                this.setFocusableItem($(this.$items[0]));\n            }\n\n            if (this.$focusedItem) {\n                this.setFocusableItem(this.$focusedItem);\n                this.focusItem(this.$focusedItem, true);\n            }\n\n            if (this.last !== null) {\n                this.last = this.getItemIndex(this.$last);\n            }\n        },\n\n        /**\n         * Reset Item Order\n         */\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.$selectedItems = $().add(this.$selectedItems);\n            this.updateIndexes();\n        },\n\n        /**\n         * Sets the focusable item.\n         *\n         * We only want to have one focusable item per selection list, so that the user\n         * doesn't have to tab through a million items.\n         *\n         * @param {object} $item\n         */\n        setFocusableItem: function($item) {\n            if (this.$focusable) {\n                this.$focusable.removeAttr('tabindex');\n            }\n\n            this.$focusable = $item.attr('tabindex', '0');\n        },\n\n        /**\n         * Sets the focus on an item.\n         */\n        focusItem: function($item, preventScroll) {\n            $item[0].focus({preventScroll: !!preventScroll});\n            this.$focusedItem = $item;\n            this.trigger('focusItem', {item: $item});\n        },\n\n        /**\n         * Get Selected Items\n         */\n        getSelectedItems: function() {\n            return this.$selectedItems;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('select');\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Mouse Down\n         */\n        onMouseDown: function(ev) {\n            // ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enforce the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            this.mousedownTarget = ev.currentTarget;\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            if (this.first !== null && ev.shiftKey) {\n                // Shift key is consistent for both selection modes\n                this.selectRange($item, true);\n            }\n            else if (this._actAsCheckbox(ev)) {\n                this.toggleItem($item, true);\n            }\n        },\n\n        /**\n         * On Mouse Up\n         */\n        onMouseUp: function(ev) {\n            // ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enfore the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            // was this a click?\n            if (\n                !this._actAsCheckbox(ev) && !ev.shiftKey &&\n                ev.currentTarget === this.mousedownTarget\n            ) {\n                // If this is already selected, wait a moment to see if this is a double click before making any rash decisions\n                if (this.isSelected($item)) {\n                    this.clearMouseUpTimeout();\n\n                    this.mouseUpTimeout = setTimeout(function() {\n                        this.deselectOthers($item);\n                    }.bind(this), 300);\n                }\n                else {\n                    this.deselectAll();\n                    this.selectItem($item, true, true);\n                }\n            }\n        },\n\n        /**\n         * On Key Down\n         */\n        onKeyDown: function(ev) {\n            // Ignore if the focus isn't on one of our items\n            if (ev.target !== ev.currentTarget) {\n                return;\n            }\n\n            var ctrlKey = Garnish.isCtrlKeyPressed(ev);\n            var shiftKey = ev.shiftKey;\n\n            var anchor, $item;\n\n            if (!this.settings.checkboxMode || !this.$focusable.length) {\n                anchor = ev.shiftKey ? this.last : this.first;\n            }\n            else {\n                anchor = $.inArray(this.$focusable[0], this.$items);\n\n                if (anchor === -1) {\n                    anchor = 0;\n                }\n            }\n\n            // Ok, what are we doing here?\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            $item = this.getLastItem();\n                        }\n                        else {\n                            $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemToTheLeft(anchor);\n                        }\n                        else {\n                            $item = this.getItemToTheLeft(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            $item = this.getFirstItem();\n                        }\n                        else {\n                            $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemToTheRight(anchor);\n                        }\n                        else {\n                            $item = this.getItemToTheRight(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            $item = this.$focusable.prev();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemAbove(anchor);\n                        }\n                        else {\n                            $item = this.getItemAbove(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            $item = this.$focusable.next();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemBelow(anchor);\n                        }\n                        else {\n                            $item = this.getItemBelow(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getLastItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    if (!ctrlKey && !shiftKey) {\n                        ev.preventDefault();\n\n                        if (this.isSelected(this.$focusable)) {\n                            if (this._canDeselect(this.$focusable)) {\n                                this.deselectItem(this.$focusable);\n                            }\n                        }\n                        else {\n                            this.selectItem(this.$focusable, true, false);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.A_KEY: {\n                    if (ctrlKey) {\n                        ev.preventDefault();\n                        this.selectAll();\n                    }\n\n                    break;\n                }\n            }\n\n            // Is there an item queued up for focus/selection?\n            if ($item && $item.length) {\n                if (!this.settings.checkboxMode) {\n                    // select it\n                    if (this.first !== null && ev.shiftKey) {\n                        this.selectRange($item, false);\n                    }\n                    else {\n                        this.deselectAll();\n                        this.selectItem($item, true, false);\n                    }\n                }\n                else {\n                    // just set the new item to be focusable\n                    this.setFocusableItem($item);\n                    $item.focus();\n                    this.$focusedItem = $item;\n                    this.trigger('focusItem', {item: $item});\n                }\n            }\n        },\n\n        /**\n         * Set Callback Timeout\n         */\n        onSelectionChange: function() {\n            if (this.callbackFrame) {\n                Garnish.cancelAnimationFrame(this.callbackFrame);\n                this.callbackFrame = null;\n            }\n\n            this.callbackFrame = Garnish.requestAnimationFrame(function() {\n                this.callbackFrame = null;\n                this.trigger('selectionChange');\n                this.settings.onSelectionChange();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _actAsCheckbox: function(ev) {\n            if (Garnish.isCtrlKeyPressed(ev)) {\n                return !this.settings.checkboxMode;\n            }\n            else {\n                return this.settings.checkboxMode;\n            }\n        },\n\n        _canDeselect: function($items) {\n            return (this.settings.allowEmpty || this.totalSelected > $items.length);\n        },\n\n        _selectItems: function($items) {\n            $items.addClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.add($items);\n            this.onSelectionChange();\n        },\n\n        _deselectItems: function($items) {\n            $items.removeClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.not($items);\n            this.onSelectionChange();\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            var $handle = $.data(item, 'select-handle');\n\n            if ($handle) {\n                $handle.removeData('select-item');\n                this.removeAllListeners($handle);\n            }\n\n            $.removeData(item, 'select');\n            $.removeData(item, 'select-handle');\n\n            if (this.$focusedItem && this.$focusedItem[0] === item) {\n                this.$focusedItem = null;\n            }\n        }\n    },\n    {\n        defaults: {\n            selectedClass: 'sel',\n            multi: false,\n            allowEmpty: true,\n            vertical: false,\n            horizontal: false,\n            handle: null,\n            filter: null,\n            checkboxMode: false,\n            onSelectionChange: $.noop\n        },\n\n        closestItemAxisProps: {\n            x: {\n                midpointOffset: 'top',\n                midpointSizeFunc: 'outerHeight',\n                rowOffset: 'left'\n            },\n            y: {\n                midpointOffset: 'left',\n                midpointSizeFunc: 'outerWidth',\n                rowOffset: 'top'\n            }\n        },\n\n        closestItemDirectionProps: {\n            '<': {\n                step: -1,\n                isNextRow: function(a, b) {\n                    return (a < b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a > b);\n                }\n            },\n            '>': {\n                step: 1,\n                isNextRow: function(a, b) {\n                    return (a > b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a < b);\n                }\n            }\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Select Menu\n */\nGarnish.SelectMenu = Garnish.CustomSelect.extend(\n    {\n        /**\n         * Constructor\n         */\n        init: function(btn, options, settings, callback) {\n            // argument mapping\n            if (typeof settings === 'function') {\n                // (btn, options, callback)\n                callback = settings;\n                settings = {};\n            }\n\n            settings = $.extend({}, Garnish.SelectMenu.defaults, settings);\n\n            this.base(btn, options, settings, callback);\n\n            this.selected = -1;\n        },\n\n        /**\n         * Build\n         */\n        build: function() {\n            this.base();\n\n            if (this.selected !== -1) {\n                this._addSelectedOptionClass(this.selected);\n            }\n        },\n\n        /**\n         * Select\n         */\n        select: function(option) {\n            // ignore if it's already selected\n            if (option === this.selected) {\n                return;\n            }\n\n            if (this.dom.ul) {\n                if (this.selected !== -1) {\n                    this.dom.options[this.selected].className = '';\n                }\n\n                this._addSelectedOptionClass(option);\n            }\n\n            this.selected = option;\n\n            // set the button text to the selected option\n            this.setBtnText($(this.options[option].label).text());\n\n            this.base(option);\n        },\n\n        /**\n         * Add Selected Option Class\n         */\n        _addSelectedOptionClass: function(option) {\n            this.dom.options[option].className = 'sel';\n        },\n\n        /**\n         * Set Button Text\n         */\n        setBtnText: function(text) {\n            this.dom.$btnLabel.text(text);\n        }\n\n    },\n    {\n        defaults: {\n            ulClass: 'menu select'\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Keyboard shortcut manager class\n *\n * This can be used to map keyboard events to the current UI \"layer\" (whether that's the base document,\n * a modal, an HUD, or a menu).\n */\nGarnish.ShortcutManager = Garnish.Base.extend(\n    {\n        shortcuts: null,\n        layer: 0,\n\n        init: function() {\n            this.shortcuts = [[]];\n            this.addListener(Garnish.$bod, 'keydown', 'triggerShortcut');\n        },\n\n        addLayer: function() {\n            this.layer++;\n            this.shortcuts.push([]);\n            return this;\n        },\n\n        removeLayer: function() {\n            if (this.layer === 0) {\n                throw 'Can’t remove the base layer.';\n            }\n            this.layer--;\n            this.shortcuts.pop();\n            return this;\n        },\n\n        registerShortcut: function(shortcut, callback, layer) {\n            shortcut = this._normalizeShortcut(shortcut);\n            if (typeof layer === 'undefined') {\n                layer = this.layer;\n            }\n            this.shortcuts[layer].push({\n                key: JSON.stringify(shortcut),\n                shortcut: shortcut,\n                callback: callback,\n            });\n            return this;\n        },\n\n        unregisterShortcut: function(shortcut, layer) {\n            shortcut = this._normalizeShortcut(shortcut);\n            var key = JSON.stringify(shortcut);\n            if (typeof layer === 'undefined') {\n                layer = this.layer;\n            }\n            for (var i = 0; i < this.shortcuts[layer].length; i++) {\n                if (this.shortcuts[layer][i].key === key) {\n                    this.shortcuts[layer].splice(i, 1);\n                    break;\n                }\n            }\n            return this;\n        },\n\n        _normalizeShortcut: function(shortcut) {\n            if (typeof shortcut === 'number') {\n                shortcut = {keyCode: shortcut};\n            }\n\n            if (typeof shortcut.keyCode !== 'number') {\n                throw 'Invalid shortcut';\n            }\n\n            return {\n                keyCode: shortcut.keyCode,\n                ctrl: !!shortcut.ctrl,\n                shift: !!shortcut.shift,\n                alt: !!shortcut.alt,\n            };\n        },\n\n        triggerShortcut: function(ev) {\n            var shortcut;\n            for (var i = 0; i < this.shortcuts[this.layer].length; i++) {\n                shortcut = this.shortcuts[this.layer][i].shortcut;\n                if (\n                    shortcut.keyCode === ev.keyCode &&\n                    shortcut.ctrl === Garnish.isCtrlKeyPressed(ev) &&\n                    shortcut.shift === ev.shiftKey &&\n                    shortcut.alt === ev.altKey\n                ) {\n                    ev.preventDefault();\n                    this.shortcuts[this.layer][i].callback(ev);\n                    break;\n                }\n            }\n        },\n    }\n);\n\nGarnish.shortcutManager = new Garnish.ShortcutManager();\n","/**\n * Garnish UI toolkit\n *\n * @copyright 2013 Pixel & Tonic, Inc.. All rights reserved.\n * @author    Brandon Kelly <brandon@pixelandtonic.com>\n * @version   0.1\n * @license   MIT\n */\n(function($){\n\n/*!\r\n\tBase.js, version 1.1a\r\n\tCopyright 2006-2010, Dean Edwards\r\n\tLicense: http://www.opensource.org/licenses/mit-license.php\r\n*/\r\n\r\nvar Base = function() {\r\n\t// dummy\r\n};\r\n\r\nBase.extend = function(_instance, _static) { // subclass\r\n\tvar extend = Base.prototype.extend;\r\n\r\n\t// build the prototype\r\n\tBase._prototyping = true;\r\n\tvar proto = new this;\r\n\textend.call(proto, _instance);\r\n\tproto.base = function() {\r\n\t\t// call this method from any other method to invoke that method's ancestor\r\n\t};\r\n\tdelete Base._prototyping;\r\n\r\n\t// create the wrapper for the constructor function\r\n\t//var constructor = proto.constructor.valueOf(); //-dean\r\n\tvar constructor = proto.constructor;\r\n\tvar klass = proto.constructor = function() {\r\n\t\tif (!Base._prototyping) {\r\n\t\t\tif (this._constructing || this.constructor == klass) { // instantiation\r\n\t\t\t\tthis._constructing = true;\r\n\t\t\t\tconstructor.apply(this, arguments);\r\n\t\t\t\tdelete this._constructing;\r\n\t\t\t} else if (arguments[0] != null) { // casting\r\n\t\t\t\treturn (arguments[0].extend || extend).call(arguments[0], proto);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// build the class interface\r\n\tklass.ancestor = this;\r\n\tklass.extend = this.extend;\r\n\tklass.forEach = this.forEach;\r\n\tklass.implement = this.implement;\r\n\tklass.prototype = proto;\r\n\tklass.toString = this.toString;\r\n\tklass.valueOf = function(type) {\r\n\t\t//return (type == \"object\") ? klass : constructor; //-dean\r\n\t\treturn (type == \"object\") ? klass : constructor.valueOf();\r\n\t};\r\n\textend.call(klass, _static);\r\n\t// class initialisation\r\n\tif (typeof klass.init == \"function\") klass.init();\r\n\treturn klass;\r\n};\r\n\r\nBase.prototype = {\r\n\textend: function(source, value) {\r\n\t\tif (arguments.length > 1) { // extending with a name/value pair\r\n\t\t\tvar ancestor = this[source];\r\n\t\t\tif (ancestor && (typeof value == \"function\") && // overriding a method?\r\n\t\t\t\t// the valueOf() comparison is to avoid circular references\r\n\t\t\t\t(!ancestor.valueOf || ancestor.valueOf() != value.valueOf()) &&\r\n\t\t\t\t/\\bbase\\b/.test(value)) {\r\n\t\t\t\t// get the underlying method\r\n\t\t\t\tvar method = value.valueOf();\r\n\t\t\t\t// override\r\n\t\t\t\tvalue = function() {\r\n\t\t\t\t\tvar previous = this.base || Base.prototype.base;\r\n\t\t\t\t\tthis.base = ancestor;\r\n\t\t\t\t\tvar returnValue = method.apply(this, arguments);\r\n\t\t\t\t\tthis.base = previous;\r\n\t\t\t\t\treturn returnValue;\r\n\t\t\t\t};\r\n\t\t\t\t// point to the underlying method\r\n\t\t\t\tvalue.valueOf = function(type) {\r\n\t\t\t\t\treturn (type == \"object\") ? value : method;\r\n\t\t\t\t};\r\n\t\t\t\tvalue.toString = Base.toString;\r\n\t\t\t}\r\n\t\t\tthis[source] = value;\r\n\t\t} else if (source) { // extending with an object literal\r\n\t\t\tvar extend = Base.prototype.extend;\r\n\t\t\t// if this object has a customised extend method then use it\r\n\t\t\tif (!Base._prototyping && typeof this != \"function\") {\r\n\t\t\t\textend = this.extend || extend;\r\n\t\t\t}\r\n\t\t\tvar proto = {toSource: null};\r\n\t\t\t// do the \"toString\" and other methods manually\r\n\t\t\tvar hidden = [\"constructor\", \"toString\", \"valueOf\"];\r\n\t\t\t// if we are prototyping then include the constructor\r\n\t\t\tvar i = Base._prototyping ? 0 : 1;\r\n\t\t\twhile (key = hidden[i++]) {\r\n\t\t\t\tif (source[key] != proto[key]) {\r\n\t\t\t\t\textend.call(this, key, source[key]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// copy each of the source object's properties to this object\r\n\t\t\tfor (var key in source) {\r\n\t\t\t\tif (!proto[key]) {\r\n\t\t\t\t\tvar desc = Object.getOwnPropertyDescriptor(source, key);\r\n\t\t\t\t\tif (typeof desc.value != typeof undefined) {\r\n\t\t\t\t\t\t// set the value normally in case it's a function that needs to be overwritten\r\n\t\t\t\t\t\textend.call(this, key, desc.value);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// set it while maintaining the original descriptor settings\r\n\t\t\t\t\t\tObject.defineProperty(this, key, desc);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n};\r\n\r\n// initialise\r\nBase = Base.extend({\r\n\tconstructor: function() {\r\n\t\tthis.extend(arguments[0]);\r\n\t}\r\n}, {\r\n\tancestor: Object,\r\n\tversion: \"1.1\",\r\n\r\n\tforEach: function(object, block, context) {\r\n\t\tfor (var key in object) {\r\n\t\t\tif (this.prototype[key] === undefined) {\r\n\t\t\t\tblock.call(context, object[key], key, object);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\timplement: function() {\r\n\t\tfor (var i = 0; i < arguments.length; i++) {\r\n\t\t\tif (typeof arguments[i] == \"function\") {\r\n\t\t\t\t// if it's a function, call it\r\n\t\t\t\targuments[i](this.prototype);\r\n\t\t\t} else {\r\n\t\t\t\t// add the interface using the extend method\r\n\t\t\t\tthis.prototype.extend(arguments[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t},\r\n\r\n\ttoString: function() {\r\n\t\treturn String(this.valueOf());\r\n\t}\r\n});\r\n\n/**\n * @namespace Garnish\n */\n\n// Bail if Garnish is already defined\nif (typeof Garnish !== 'undefined') {\n    throw 'Garnish is already defined!';\n}\n\nGarnish = {\n\n    // jQuery objects for common elements\n    $win: $(window),\n    $doc: $(document),\n    $bod: $(document.body)\n\n};\n\nGarnish.rtl = Garnish.$bod.hasClass('rtl');\nGarnish.ltr = !Garnish.rtl;\n\nGarnish = $.extend(Garnish, {\n\n    $scrollContainer: Garnish.$win,\n\n    // Key code constants\n    DELETE_KEY: 8,\n    SHIFT_KEY: 16,\n    TAB_KEY: 9,\n    CTRL_KEY: 17,\n    ALT_KEY: 18,\n    RETURN_KEY: 13,\n    ESC_KEY: 27,\n    SPACE_KEY: 32,\n    LEFT_KEY: 37,\n    UP_KEY: 38,\n    RIGHT_KEY: 39,\n    DOWN_KEY: 40,\n    A_KEY: 65,\n    S_KEY: 83,\n    CMD_KEY: 91,\n\n    // ARIA hidden classes\n    JS_ARIA_CLASS: 'garnish-js-aria',\n    JS_ARIA_TRUE_CLASS: 'garnish-js-aria-true',\n    JS_ARIA_FALSE_CLASS: 'garnish-js-aria-false',\n\n    // Mouse button constants\n    PRIMARY_CLICK: 1,\n    SECONDARY_CLICK: 3,\n\n    // Axis constants\n    X_AXIS: 'x',\n    Y_AXIS: 'y',\n\n    FX_DURATION: 100,\n\n    // Node types\n    TEXT_NODE: 3,\n\n    /**\n     * Logs a message to the browser's console, if the browser has one.\n     *\n     * @param {string} msg\n     */\n    log: function(msg) {\n        if (typeof console !== 'undefined' && typeof console.log === 'function') {\n            console.log(msg);\n        }\n    },\n\n    _isMobileBrowser: null,\n    _isMobileOrTabletBrowser: null,\n\n    /**\n     * Returns whether this is a mobile browser.\n     * Detection script courtesy of http://detectmobilebrowsers.com\n     *\n     * Last updated: 2014-11-24\n     *\n     * @param {boolean} detectTablets\n     * @return {boolean}\n     */\n    isMobileBrowser: function(detectTablets) {\n        var key = detectTablets ? '_isMobileOrTabletBrowser' : '_isMobileBrowser';\n\n        if (Garnish[key] === null) {\n            var a = navigator.userAgent || navigator.vendor || window.opera;\n            Garnish[key] = ((new RegExp('(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino' + (detectTablets ? '|android|ipad|playbook|silk' : ''), 'i')).test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4)));\n        }\n\n        return Garnish[key];\n    },\n\n    /**\n     * Returns whether a variable is an array.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isArray: function(val) {\n        return (val instanceof Array);\n    },\n\n    /**\n     * Returns whether a variable is a jQuery collection.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isJquery: function(val) {\n        return (val instanceof jQuery);\n    },\n\n    /**\n     * Returns whether a variable is a string.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isString: function(val) {\n        return (typeof val === 'string');\n    },\n\n    /**\n     * Returns whether an element has an attribute.\n     *\n     * @see http://stackoverflow.com/questions/1318076/jquery-hasattr-checking-to-see-if-there-is-an-attribute-on-an-element/1318091#1318091\n     */\n    hasAttr: function(elem, attr) {\n        var val = $(elem).attr(attr);\n        return (typeof val !== 'undefined' && val !== false);\n    },\n\n    /**\n     * Returns whether something is a text node.\n     *\n     * @param {object} elem\n     * @return {boolean}\n     */\n    isTextNode: function(elem) {\n        return (elem.nodeType === Garnish.TEXT_NODE);\n    },\n\n    /**\n     * Returns the offset of an element within the scroll container, whether that's the window or something else\n     */\n    getOffset: function(elem) {\n        this.getOffset._offset = $(elem).offset();\n\n        if (Garnish.$scrollContainer[0] !== Garnish.$win[0]) {\n            this.getOffset._offset.top += Garnish.$scrollContainer.scrollTop();\n            this.getOffset._offset.left += Garnish.$scrollContainer.scrollLeft();\n        }\n\n        return this.getOffset._offset;\n    },\n\n    /**\n     * Returns the distance between two coordinates.\n     *\n     * @param {number} x1 The first coordinate's X position.\n     * @param {number} y1 The first coordinate's Y position.\n     * @param {number} x2 The second coordinate's X position.\n     * @param {number} y2 The second coordinate's Y position.\n     * @return {number}\n     */\n    getDist: function(x1, y1, x2, y2) {\n        return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n    },\n\n    /**\n     * Returns whether an element is touching an x/y coordinate.\n     *\n     * @param {number}    x    The coordinate's X position.\n     * @param {number}    y    The coordinate's Y position.\n     * @param {object} elem Either an actual element or a jQuery collection.\n     * @return {boolean}\n     */\n    hitTest: function(x, y, elem) {\n        Garnish.hitTest._$elem = $(elem);\n        Garnish.hitTest._offset = Garnish.hitTest._$elem.offset();\n        Garnish.hitTest._x1 = Garnish.hitTest._offset.left;\n        Garnish.hitTest._y1 = Garnish.hitTest._offset.top;\n        Garnish.hitTest._x2 = Garnish.hitTest._x1 + Garnish.hitTest._$elem.outerWidth();\n        Garnish.hitTest._y2 = Garnish.hitTest._y1 + Garnish.hitTest._$elem.outerHeight();\n\n        return (x >= Garnish.hitTest._x1 && x < Garnish.hitTest._x2 && y >= Garnish.hitTest._y1 && y < Garnish.hitTest._y2);\n    },\n\n    /**\n     * Returns whether the cursor is touching an element.\n     *\n     * @param {object} ev   The mouse event object containing pageX and pageY properties.\n     * @param {object} elem Either an actual element or a jQuery collection.\n     * @return {boolean}\n     */\n    isCursorOver: function(ev, elem) {\n        return Garnish.hitTest(ev.pageX, ev.pageY, elem);\n    },\n\n    /**\n     * Copies text styles from one element to another.\n     *\n     * @param {object} source The source element. Can be either an actual element or a jQuery collection.\n     * @param {object} target The target element. Can be either an actual element or a jQuery collection.\n     */\n    copyTextStyles: function(source, target) {\n        var $source = $(source),\n            $target = $(target);\n\n        $target.css({\n            fontFamily: $source.css('fontFamily'),\n            fontSize: $source.css('fontSize'),\n            fontWeight: $source.css('fontWeight'),\n            letterSpacing: $source.css('letterSpacing'),\n            lineHeight: $source.css('lineHeight'),\n            textAlign: $source.css('textAlign'),\n            textIndent: $source.css('textIndent'),\n            whiteSpace: $source.css('whiteSpace'),\n            wordSpacing: $source.css('wordSpacing'),\n            wordWrap: $source.css('wordWrap')\n        });\n    },\n\n    /**\n     * Adds modal ARIA and role attributes to a container\n     *\n     * @param {object} container The container element. Can be either an actual element or a jQuery collection.\n     */\n    addModalAttributes: function(container) {\n        var $container = $(container);\n\n        $(container).attr({\n            'aria-modal': 'true',\n            'role': 'dialog',\n        });\n    },\n\n    /**\n     * Hide immediate descendants of the body element from screen readers\n     *\n     * @param {object} modal The modal container. Can be either an actual element or a jQuery collection.\n     */\n    hideModalBackgroundContent: function(modal) {\n        var $modal = $(modal);\n\n        Garnish.$bod.children().each(function() {\n            // If element is modal or already has jsAria class, do nothing\n            if (Garnish.hasJsAriaClass(this) || this === $modal.get(0)) return;\n\n            if (Garnish.contentShouldBeHidden(this)) {\n                Garnish.ariaHide(this);\n            }\n        });\n    },\n\n    /**\n     * Un-hide elements underneath modal being closed\n     *\n     */\n    resetBackgroundContentVisibility: function(container) {\n        var nextVisibleModal = Garnish.getNextVisibleModal(container);\n\n        // If there is another modal, make it accessible to AT\n        if (nextVisibleModal) {\n            $(nextVisibleModal).removeClass([Garnish.JS_ARIA_CLASS, Garnish.JS_ARIA_TRUE_CLASS, Garnish.JS_ARIA_FALSE_CLASS]);\n            $(nextVisibleModal).removeAttr('aria-hidden');\n            return;\n        };\n\n        // If no more modals in DOM, loop through hidden elements and un-hide them\n        var ariaSelector = '.' + Garnish.JS_ARIA_CLASS + ', .' + Garnish.JS_ARIA_FALSE_CLASS + ', .' + Garnish.JS_ARIA_TRUE_CLASS;\n        var ariaHiddenElements = $(ariaSelector);\n\n        $(ariaHiddenElements).each(function() {\n            if ($(this).hasClass(Garnish.JS_ARIA_CLASS)) {\n                $(this).removeClass(Garnish.JS_ARIA_CLASS);\n                $(this).removeAttr('aria-hidden');\n            } else if ($(this).hasClass(Garnish.JS_ARIA_FALSE_CLASS)) {\n                $(this).removeClass(Garnish.JS_ARIA_FALSE_CLASS);\n                $(this).attr('aria-hidden', false);\n            } else if ($(this).hasClass(Garnish.JS_ARIA_TRUE_CLASS)) {\n                $(this).removeClass(Garnish.JS_ARIA_TRUE_CLASS);\n                $(this).attr('aria-hidden', true);\n            }\n        });\n    },\n\n    contentShouldBeHidden: function(element) {\n        var hide = true;\n        var tagName = $(element).prop('tagName');\n\n        // Do not hide script or style tags, or the visible modal container\n        if (tagName === 'SCRIPT' || tagName === 'STYLE') {\n            hide = false;\n        }\n\n        return hide;\n    },\n\n    /**\n     * Apply aria-hidden=\"true\" to element and store previous value as class\n     *\n     * @param {object} element The element. Can be either an actual element or a jQuery collection.\n     */\n    ariaHide: function(element) {\n        var ariaHiddenAttribute = $(element).attr('aria-hidden');\n\n        // Capture initial aria-hidden values in an applied class\n        if (!ariaHiddenAttribute) {\n            $(element).addClass(Garnish.JS_ARIA_CLASS);\n        } else if (ariaHiddenAttribute === 'false') {\n            $(element).addClass(Garnish.JS_ARIA_FALSE_CLASS);\n        } else if (ariaHiddenAttribute === 'true') {\n            $(element.addClass(Garnish.JS_ARIA_TRUE_CLASS));\n        }\n\n        $(element).attr('aria-hidden', 'true');\n    },\n\n    getNextVisibleModal: function(container) {\n        var modals = $('[aria-modal=\"true\"]').filter(function() {\n            return $(this).css('display') == 'block';\n        });\n\n        var prevContainerIndex = $(modals).index(container);\n        var newModals = $(modals).slice(0, prevContainerIndex);\n\n        if (newModals.length) {\n            return $(newModals).last();\n        } else {\n            return null;\n        }\n    },\n\n    /**\n     * Has been hidden from screen reader users as a result of modal open\n     *\n     * @param {object} element The element. Can be either an actual element or a jQuery collection.\n     */\n    hasJsAriaClass: function(element) {\n        return $(element).hasClass(Garnish.JS_ARIA_CLASS) || $(element).hasClass(Garnish.JS_ARIA_FALSE_CLASS) || $(element).hasClass(Garnish.JS_ARIA_TRUE_CLASS);\n    },\n\n    /**\n     * Traps focus within a container, so when focus is tabbed out of it, it’s cycled back into it.\n     * @param {Object} container\n     */\n    trapFocusWithin: function(container) {\n        var $container = $(container);\n        $container.on('keydown.focus-trap', function (ev) {\n            if (ev.keyCode === Garnish.TAB_KEY) {\n                var $focusableElements = $container.find(':focusable');\n                var index = $focusableElements.index(ev.target);\n\n                if (index === 0 && ev.shiftKey) {\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                    $focusableElements.last().focus();\n                } else if (index === $focusableElements.length - 1 && !ev.shiftKey) {\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                    $focusableElements.first().focus();\n                }\n            }\n        });\n    },\n\n    /**\n     * Sets focus to the first focusable element within a container.\n     * @param {Object} container\n     */\n    setFocusWithin: function(container) {\n        $(container).find(':focusable:first').focus();\n    },\n\n    /**\n     * Returns the body's real scrollTop, discarding any window banding in Safari.\n     *\n     * @return {number}\n     */\n    getBodyScrollTop: function() {\n        Garnish.getBodyScrollTop._scrollTop = document.body.scrollTop;\n\n        if (Garnish.getBodyScrollTop._scrollTop < 0) {\n            Garnish.getBodyScrollTop._scrollTop = 0;\n        }\n        else {\n            Garnish.getBodyScrollTop._maxScrollTop = Garnish.$bod.outerHeight() - Garnish.$win.height();\n\n            if (Garnish.getBodyScrollTop._scrollTop > Garnish.getBodyScrollTop._maxScrollTop) {\n                Garnish.getBodyScrollTop._scrollTop = Garnish.getBodyScrollTop._maxScrollTop;\n            }\n        }\n\n        return Garnish.getBodyScrollTop._scrollTop;\n    },\n\n    requestAnimationFrame: (function() {\n            var raf = (\n                window.requestAnimationFrame ||\n                window.mozRequestAnimationFrame ||\n                window.webkitRequestAnimationFrame ||\n                function(fn) {\n                    return window.setTimeout(fn, 20);\n                }\n            );\n\n            return function(fn) {\n                return raf(fn);\n            };\n        })(),\n\n    cancelAnimationFrame: (function() {\n            var cancel = (\n                window.cancelAnimationFrame ||\n                window.mozCancelAnimationFrame ||\n                window.webkitCancelAnimationFrame ||\n                window.clearTimeout\n            );\n\n            return function(id) {\n                return cancel(id);\n            };\n        })(),\n\n    /**\n     * Scrolls a container element to an element within it.\n     *\n     * @param {object} container Either an actual element or a jQuery collection.\n     * @param {object} elem      Either an actual element or a jQuery collection.\n     */\n    scrollContainerToElement: function(container, elem) {\n        var $elem;\n\n        if (typeof elem === 'undefined') {\n            $elem = $(container);\n            $container = $elem.scrollParent();\n        }\n        else {\n            var $container = $(container);\n            $elem = $(elem);\n        }\n\n        if ($container.prop('nodeName') === 'HTML' || $container[0] === Garnish.$doc[0]) {\n            $container = Garnish.$win;\n        }\n\n        var scrollTop = $container.scrollTop(),\n            elemOffset = $elem.offset().top;\n\n        var elemScrollOffset;\n\n        if ($container[0] === window) {\n            elemScrollOffset = elemOffset - scrollTop;\n        }\n        else {\n            elemScrollOffset = elemOffset - $container.offset().top;\n        }\n\n        var targetScrollTop = false;\n\n        // Is the element above the fold?\n        if (elemScrollOffset < 0) {\n            targetScrollTop = scrollTop + elemScrollOffset - 10;\n        }\n        else {\n            var elemHeight = $elem.outerHeight(),\n                containerHeight = ($container[0] === window ? window.innerHeight : $container[0].clientHeight);\n\n            // Is it below the fold?\n            if (elemScrollOffset + elemHeight > containerHeight) {\n                targetScrollTop = scrollTop + (elemScrollOffset - (containerHeight - elemHeight)) + 10;\n            }\n        }\n\n        if (targetScrollTop !== false) {\n            // Velocity only allows you to scroll to an arbitrary position if you're scrolling the main window\n            if ($container[0] === window) {\n                $('html').velocity('scroll', {\n                    offset: targetScrollTop + 'px',\n                    mobileHA: false\n                });\n            }\n            else {\n                $container.scrollTop(targetScrollTop);\n            }\n        }\n    },\n\n    SHAKE_STEPS: 10,\n    SHAKE_STEP_DURATION: 25,\n\n    /**\n     * Shakes an element.\n     *\n     * @param {object}  elem Either an actual element or a jQuery collection.\n     * @param {string} prop The property that should be adjusted (default is 'margin-left').\n     */\n    shake: function(elem, prop) {\n        var $elem = $(elem);\n\n        if (!prop) {\n            prop = 'margin-left';\n        }\n\n        var startingPoint = parseInt($elem.css(prop));\n        if (isNaN(startingPoint)) {\n            startingPoint = 0;\n        }\n\n        for (var i = 0; i <= Garnish.SHAKE_STEPS; i++) {\n            (function(i) {\n                setTimeout(function() {\n                    Garnish.shake._properties = {};\n                    Garnish.shake._properties[prop] = startingPoint + (i % 2 ? -1 : 1) * (10 - i);\n                    $elem.velocity(Garnish.shake._properties, Garnish.SHAKE_STEP_DURATION);\n                }, (Garnish.SHAKE_STEP_DURATION * i));\n            })(i);\n        }\n    },\n\n    /**\n     * Returns the first element in an array or jQuery collection.\n     *\n     * @param {object} elem\n     * @return mixed\n     */\n    getElement: function(elem) {\n        return $.makeArray(elem)[0];\n    },\n\n    /**\n     * Returns the beginning of an input's name= attribute value with any [bracktes] stripped out.\n     *\n     * @param {object} elem\n     * @return string|null\n     */\n    getInputBasename: function(elem) {\n        var name = $(elem).attr('name');\n\n        if (name) {\n            return name.replace(/\\[.*/, '');\n        }\n        else {\n            return null;\n        }\n    },\n\n    /**\n     * Returns an input's value as it would be POSTed.\n     * So unchecked checkboxes and radio buttons return null,\n     * and multi-selects whose name don't end in \"[]\" only return the last selection\n     *\n     * @param {object} $input\n     * @return {(string|string[])}\n     */\n    getInputPostVal: function($input) {\n        var type = $input.attr('type'),\n            val = $input.val();\n\n        // Is this an unchecked checkbox or radio button?\n        if ((type === 'checkbox' || type === 'radio')) {\n            if ($input.prop('checked')) {\n                return val;\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Flatten any array values whose input name doesn't end in \"[]\"\n        //  - e.g. a multi-select\n        else if (Garnish.isArray(val) && $input.attr('name').substr(-2) !== '[]') {\n            if (val.length) {\n                return val[val.length - 1];\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Just return the value\n        else {\n            return val;\n        }\n    },\n\n    /**\n     * Returns the inputs within a container\n     *\n     * @param {object} container The container element. Can be either an actual element or a jQuery collection.\n     * @return {object}\n     */\n    findInputs: function(container) {\n        return $(container).find('input,text,textarea,select,button');\n    },\n\n    /**\n     * Returns the focusable elements within a container\n     *\n     * @param {object} container The container element. Can be either an actual element or a jQuery collection.\n     * @return {object}\n     */\n    findFocusable: function(container) {\n        return $(container).find(':focusable');\n    },\n\n    /**\n     * Returns the currently focused element\n     *\n     * @return {object}\n     */\n    findCurrentFocus: function() {\n        return $(':focus');\n    },\n\n    /**\n     * Returns the post data within a container.\n     *\n     * @param {object} container\n     * @return {array}\n     */\n    getPostData: function(container) {\n        var postData = {},\n            arrayInputCounters = {},\n            $inputs = Garnish.findInputs(container);\n\n        var inputName;\n\n        for (var i = 0; i < $inputs.length; i++) {\n            var $input = $inputs.eq(i);\n\n            if ($input.prop('disabled')) {\n                continue;\n            }\n\n            inputName = $input.attr('name');\n            if (!inputName) {\n                continue;\n            }\n\n            var inputVal = Garnish.getInputPostVal($input);\n            if (inputVal === null) {\n                continue;\n            }\n\n            var isArrayInput = (inputName.substr(-2) === '[]');\n\n            if (isArrayInput) {\n                // Get the cropped input name\n                var croppedName = inputName.substring(0, inputName.length - 2);\n\n                // Prep the input counter\n                if (typeof arrayInputCounters[croppedName] === 'undefined') {\n                    arrayInputCounters[croppedName] = 0;\n                }\n            }\n\n            if (!Garnish.isArray(inputVal)) {\n                inputVal = [inputVal];\n            }\n\n            for (var j = 0; j < inputVal.length; j++) {\n                if (isArrayInput) {\n                    inputName = croppedName + '[' + arrayInputCounters[croppedName] + ']';\n                    arrayInputCounters[croppedName]++;\n                }\n\n                postData[inputName] = inputVal[j];\n            }\n        }\n\n        return postData;\n    },\n\n    copyInputValues: function(source, target) {\n        var $sourceInputs = Garnish.findInputs(source),\n            $targetInputs = Garnish.findInputs(target);\n\n        for (var i = 0; i < $sourceInputs.length; i++) {\n            if (typeof $targetInputs[i] === 'undefined') {\n                break;\n            }\n\n            $targetInputs.eq(i).val(\n                $sourceInputs.eq(i).val()\n            );\n        }\n    },\n\n    /**\n     * Returns whether the \"Ctrl\" key is pressed (or ⌘ if this is a Mac) for a given keyboard event\n     *\n     * @param ev The keyboard event\n     *\n     * @return {boolean} Whether the \"Ctrl\" key is pressed\n     */\n    isCtrlKeyPressed: function(ev) {\n        if (window.navigator.platform.match(/Mac/)) {\n            // metaKey maps to ⌘ on Macs\n            return ev.metaKey;\n        }\n        return ev.ctrlKey;\n    },\n\n    _eventHandlers: [],\n\n    _normalizeEvents: function(events) {\n        if (typeof events === 'string') {\n            events = events.split(' ');\n        }\n\n        for (var i = 0; i < events.length; i++) {\n            if (typeof events[i] === 'string') {\n                events[i] = events[i].split('.');\n            }\n        }\n\n        return events;\n    },\n\n    on: function(target, events, data, handler) {\n        if (typeof data === 'function') {\n            handler = data;\n            data = {};\n        }\n\n        events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n            this._eventHandlers.push({\n                target: target,\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(target, events, handler) {\n        events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (\n                    eventHandler.target === target &&\n                    eventHandler.type === ev[0] &&\n                    (!ev[1] || eventHandler.namespace === ev[1]) &&\n                    eventHandler.handler === handler\n                ) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    }\n});\n\n\n/**\n * Garnish base class\n */\nGarnish.Base = Base.extend({\n\n    settings: null,\n\n    _eventHandlers: null,\n    _namespace: null,\n    _$listeners: null,\n    _disabled: false,\n\n    constructor: function() {\n        this._eventHandlers = [];\n        this._namespace = '.Garnish' + Math.floor(Math.random() * 1000000000);\n        this._listeners = [];\n        this.init.apply(this, arguments);\n    },\n\n    init: $.noop,\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend({}, baseSettings, defaults, settings);\n    },\n\n    on: function(events, data, handler) {\n        if (typeof data === 'function') {\n            handler = data;\n            data = {};\n        }\n\n        events = Garnish._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n            this._eventHandlers.push({\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(events, handler) {\n        events = Garnish._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (\n                    eventHandler.type === ev[0] &&\n                    (!ev[1] || eventHandler.namespace === ev[1]) &&\n                    eventHandler.handler === handler\n                ) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    },\n\n    trigger: function(type, data) {\n        var ev = {\n            type: type,\n            target: this\n        };\n\n        // instance level event handlers\n        var i, handler, _ev;\n        for (i = 0; i < this._eventHandlers.length; i++) {\n            handler = this._eventHandlers[i];\n\n            if (handler.type === type) {\n                _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev);\n            }\n        }\n\n        // class level event handlers\n        for (i = 0; i < Garnish._eventHandlers.length; i++) {\n            handler = Garnish._eventHandlers[i];\n\n            if (this instanceof handler.target && handler.type === type) {\n                _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev);\n            }\n        }\n    },\n\n    _splitEvents: function(events) {\n        if (typeof events === 'string') {\n            events = events.split(',');\n\n            for (var i = 0; i < events.length; i++) {\n                events[i] = $.trim(events[i]);\n            }\n        }\n\n        return events;\n    },\n\n    _formatEvents: function(events) {\n        events = this._splitEvents(events).slice(0);\n\n        for (var i = 0; i < events.length; i++) {\n            events[i] += this._namespace;\n        }\n\n        return events.join(' ');\n    },\n\n    addListener: function(elem, events, data, func) {\n        var $elem = $(elem);\n\n        // Ignore if there aren't any elements\n        if (!$elem.length) {\n            return;\n        }\n\n        events = this._splitEvents(events);\n\n        // Param mapping\n        if (typeof func === 'undefined' && typeof data !== 'object') {\n            // (elem, events, func)\n            func = data;\n            data = {};\n        }\n\n        if (typeof func === 'function') {\n            func = func.bind(this);\n        }\n        else {\n            func = this[func].bind(this);\n        }\n\n        $elem.on(this._formatEvents(events), data, $.proxy(function() {\n            if (!this._disabled) {\n                return func.apply(this, arguments);\n            }\n        }, this));\n\n        // Remember that we're listening to this element\n        if ($.inArray(elem, this._listeners) === -1) {\n            this._listeners.push(elem);\n        }\n    },\n\n    removeListener: function(elem, events) {\n        $(elem).off(this._formatEvents(events));\n    },\n\n    removeAllListeners: function(elem) {\n        $(elem).off(this._namespace);\n    },\n\n    disable: function() {\n        this._disabled = true;\n    },\n\n    enable: function() {\n        this._disabled = false;\n    },\n\n    destroy: function() {\n        this.trigger('destroy');\n        this.removeAllListeners(this._listeners);\n    }\n});\n\n// Custom events\n// -----------------------------------------------------------------------------\n\nvar erd;\n\nfunction getErd() {\n    if (typeof erd === 'undefined') {\n        erd = elementResizeDetectorMaker({\n            callOnAdd: false\n        });\n    }\n\n    return erd;\n}\n\nfunction triggerResizeEvent(elem) {\n    $(elem).trigger('resize');\n}\n\n// Work them into jQuery's event system\n$.extend(jQuery.event.special, {\n    activate: {\n        setup: function(data, namespaces, eventHandle) {\n            var activateNamespace = this._namespace + '-activate';\n            var $elem = $(this);\n\n            $elem.on({\n                'mousedown.garnish-activate': function(e) {\n                    // Prevent buttons from getting focus on click\n                    e.preventDefault();\n                },\n                'click.garnish-activate': function(e) {\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.trigger('activate');\n                    }\n                },\n                'keydown.garnish-activate': function(e) {\n                    // Ignore if the event was bubbled up, or if it wasn't the space key\n                    if (this !== $elem[0] || e.keyCode !== Garnish.SPACE_KEY) {\n                        return;\n                    }\n\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.addClass('active');\n\n                        Garnish.$doc.on('keyup.garnish-activate', function(e) {\n                            $elem.removeClass('active');\n\n                            if (e.keyCode === Garnish.SPACE_KEY) {\n                                e.preventDefault();\n                                $elem.trigger('activate');\n                            }\n\n                            Garnish.$doc.off('keyup.garnish-activate');\n                        });\n                    }\n                }\n            });\n\n            if (!$elem.hasClass('disabled')) {\n                $elem.attr('tabindex', '0');\n            } else {\n                $elem.removeAttr('tabindex');\n            }\n        },\n        teardown: function() {\n            $(this).off('.garnish-activate');\n        }\n    },\n\n    textchange: {\n        setup: function(data, namespaces, eventHandle) {\n            var $elem = $(this);\n            $elem.data('garnish-textchange-value', $elem.val());\n            $elem.on('keypress.garnish-textchange keyup.garnish-textchange change.garnish-textchange blur.garnish-textchange', function(e) {\n                var val = $elem.val();\n                if (val !== $elem.data('garnish-textchange-value')) {\n                    $elem.data('garnish-textchange-value', val);\n                    $elem.trigger('textchange');\n                }\n            });\n        },\n        teardown: function() {\n            $(this).off('.garnish-textchange');\n        },\n        handle: function(ev, data) {\n            var el = this;\n            var args = arguments;\n            var delay = data && typeof data.delay !== 'undefined' ? data.delay : (ev.data && ev.data.delay !== undefined ? ev.data.delay : null);\n            var handleObj = ev.handleObj;\n            var targetData = $.data(ev.target);\n\n            // Was this event configured with a delay?\n            if (delay) {\n                if (targetData.delayTimeout) {\n                    clearTimeout(targetData.delayTimeout);\n                }\n\n                targetData.delayTimeout = setTimeout(function() {\n                    handleObj.handler.apply(el, args);\n                }, delay);\n            } else {\n                return handleObj.handler.apply(el, args);\n            }\n        }\n    },\n\n    resize: {\n        setup: function(data, namespaces, eventHandle) {\n            // window is the only element that natively supports a resize event\n            if (this === window) {\n                return false;\n            }\n\n            $('> :last-child', this).addClass('last');\n            getErd().listenTo(this, triggerResizeEvent)\n        },\n        teardown: function() {\n            if (this === window) {\n                return false;\n            }\n\n            getErd().removeListener(this, triggerResizeEvent);\n        }\n    }\n});\n\n// Give them their own element collection chaining methods\njQuery.each(['activate', 'textchange', 'resize'], function(i, name) {\n    jQuery.fn[name] = function(data, fn) {\n        return arguments.length > 0 ?\n            this.on(name, null, data, fn) :\n            this.trigger(name);\n    };\n});\n\n/** global: Garnish */\n/**\n * Base drag class\n *\n * Does all the grunt work for manipulating elements via click-and-drag,\n * while leaving the actual element manipulation up to a subclass.\n */\nGarnish.BaseDrag = Garnish.Base.extend(\n    {\n        $items: null,\n\n        dragging: false,\n\n        mousedownX: null,\n        mousedownY: null,\n        realMouseX: null,\n        realMouseY: null,\n        mouseX: null,\n        mouseY: null,\n        mouseDistX: null,\n        mouseDistY: null,\n        mouseOffsetX: null,\n        mouseOffsetY: null,\n\n        $targetItem: null,\n\n        scrollProperty: null,\n        scrollAxis: null,\n        scrollDist: null,\n        scrollProxy: null,\n        scrollFrame: null,\n\n        _: null,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            this.settings = $.extend({}, Garnish.BaseDrag.defaults, settings);\n\n            this.$items = $();\n            this._ = {};\n\n            if (items) {\n                this.addItems(items);\n            }\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            return true;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            this.dragging = true;\n            this.onDragStart();\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            if (didMouseMove) {\n                // Is the mouse up against one of the window edges?\n                this.drag._scrollProperty = null;\n\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    // Scrolling up?\n                    this.drag._winScrollTop = Garnish.$win.scrollTop();\n                    this.drag._minMouseScrollY = this.drag._winScrollTop + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseY < this.drag._minMouseScrollY) {\n                        this.drag._scrollProperty = 'scrollTop';\n                        this.drag._scrollAxis = 'Y';\n                        this.drag._scrollDist = Math.round((this.mouseY - this.drag._minMouseScrollY) / 2);\n                    }\n                    else {\n                        // Scrolling down?\n                        this.drag._maxMouseScrollY = this.drag._winScrollTop + Garnish.$win.height() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseY > this.drag._maxMouseScrollY) {\n                            this.drag._scrollProperty = 'scrollTop';\n                            this.drag._scrollAxis = 'Y';\n                            this.drag._scrollDist = Math.round((this.mouseY - this.drag._maxMouseScrollY) / 2);\n                        }\n                    }\n                }\n\n                if (!this.drag._scrollProperty && this.settings.axis !== Garnish.Y_AXIS) {\n                    // Scrolling left?\n                    this.drag._winScrollLeft = Garnish.$win.scrollLeft();\n                    this.drag._minMouseScrollX = this.drag._winScrollLeft + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseX < this.drag._minMouseScrollX) {\n                        this.drag._scrollProperty = 'scrollLeft';\n                        this.drag._scrollAxis = 'X';\n                        this.drag._scrollDist = Math.round((this.mouseX - this.drag._minMouseScrollX) / 2);\n                    }\n                    else {\n                        // Scrolling right?\n                        this.drag._maxMouseScrollX = this.drag._winScrollLeft + Garnish.$win.width() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseX > this.drag._maxMouseScrollX) {\n                            this.drag._scrollProperty = 'scrollLeft';\n                            this.drag._scrollAxis = 'X';\n                            this.drag._scrollDist = Math.round((this.mouseX - this.drag._maxMouseScrollX) / 2);\n                        }\n                    }\n                }\n\n                if (this.drag._scrollProperty) {\n                    // Are we starting to scroll now?\n                    if (!this.scrollProperty) {\n                        if (!this.scrollProxy) {\n                            this.scrollProxy = this._scrollWindow.bind(this);\n                        }\n\n                        if (this.scrollFrame) {\n                            Garnish.cancelAnimationFrame(this.scrollFrame);\n                            this.scrollFrame = null;\n                        }\n\n                        this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n                    }\n\n                    this.scrollProperty = this.drag._scrollProperty;\n                    this.scrollAxis = this.drag._scrollAxis;\n                    this.scrollDist = this.drag._scrollDist;\n                }\n                else {\n                    this._cancelWindowScroll();\n                }\n            }\n\n            this.onDrag();\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            this.dragging = false;\n            this.onDragStop();\n\n            // Clear the scroll animation\n            this._cancelWindowScroll();\n        },\n\n        /**\n         * Add Items\n         *\n         * @param {object} items Elements that should be draggable.\n         */\n        addItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure this element doesn't belong to another dragger\n                if ($.data(item, 'drag')) {\n                    Garnish.log('Element was added to more than one dragger');\n                    $.data(item, 'drag').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'drag', this);\n\n                // Add the listener\n                this.addListener(item, 'mousedown', '_handleMouseDown');\n            }\n\n            this.$items = this.$items.add(items);\n        },\n\n        /**\n         * Remove Items\n         *\n         * @param {object} items Elements that should no longer be draggable.\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index !== -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('dragStart');\n                this.settings.onDragStart();\n            }.bind(this));\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('drag');\n                this.settings.onDrag();\n            }.bind(this));\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('dragStop');\n                this.settings.onDragStop();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Handle Mouse Down\n         */\n        _handleMouseDown: function(ev) {\n            // Ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Ignore if we already have a target\n            if (this.$targetItem) {\n                return;\n            }\n\n            // Ignore if they didn't actually click on the handle\n            var $target = $(ev.target),\n                $handle = this._getItemHandle(ev.currentTarget);\n\n            if (!$target.is($handle) && !$target.closest($handle).length) {\n                return;\n            }\n\n            // Make sure the target isn't a button (unless the button is the handle)\n            if (ev.currentTarget !== ev.target && this.settings.ignoreHandleSelector) {\n                if (\n                    $target.is(this.settings.ignoreHandleSelector) ||\n                    $target.closest(this.settings.ignoreHandleSelector).length\n                ) {\n                    return;\n                }\n            }\n\n            ev.preventDefault();\n\n            // Make sure that dragging is allowed right now\n            if (!this.allowDragging()) {\n                return;\n            }\n\n            // Capture the target\n            this.$targetItem = $(ev.currentTarget);\n\n            // Capture the current mouse position\n            this.mousedownX = this.mouseX = ev.pageX;\n            this.mousedownY = this.mouseY = ev.pageY;\n\n            // Capture the difference between the mouse position and the target item's offset\n            var offset = this.$targetItem.offset();\n            this.mouseOffsetX = ev.pageX - offset.left;\n            this.mouseOffsetY = ev.pageY - offset.top;\n\n            // Listen for mousemove, mouseup\n            this.addListener(Garnish.$doc, 'mousemove', '_handleMouseMove');\n            this.addListener(Garnish.$doc, 'mouseup', '_handleMouseUp');\n        },\n\n        _getItemHandle: function(item) {\n            if (this.settings.handle) {\n                if (typeof this.settings.handle === 'object') {\n                    return $(this.settings.handle);\n                }\n\n                if (typeof this.settings.handle === 'string') {\n                    return $(this.settings.handle, item);\n                }\n\n                if (typeof this.settings.handle === 'function') {\n                    return $(this.settings.handle(item));\n                }\n            }\n\n            return $(item);\n        },\n\n        /**\n         * Handle Mouse Move\n         */\n        _handleMouseMove: function(ev) {\n            ev.preventDefault();\n\n            this.realMouseX = ev.pageX;\n            this.realMouseY = ev.pageY;\n\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this.mouseX = ev.pageX;\n            }\n\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this.mouseY = ev.pageY;\n            }\n\n            this.mouseDistX = this.mouseX - this.mousedownX;\n            this.mouseDistY = this.mouseY - this.mousedownY;\n\n            if (!this.dragging) {\n                // Has the mouse moved far enough to initiate dragging yet?\n                this._handleMouseMove._mouseDist = Garnish.getDist(this.mousedownX, this.mousedownY, this.realMouseX, this.realMouseY);\n\n                if (this._handleMouseMove._mouseDist >= Garnish.BaseDrag.minMouseDist) {\n                    this.startDragging();\n                }\n            }\n\n            if (this.dragging) {\n                this.drag(true);\n            }\n        },\n\n        /**\n         * Handle Moues Up\n         */\n        _handleMouseUp: function(ev) {\n            // Unbind the document events\n            this.removeAllListeners(Garnish.$doc);\n\n            if (this.dragging) {\n                this.stopDragging();\n            }\n\n            this.$targetItem = null;\n        },\n\n        /**\n         * Scroll Window\n         */\n        _scrollWindow: function() {\n            this._.scrollPos = Garnish.$scrollContainer[this.scrollProperty]();\n            Garnish.$scrollContainer[this.scrollProperty](this._.scrollPos + this.scrollDist);\n\n            this['mouse' + this.scrollAxis] -= this._.scrollPos - Garnish.$scrollContainer[this.scrollProperty]();\n            this['realMouse' + this.scrollAxis] = this['mouse' + this.scrollAxis];\n\n            this.drag();\n\n            this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n        },\n\n        /**\n         * Cancel Window Scroll\n         */\n        _cancelWindowScroll: function() {\n            if (this.scrollFrame) {\n                Garnish.cancelAnimationFrame(this.scrollFrame);\n                this.scrollFrame = null;\n            }\n\n            this.scrollProperty = null;\n            this.scrollAxis = null;\n            this.scrollDist = null;\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            this.removeAllListeners(item);\n            $.removeData(item, 'drag');\n        }\n    },\n    {\n        minMouseDist: 1,\n        windowScrollTargetSize: 25,\n\n        defaults: {\n            handle: null,\n            axis: null,\n            ignoreHandleSelector: 'input, textarea, button, select, .btn',\n\n            onDragStart: $.noop,\n            onDrag: $.noop,\n            onDragStop: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Checkbox select class\n */\nGarnish.CheckboxSelect = Garnish.Base.extend(\n    {\n        $container: null,\n        $all: null,\n        $options: null,\n\n        init: function(container) {\n            this.$container = $(container);\n\n            // Is this already a checkbox select?\n            if (this.$container.data('checkboxSelect')) {\n                Garnish.log('Double-instantiating a checkbox select on an element');\n                this.$container.data('checkbox-select').destroy();\n            }\n\n            this.$container.data('checkboxSelect', this);\n\n            var $checkboxes = this.$container.find('input');\n            this.$all = $checkboxes.filter('.all:first');\n            this.$options = $checkboxes.not(this.$all);\n\n            this.addListener(this.$all, 'change', 'onAllChange');\n        },\n\n        onAllChange: function() {\n            var isAllChecked = this.$all.prop('checked');\n\n            this.$options.prop({\n                checked: isAllChecked,\n                disabled: isAllChecked\n            });\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('checkboxSelect');\n            this.base();\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Context Menu\n */\nGarnish.ContextMenu = Garnish.Base.extend(\n    {\n        $target: null,\n        options: null,\n        $menu: null,\n        showingMenu: false,\n\n        /**\n         * Constructor\n         */\n        init: function(target, options, settings) {\n            this.$target = $(target);\n\n            // Is this already a context menu target?\n            if (this.$target.data('contextmenu')) {\n                Garnish.log('Double-instantiating a context menu on an element');\n                this.$target.data('contextmenu').destroy();\n            }\n\n            this.$target.data('contextmenu', this);\n\n            this.options = options;\n            this.setSettings(settings, Garnish.ContextMenu.defaults);\n\n            Garnish.ContextMenu.counter++;\n\n            this.enable();\n        },\n\n        /**\n         * Build Menu\n         */\n        buildMenu: function() {\n            this.$menu = $('<div class=\"' + this.settings.menuClass + '\" style=\"display: none\" />');\n\n            var $ul = $('<ul/>').appendTo(this.$menu);\n\n            for (var i in this.options) {\n                if (!this.options.hasOwnProperty(i)) {\n                    continue;\n                }\n\n                var option = this.options[i];\n\n                if (option === '-') {\n                    // Create a new <ul>\n                    $('<hr/>').appendTo(this.$menu);\n                    $ul = $('<ul/>').appendTo(this.$menu);\n                }\n                else {\n                    var $li = $('<li></li>').appendTo($ul),\n                        $a = $('<a>' + option.label + '</a>').appendTo($li);\n\n                    if (typeof option.onClick === 'function') {\n                        // maintain the current $a and options.onClick variables\n                        (function($a, onClick) {\n                            setTimeout(function() {\n                                $a.mousedown(function(ev) {\n                                    this.hideMenu();\n                                    // call the onClick callback, with the scope set to the item,\n                                    // and pass it the event with currentTarget set to the item as well\n                                    onClick.call(this.currentTarget, $.extend(ev, {currentTarget: this.currentTarget}));\n                                }.bind(this));\n                            }.bind(this), 1);\n                        }).call(this, $a, option.onClick);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Show Menu\n         */\n        showMenu: function(ev) {\n            // Ignore left mouse clicks\n            if (ev.type === 'mousedown' && ev.which !== Garnish.SECONDARY_CLICK) {\n                return;\n            }\n\n            if (ev.type === 'contextmenu') {\n                // Prevent the real context menu from showing\n                ev.preventDefault();\n            }\n\n            // Ignore if already showing\n            if (this.showing && ev.currentTarget === this.currentTarget) {\n                return;\n            }\n\n            this.currentTarget = ev.currentTarget;\n\n            if (!this.$menu) {\n                this.buildMenu();\n            }\n\n            this.$menu.appendTo(document.body);\n            this.$menu.show();\n            this.$menu.css({left: ev.pageX + 1, top: ev.pageY - 4});\n\n            this.showing = true;\n            this.trigger('show');\n            Garnish.shortcutManager.addLayer();\n            Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.hideMenu.bind(this));\n\n            setTimeout(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'hideMenu');\n            }.bind(this), 0);\n        },\n\n        /**\n         * Hide Menu\n         */\n        hideMenu: function() {\n            this.removeListener(Garnish.$doc, 'mousedown');\n            this.$menu.hide();\n            this.showing = false;\n            this.trigger('hide');\n            Garnish.shortcutManager.removeLayer();\n        },\n\n        /**\n         * Enable\n         */\n        enable: function() {\n            this.addListener(this.$target, 'contextmenu,mousedown', 'showMenu');\n        },\n\n        /**\n         * Disable\n         */\n        disable: function() {\n            this.removeListener(this.$target, 'contextmenu,mousedown');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$target.removeData('contextmenu');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuClass: 'menu'\n        },\n        counter: 0\n    }\n);\n\n/** global: Garnish */\n/**\n * Custom Select Menu\n */\nGarnish.CustomSelect = Garnish.Base.extend(\n  {\n    settings: null,\n    visible: false,\n\n    $container: null,\n    $options: null,\n    $anchor: null,\n\n    menuId: null,\n\n    _windowWidth: null,\n    _windowHeight: null,\n    _windowScrollLeft: null,\n    _windowScrollTop: null,\n\n    _anchorOffset: null,\n    _anchorWidth: null,\n    _anchorHeight: null,\n    _anchorOffsetRight: null,\n    _anchorOffsetBottom: null,\n\n    _menuWidth: null,\n    _menuHeight: null,\n\n    /**\n     * Constructor\n     */\n    init: function (container, settings) {\n      this.setSettings(settings, Garnish.CustomSelect.defaults);\n\n      this.$container = $(container);\n\n      this.$options = $();\n      this.addOptions(this.$container.find('a'));\n\n      // Menu List\n      this.menuId = 'menu' + this._namespace;\n      this.$menuList = $('ul', this.$container);\n      this.$menuList.attr({\n        role: 'listbox',\n        id: this.menuId,\n        'aria-hidden': 'true',\n      });\n\n      // Deprecated\n      if (this.settings.attachToElement) {\n        this.settings.anchor = this.settings.attachToElement;\n        Garnish.log(\n          \"The 'attachToElement' setting is deprecated. Use 'anchor' instead.\"\n        );\n      }\n\n      if (this.settings.anchor) {\n        this.$anchor = $(this.settings.anchor);\n      }\n\n      // Prevent clicking on the container from hiding the menu\n      this.addListener(this.$container, 'mousedown', function (ev) {\n        ev.stopPropagation();\n\n        if (ev.target.nodeName !== 'INPUT') {\n          // Prevent this from causing the menu button to blur\n          ev.preventDefault();\n        }\n      });\n    },\n\n    addOptions: function ($options) {\n      this.$options = this.$options.add($options);\n      $options.data('menu', this);\n\n      $options.each(\n        function (optionKey, option) {\n          $(option).attr({\n            role: 'option',\n            tabindex: '-1',\n            id: this.menuId + '-option-' + optionKey,\n          });\n        }.bind(this)\n      );\n\n      this.removeAllListeners($options);\n      this.addListener($options, 'click', function (ev) {\n        this.selectOption(ev.currentTarget);\n      });\n    },\n\n    setPositionRelativeToAnchor: function () {\n      this._windowWidth = Garnish.$win.width();\n      this._windowHeight = Garnish.$win.height();\n      this._windowScrollLeft = Garnish.$win.scrollLeft();\n      this._windowScrollTop = Garnish.$win.scrollTop();\n\n      this._anchorOffset = this.$anchor.offset();\n      this._anchorWidth = this.$anchor.outerWidth();\n      this._anchorHeight = this.$anchor.outerHeight();\n      this._anchorOffsetRight = this._anchorOffset.left + this._anchorHeight;\n      this._anchorOffsetBottom = this._anchorOffset.top + this._anchorHeight;\n\n      this.$container.css('minWidth', 0);\n      this.$container.css(\n        'minWidth',\n        this._anchorWidth -\n          (this.$container.outerWidth() - this.$container.width())\n      );\n\n      this._menuWidth = this.$container.outerWidth();\n      this._menuHeight = this.$container.outerHeight();\n\n      // Is there room for the menu below the anchor?\n      var topClearance = this._anchorOffset.top - this._windowScrollTop,\n        bottomClearance =\n          this._windowHeight + this._windowScrollTop - this._anchorOffsetBottom;\n\n      if (\n        bottomClearance >= this._menuHeight ||\n        (topClearance < this._menuHeight && bottomClearance >= topClearance)\n      ) {\n        this.$container.css({\n          top: this._anchorOffsetBottom,\n          maxHeight: bottomClearance - this.settings.windowSpacing,\n        });\n      } else {\n        this.$container.css({\n          top:\n            this._anchorOffset.top -\n            Math.min(\n              this._menuHeight,\n              topClearance - this.settings.windowSpacing\n            ),\n          maxHeight: topClearance - this.settings.windowSpacing,\n        });\n      }\n\n      // Figure out how we're aliging it\n      var align = this.$container.data('align');\n\n      if (align !== 'left' && align !== 'center' && align !== 'right') {\n        align = 'left';\n      }\n\n      if (align === 'center') {\n        this._alignCenter();\n      } else {\n        // Figure out which options are actually possible\n        var rightClearance =\n            this._windowWidth +\n            this._windowScrollLeft -\n            (this._anchorOffset.left + this._menuWidth),\n          leftClearance = this._anchorOffsetRight - this._menuWidth;\n\n        if ((align === 'right' && leftClearance >= 0) || rightClearance < 0) {\n          this._alignRight();\n        } else {\n          this._alignLeft();\n        }\n      }\n\n      delete this._windowWidth;\n      delete this._windowHeight;\n      delete this._windowScrollLeft;\n      delete this._windowScrollTop;\n      delete this._anchorOffset;\n      delete this._anchorWidth;\n      delete this._anchorHeight;\n      delete this._anchorOffsetRight;\n      delete this._anchorOffsetBottom;\n      delete this._menuWidth;\n      delete this._menuHeight;\n    },\n\n    show: function () {\n      if (this.visible) {\n        return;\n      }\n\n      // Move the menu to the end of the DOM\n      this.$container.appendTo(Garnish.$bod);\n\n      if (this.$anchor) {\n        this.setPositionRelativeToAnchor();\n      }\n\n      this.$container.velocity('stop');\n      this.$container.css({\n        opacity: 1,\n        display: 'block',\n      });\n\n      this.$menuList.attr('aria-hidden', 'false');\n\n      Garnish.shortcutManager\n        .addLayer()\n        .registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n\n      this.addListener(\n        Garnish.$scrollContainer,\n        'scroll',\n        'setPositionRelativeToAnchor'\n      );\n\n      this.visible = true;\n      this.trigger('show');\n    },\n\n    hide: function () {\n      if (!this.visible) {\n        return;\n      }\n\n      this.$menuList.attr('aria-hidden', 'true');\n\n      this.$container.velocity(\n        'fadeOut',\n        { duration: Garnish.FX_DURATION },\n        function () {\n          this.$container.detach();\n        }.bind(this)\n      );\n\n      Garnish.shortcutManager.removeLayer();\n      this.removeListener(Garnish.$scrollContainer, 'scroll');\n      this.visible = false;\n      this.trigger('hide');\n    },\n\n    selectOption: function (option) {\n      this.settings.onOptionSelect(option);\n      this.trigger('optionselect', { selectedOption: option });\n      this.hide();\n    },\n\n    _alignLeft: function () {\n      this.$container.css({\n        left: this._anchorOffset.left,\n        right: 'auto',\n      });\n    },\n\n    _alignRight: function () {\n      this.$container.css({\n        right:\n          this._windowWidth - (this._anchorOffset.left + this._anchorWidth),\n        left: 'auto',\n      });\n    },\n\n    _alignCenter: function () {\n      var left = Math.round(\n        this._anchorOffset.left + this._anchorWidth / 2 - this._menuWidth / 2\n      );\n\n      if (left < 0) {\n        left = 0;\n      }\n\n      this.$container.css('left', left);\n    },\n  },\n  {\n    defaults: {\n      anchor: null,\n      windowSpacing: 5,\n      onOptionSelect: $.noop,\n    },\n  }\n);\n\n/**\n * @deprecated\n */\nGarnish.Menu = Garnish.CustomSelect;\n\n/** global: Garnish */\n/**\n * Disclosure Widget\n */\nGarnish.DisclosureMenu = Garnish.Base.extend(\n  {\n    settings: null,\n\n    $trigger: null,\n    $container: null,\n    $alignmentElement: null,\n    $wrapper: null,\n\n    _windowWidth: null,\n    _windowHeight: null,\n    _windowScrollLeft: null,\n    _windowScrollTop: null,\n\n    _wrapperElementOffset: null,\n    _alignmentElementOffset: null,\n    _triggerWidth: null,\n    _triggerHeight: null,\n\n    _menuWidth: null,\n    _menuHeight: null,\n\n    /**\n     * Constructor\n     */\n    init: function (trigger, settings) {\n      this.setSettings(settings, Garnish.DisclosureMenu.defaults);\n\n      this.$trigger = $(trigger);\n      var triggerId = this.$trigger.attr('aria-controls');\n      this.$container = $(\"#\" + triggerId);\n\n      if (!this.$container) return; /* Exit if no disclosure container is found */\n\n      // Get and store expanded state from trigger\n      var expanded = this.$trigger.attr('aria-expanded');\n\n      // If no expanded state exists on trigger, add for a11y\n      if (!expanded) {\n        this.$trigger.attr('aria-expanded', 'false');\n      }\n\n      // Capture additional alignment element\n      var alignmentSelector = this.$container.data('align-to');\n      if (alignmentSelector) {\n        this.$alignmentElement = $(alignmentSelector);\n      } else {\n        this.$alignmentElement = this.$trigger;\n      }\n\n      var wrapper = this.$container.closest('[data-wrapper]');\n      if (wrapper) {\n        this.$wrapper = wrapper;\n      }\n\n      this.addDisclosureMenuEventListeners();\n    },\n\n    addDisclosureMenuEventListeners: function() {\n      this.addListener(this.$trigger, 'click', function() {\n        this.handleTriggerClick();\n      });\n\n      this.addListener(this.$container, 'keydown', function(event) {\n        this.handleKeypress(event);\n      });\n\n      this.addListener(Garnish.$doc, 'mousedown', this.handleMousedown)\n    },\n\n    focusElement: function(direction) {\n      var currentFocus = $(':focus');\n\n      var focusable = Garnish.findFocusable(this.$container);\n\n      var currentIndex = focusable.index(currentFocus);\n      var newIndex;\n\n      if (direction === 'prev') {\n        newIndex = currentIndex - 1;\n      } else {\n        newIndex = currentIndex + 1;\n      }\n\n      if (newIndex >= 0 && newIndex < focusable.length) {\n        var elementToFocus = focusable[newIndex];\n        elementToFocus.focus();\n      }\n    },\n\n    handleMousedown: function (event) {\n      var newTarget = event.target;\n      var triggerButton = $(newTarget).closest('[data-disclosure-trigger]');\n      var newTargetIsInsideDisclosure = this.$container.has(newTarget).length > 0;\n\n      // If click target matches trigger element or disclosure child, do nothing\n      if ($(triggerButton).is(this.$trigger) || newTargetIsInsideDisclosure) {\n        return;\n      }\n\n      this.hide();\n    },\n\n    handleKeypress: function(event) {\n      var keyCode = event.keyCode;\n      \n      switch (keyCode) {\n        case Garnish.RIGHT_KEY:\n        case Garnish.DOWN_KEY:\n          event.preventDefault();\n          this.focusElement('next');\n          break;\n        case Garnish.LEFT_KEY:\n        case Garnish.UP_KEY:\n          event.preventDefault();\n          this.focusElement('prev');\n          break;\n        default:\n          break;\n      }\n    },\n\n    isExpanded: function () {\n      var isExpanded = this.$trigger.attr('aria-expanded');\n\n      return isExpanded === 'true';\n    },\n\n    handleTriggerClick: function() {\n      if (!this.isExpanded()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    },\n\n    show: function () {\n      if (this.isExpanded()) {\n        return;\n      }\n\n      this.setContainerPosition();\n      this.addListener(\n        Garnish.$scrollContainer,\n        'scroll',\n        'setContainerPosition'\n      );\n      \n      this.$container.velocity('stop');\n      this.$container.css({\n        opacity: 1,\n        display: 'block',\n      });\n\n      \n      // Set ARIA attribute for expanded\n      this.$trigger.attr('aria-expanded', 'true');\n\n      // Focus first focusable element\n      var firstFocusableEl = this.$container.find(':focusable')[0];\n      if (firstFocusableEl) {\n        firstFocusableEl.focus();\n      } else {\n        this.$container.attr('tabindex', '-1');\n        this.$container.focus();\n      }\n\n      this.trigger('show');\n      Garnish.shortcutManager.addLayer();\n      Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, function() {\n        this.hide();\n        this.$trigger.focus();\n      }.bind(this));\n    },\n\n    hide: function () {\n      if (!this.isExpanded()) {\n        return;\n      }\n\n      this.$container.velocity(\n        'fadeOut',\n        { duration: Garnish.FX_DURATION }\n      );\n\n      this.$trigger.attr('aria-expanded', 'false');\n\n      this.trigger('hide');\n      Garnish.shortcutManager.removeLayer();\n    },\n\n    setContainerPosition: function () {\n      this._windowWidth = Garnish.$win.width();\n      this._windowHeight = Garnish.$win.height();\n      this._windowScrollLeft = Garnish.$win.scrollLeft();\n      this._windowScrollTop = Garnish.$win.scrollTop();\n\n      this._alignmentElementOffset = this.$alignmentElement[0].getBoundingClientRect();\n\n      this._wrapperElementOffset = this.$wrapper[0].getBoundingClientRect();\n\n      this._triggerWidth = this.$trigger.outerWidth();\n\n      this.$container.css('minWidth', 0);\n      this.$container.css(\n        'minWidth',\n        this._triggerWidth -\n          (this.$container.outerWidth() - this.$container.width())\n      );\n\n      this._menuWidth = this.$container.outerWidth();\n      this._menuHeight = this.$container.outerHeight();\n\n      // Is there room for the menu below the trigger?\n      var topClearance = this._alignmentElementOffset.top,\n        bottomClearance = this._windowHeight - this._alignmentElementOffset.bottom;\n\n      // Find top/bottom offset relative to wrapper element\n      var topAdjustment = this._alignmentElementOffset.top - this._wrapperElementOffset.top;\n      var bottomAdjustment = this._alignmentElementOffset.bottom - this._wrapperElementOffset.bottom;\n\n      var bottomClearanceExists = \n        bottomClearance >= this._menuHeight ||\n        (topClearance < this._menuHeight && bottomClearance >= topClearance);\n      \n      if (bottomClearanceExists) {\n        this.$container.css({\n          top: 'calc(100% + ' + bottomAdjustment + 'px)',\n          bottom: 'unset',\n          maxHeight: bottomClearance - this.settings.windowSpacing,\n        });\n      } else {\n        this.$container.css({\n          bottom: 'calc(100% - ' + topAdjustment + 'px)',\n          top: 'unset',\n          maxHeight: topClearance - this.settings.windowSpacing,\n        });\n      }\n\n      // Figure out how we're aliging it\n      var align = this.$container.data('align');\n\n      if (align !== 'left' && align !== 'center' && align !== 'right') {\n        align = 'left';\n      }\n\n      if (align === 'center') {\n        this._alignCenter();\n      } else {\n        // Figure out which options are actually possible\n        var rightClearance =\n            this._windowWidth +\n            this._windowScrollLeft -\n            (this._alignmentElementOffset.left + this._menuWidth),\n          leftClearance = this._alignmentElementOffset.right - this._menuWidth;\n\n        if ((align === 'right' && leftClearance >= 0) || rightClearance < 0) {\n          this._alignRight();\n        } else {\n          this._alignLeft();\n        }\n      }\n\n      delete this._windowWidth;\n      delete this._windowHeight;\n      delete this._windowScrollLeft;\n      delete this._windowScrollTop;\n      delete this._wrapperElementOffset;\n      delete this._alignmentElementOffset;\n      delete this._triggerWidth;\n      delete this._triggerHeight;\n      delete this._menuWidth;\n      delete this._menuHeight;\n    },\n\n    _alignLeft: function () {\n      var leftAdjustment = this._alignmentElementOffset.left - this._wrapperElementOffset.left;\n\n      this.$container.css({\n        right: 'unset',\n        left: leftAdjustment + 'px',\n      });\n    },\n\n    _alignRight: function () {\n      var rightAdjustment = this._alignmentElementOffset.right - this._wrapperElementOffset.right;\n      \n      this.$container.css({\n        left: 'unset',\n        right: - rightAdjustment + 'px',\n      });\n    },\n\n    _alignCenter: function () {\n      var left = Math.round(this._triggerWidth / 2 - this._menuWidth / 2);\n      var leftAdjustment = this._alignmentElementOffset.left - this._wrapperElementOffset.left;\n\n      this.$container.css('left', left - leftAdjustment);\n    },\n  },\n  {\n    defaults: {\n      windowSpacing: 5,\n    },\n  }\n);\n\n/** global: Garnish */\n/**\n * Drag class\n *\n * Builds on the BaseDrag class by \"picking up\" the selceted element(s),\n * without worrying about what to do when an element is being dragged.\n */\nGarnish.Drag = Garnish.BaseDrag.extend(\n    {\n        targetItemWidth: null,\n        targetItemHeight: null,\n        targetItemPositionInDraggee: null,\n\n        $draggee: null,\n\n        otherItems: null,\n        totalOtherItems: null,\n\n        helpers: null,\n        helperTargets: null,\n        helperPositions: null,\n        helperLagIncrement: null,\n        updateHelperPosProxy: null,\n        updateHelperPosFrame: null,\n\n        lastMouseX: null,\n        lastMouseY: null,\n\n        _returningHelpersToDraggees: false,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.Drag.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            // Don't allow dragging if we're in the middle of animating the helpers back to the draggees\n            return !this._returningHelpersToDraggees;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            // Reset some things\n            this.helpers = [];\n            this.helperTargets = [];\n            this.helperPositions = [];\n            this.lastMouseX = this.lastMouseY = null;\n\n            // Capture the target item's width/height\n            this.targetItemWidth = this.$targetItem.outerWidth();\n            this.targetItemHeight = this.$targetItem.outerHeight();\n\n            // Save the draggee's display style (block/table-row) so we can re-apply it later\n            this.draggeeDisplay = this.$targetItem.css('display');\n\n            // Set the $draggee\n            this.setDraggee(this.findDraggee());\n\n            // Create an array of all the other items\n            this.otherItems = [];\n\n            for (var i = 0; i < this.$items.length; i++) {\n                var item = this.$items[i];\n\n                if ($.inArray(item, this.$draggee) === -1) {\n                    this.otherItems.push(item);\n                }\n            }\n\n            this.totalOtherItems = this.otherItems.length;\n\n            // Keep the helpers following the cursor, with a little lag to smooth it out\n            if (!this.updateHelperPosProxy) {\n                this.updateHelperPosProxy = this._updateHelperPos.bind(this);\n            }\n\n            this.helperLagIncrement = this.helpers.length === 1 ? 0 : this.settings.helperLagIncrementDividend / (this.helpers.length - 1);\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n\n            this.base();\n        },\n\n        /**\n         * Sets the draggee.\n         */\n        setDraggee: function($draggee) {\n            // Record the target item's position in the draggee\n            this.targetItemPositionInDraggee = $.inArray(this.$targetItem[0], $draggee.add(this.$targetItem[0]));\n\n            // Keep the target item at the front of the list\n            this.$draggee = $([this.$targetItem[0]].concat($draggee.not(this.$targetItem).toArray()));\n\n            // Create the helper(s)\n            if (this.settings.singleHelper) {\n                this._createHelper(0);\n            }\n            else {\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee) {\n                this.$draggee.hide();\n            }\n            else if (this.settings.collapseDraggees) {\n                this.$targetItem.css('visibility', 'hidden');\n                this.$draggee.not(this.$targetItem).hide();\n            }\n            else {\n                this.$draggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Appends additional items to the draggee.\n         */\n        appendDraggee: function($newDraggee) {\n            if (!$newDraggee.length) {\n                return;\n            }\n\n            if (!this.settings.collapseDraggees) {\n                var oldLength = this.$draggee.length;\n            }\n\n            this.$draggee = $(this.$draggee.toArray().concat($newDraggee.toArray()));\n\n            // Create new helpers?\n            if (!this.settings.collapseDraggees) {\n                var newLength = this.$draggee.length;\n\n                for (var i = oldLength; i < newLength; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee || this.settings.collapseDraggees) {\n                $newDraggee.hide();\n            }\n            else {\n                $newDraggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            // Update the draggee's virtual midpoint\n            this.draggeeVirtualMidpointX = this.mouseX - this.mouseOffsetX + (this.targetItemWidth / 2);\n            this.draggeeVirtualMidpointY = this.mouseY - this.mouseOffsetY + (this.targetItemHeight / 2);\n\n            this.base(didMouseMove);\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            // Clear the helper animation\n            Garnish.cancelAnimationFrame(this.updateHelperPosFrame);\n\n            this.base();\n        },\n\n        /**\n         * Identifies the item(s) that are being dragged.\n         */\n        findDraggee: function() {\n            switch (typeof this.settings.filter) {\n                case 'function': {\n                    return this.settings.filter();\n                }\n\n                case 'string': {\n                    return this.$items.filter(this.settings.filter);\n                }\n\n                default: {\n                    return this.$targetItem;\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            return this.mouseX - this.mouseOffsetX;\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            return this.mouseY - this.mouseOffsetY;\n        },\n\n        /**\n         * Return Helpers to Draggees\n         */\n        returnHelpersToDraggees: function() {\n            this._returningHelpersToDraggees = true;\n\n            for (var i = 0; i < this.helpers.length; i++) {\n                var $draggee = this.$draggee.eq(i),\n                    $helper = this.helpers[i];\n\n                $draggee.css({\n                    display: this.draggeeDisplay,\n                    visibility: 'hidden'\n                });\n\n                var draggeeOffset = $draggee.offset();\n                var callback;\n\n                if (i === 0) {\n                    callback = this._showDraggee.bind(this);\n                }\n                else {\n                    callback = null;\n                }\n\n                $helper.velocity({left: draggeeOffset.left, top: draggeeOffset.top}, Garnish.FX_DURATION, callback);\n            }\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        onReturnHelpersToDraggees: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('returnHelpersToDraggees');\n                this.settings.onReturnHelpersToDraggees();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Creates a helper.\n         */\n        _createHelper: function(i) {\n            var $draggee = this.$draggee.eq(i),\n                $draggeeHelper = $draggee.clone().addClass('draghelper');\n\n            if (this.settings.copyDraggeeInputValuesToHelper) {\n                Garnish.copyInputValues($draggee, $draggeeHelper);\n            }\n\n            // Remove any name= attributes so radio buttons don't lose their values\n            $draggeeHelper.find('[name]').attr('name', '');\n\n            $draggeeHelper\n                .outerWidth(Math.ceil($draggee.outerWidth()))\n                .outerHeight(Math.ceil($draggee.outerHeight()))\n                .css({margin: 0, 'pointer-events': 'none'});\n\n            if (this.settings.helper) {\n                if (typeof this.settings.helper === 'function') {\n                    $draggeeHelper = this.settings.helper($draggeeHelper);\n                }\n                else {\n                    $draggeeHelper = $(this.settings.helper).append($draggeeHelper);\n                }\n            }\n\n            $draggeeHelper.appendTo(Garnish.$bod);\n\n            var helperPos = this._getHelperTarget(i);\n\n            $draggeeHelper.css({\n                position: 'absolute',\n                top: helperPos.top,\n                left: helperPos.left,\n                zIndex: this.settings.helperBaseZindex + this.$draggee.length - i,\n                opacity: this.settings.helperOpacity\n            });\n\n            this.helperPositions[i] = {\n                top: helperPos.top,\n                left: helperPos.left\n            };\n\n            this.helpers.push($draggeeHelper);\n        },\n\n        /**\n         * Update Helper Position\n         */\n        _updateHelperPos: function() {\n            // Has the mouse moved?\n            if (this.mouseX !== this.lastMouseX || this.mouseY !== this.lastMouseY) {\n                // Get the new target helper positions\n                for (this._updateHelperPos._i = 0; this._updateHelperPos._i < this.helpers.length; this._updateHelperPos._i++) {\n                    this.helperTargets[this._updateHelperPos._i] = this._getHelperTarget(this._updateHelperPos._i);\n                }\n\n                this.lastMouseX = this.mouseX;\n                this.lastMouseY = this.mouseY;\n            }\n\n            // Gravitate helpers toward their target positions\n            for (this._updateHelperPos._j = 0; this._updateHelperPos._j < this.helpers.length; this._updateHelperPos._j++) {\n                this._updateHelperPos._lag = this.settings.helperLagBase + (this.helperLagIncrement * this._updateHelperPos._j);\n\n                this.helperPositions[this._updateHelperPos._j] = {\n                    left: this.helperPositions[this._updateHelperPos._j].left + ((this.helperTargets[this._updateHelperPos._j].left - this.helperPositions[this._updateHelperPos._j].left) / this._updateHelperPos._lag),\n                    top: this.helperPositions[this._updateHelperPos._j].top + ((this.helperTargets[this._updateHelperPos._j].top - this.helperPositions[this._updateHelperPos._j].top) / this._updateHelperPos._lag)\n                };\n\n                this.helpers[this._updateHelperPos._j].css(this.helperPositions[this._updateHelperPos._j]);\n            }\n\n            // Let's do this again on the next frame!\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n        },\n\n        /**\n         * Get the helper position for a draggee helper\n         */\n        _getHelperTarget: function(i) {\n            return {\n                left: this.getHelperTargetX() + (this.settings.helperSpacingX * i),\n                top: this.getHelperTargetY() + (this.settings.helperSpacingY * i)\n            };\n        },\n\n        _showDraggee: function() {\n            // Remove the helpers\n            for (var i = 0; i < this.helpers.length; i++) {\n                this.helpers[i].remove();\n            }\n\n            this.helpers = null;\n\n            this.$draggee.show().css('visibility', 'inherit');\n\n            this.onReturnHelpersToDraggees();\n\n            this._returningHelpersToDraggees = false;\n        }\n    },\n    {\n        defaults: {\n            filter: null,\n            singleHelper: false,\n            collapseDraggees: false,\n            removeDraggee: false,\n            copyDraggeeInputValuesToHelper: false,\n            helperOpacity: 1,\n            helper: null,\n            helperBaseZindex: 1000,\n            helperLagBase: 1,\n            helperLagIncrementDividend: 1.5,\n            helperSpacingX: 5,\n            helperSpacingY: 5,\n            onReturnHelpersToDraggees: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Drag-and-drop class\n *\n * Builds on the Drag class by allowing you to set up \"drop targets\"\n * which the dragged elemements can be dropped onto.\n */\nGarnish.DragDrop = Garnish.Drag.extend({\n\n        $dropTargets: null,\n        $activeDropTarget: null,\n\n        /**\n         * Constructor\n         */\n        init: function(settings) {\n            settings = $.extend({}, Garnish.DragDrop.defaults, settings);\n            this.base(settings);\n        },\n\n        updateDropTargets: function() {\n            if (this.settings.dropTargets) {\n                if (typeof this.settings.dropTargets === 'function') {\n                    this.$dropTargets = $(this.settings.dropTargets());\n                }\n                else {\n                    this.$dropTargets = $(this.settings.dropTargets);\n                }\n\n                // Discard if it's an empty array\n                if (!this.$dropTargets.length) {\n                    this.$dropTargets = null;\n                }\n            }\n        },\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.updateDropTargets();\n            this.$activeDropTarget = null;\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            if (this.$dropTargets) {\n                this.onDrag._activeDropTarget = null;\n\n                // is the cursor over any of the drop target?\n                for (this.onDrag._i = 0; this.onDrag._i < this.$dropTargets.length; this.onDrag._i++) {\n                    this.onDrag._elem = this.$dropTargets[this.onDrag._i];\n\n                    if (Garnish.hitTest(this.mouseX, this.mouseY, this.onDrag._elem)) {\n                        this.onDrag._activeDropTarget = this.onDrag._elem;\n                        break;\n                    }\n                }\n\n                // has the drop target changed?\n                if (\n                    (this.$activeDropTarget && this.onDrag._activeDropTarget !== this.$activeDropTarget[0]) ||\n                    (!this.$activeDropTarget && this.onDrag._activeDropTarget !== null)\n                ) {\n                    // was there a previous one?\n                    if (this.$activeDropTarget) {\n                        this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n                    }\n\n                    // remember the new one\n                    if (this.onDrag._activeDropTarget) {\n                        this.$activeDropTarget = $(this.onDrag._activeDropTarget).addClass(this.settings.activeDropTargetClass);\n                    }\n                    else {\n                        this.$activeDropTarget = null;\n                    }\n\n                    this.settings.onDropTargetChange(this.$activeDropTarget);\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.$dropTargets && this.$activeDropTarget) {\n                this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n            }\n\n            this.base();\n        },\n\n        /**\n         * Fade Out Helpers\n         */\n        fadeOutHelpers: function() {\n            for (var i = 0; i < this.helpers.length; i++) {\n                (function($draggeeHelper) {\n                    $draggeeHelper.velocity('fadeOut', {\n                        duration: Garnish.FX_DURATION,\n                        complete: function() {\n                            $draggeeHelper.remove();\n                        }\n                    });\n                })(this.helpers[i]);\n            }\n        }\n    },\n    {\n        defaults: {\n            dropTargets: null,\n            onDropTargetChange: $.noop,\n            activeDropTargetClass: 'active'\n        }\n    });\n\n/** global: Garnish */\n/**\n * Drag-to-move clas\n *\n * Builds on the BaseDrag class by simply moving the dragged element(s) along with the mouse.\n */\nGarnish.DragMove = Garnish.BaseDrag.extend(\n    {\n        onDrag: function(items, settings) {\n            this.$targetItem.css({\n                left: this.mouseX - this.mouseOffsetX,\n                top: this.mouseY - this.mouseOffsetY\n            });\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Drag-to-sort class\n *\n * Builds on the Drag class by allowing you to sort the elements amongst themselves.\n */\nGarnish.DragSort = Garnish.Drag.extend(\n    {\n        $heightedContainer: null,\n        $insertion: null,\n        insertionVisible: false,\n        oldDraggeeIndexes: null,\n        newDraggeeIndexes: null,\n        closestItem: null,\n\n        _midpointVersion: 0,\n        _$prevItem: null,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.DragSort.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Creates the insertion element.\n         */\n        createInsertion: function() {\n            if (this.settings.insertion) {\n                if (typeof this.settings.insertion === 'function') {\n                    return $(this.settings.insertion(this.$draggee));\n                }\n                else {\n                    return $(this.settings.insertion);\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            if (this.settings.magnetStrength !== 1) {\n                this.getHelperTargetX._draggeeOffsetX = this.$draggee.offset().left;\n                return this.getHelperTargetX._draggeeOffsetX + ((this.mouseX - this.mouseOffsetX - this.getHelperTargetX._draggeeOffsetX) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            if (this.settings.magnetStrength !== 1) {\n                this.getHelperTargetY._draggeeOffsetY = this.$draggee.offset().top;\n                return this.getHelperTargetY._draggeeOffsetY + ((this.mouseY - this.mouseOffsetY - this.getHelperTargetY._draggeeOffsetY) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            return true;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            return true;\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.oldDraggeeIndexes = this._getDraggeeIndexes();\n\n            // Are we supposed to be moving the target item to the front, and is it not already there?\n            if (\n                this.settings.moveTargetItemToFront &&\n                this.$draggee.length > 1 &&\n                this._getItemIndex(this.$draggee[0]) > this._getItemIndex(this.$draggee[1])\n            ) {\n                // Reposition the target item before the other draggee items in the DOM\n                this.$draggee.first().insertBefore(this.$draggee[1]);\n            }\n\n            // Create the insertion\n            this.$insertion = this.createInsertion();\n            this._placeInsertionWithDraggee();\n\n            this.closestItem = null;\n            this._clearMidpoints();\n\n            //  Get the closest container that has a height\n            if (this.settings.container) {\n                this.$heightedContainer = $(this.settings.container);\n\n                while (!this.$heightedContainer.height()) {\n                    this.$heightedContainer = this.$heightedContainer.parent();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            // If there's a container set, make sure that we're hovering over it\n            if (this.$heightedContainer && !Garnish.hitTest(this.mouseX, this.mouseY, this.$heightedContainer)) {\n                if (this.closestItem) {\n                    this.closestItem = null;\n                    this._removeInsertion();\n                }\n            }\n            else {\n                // Is there a new closest item?\n                if (\n                    this.closestItem !== (this.closestItem = this._getClosestItem()) &&\n                    this.closestItem !== null\n                ) {\n                    this._updateInsertion();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._removeInsertion();\n\n            // Should we keep the target item where it was?\n            if (!this.settings.moveTargetItemToFront && this.targetItemPositionInDraggee !== 0) {\n                this.$targetItem.insertAfter(this.$draggee.eq(this.targetItemPositionInDraggee));\n            }\n\n            // Return the helpers to the draggees\n            this.returnHelpersToDraggees();\n\n            this.base();\n\n            // Has the item actually moved?\n            this.$items = $().add(this.$items);\n            this.newDraggeeIndexes = this._getDraggeeIndexes();\n\n            if (this.newDraggeeIndexes.join(',') !== this.oldDraggeeIndexes.join(',')) {\n                this.onSortChange();\n            }\n        },\n\n        /**\n         * On Insertion Point Change event\n         */\n        onInsertionPointChange: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('insertionPointChange');\n                this.settings.onInsertionPointChange();\n            }.bind(this));\n        },\n\n        /**\n         * On Sort Change event\n         */\n        onSortChange: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('sortChange');\n                this.settings.onSortChange();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _getItemIndex: function(item) {\n            return $.inArray(item, this.$items);\n        },\n\n        _getDraggeeIndexes: function() {\n            var indexes = [];\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                indexes.push(this._getItemIndex(this.$draggee[i]))\n            }\n\n            return indexes;\n        },\n\n        /**\n         * Returns the closest item to the cursor.\n         */\n        _getClosestItem: function() {\n            this._getClosestItem._closestItem = null;\n\n            // Start by checking the draggee/insertion, if either are visible\n            if (!this.settings.removeDraggee) {\n                this._testForClosestItem(this.$draggee[0]);\n            }\n            else if (this.insertionVisible) {\n                this._testForClosestItem(this.$insertion[0]);\n            }\n\n            // Check items before the draggee\n            if (this._getClosestItem._closestItem) {\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._closestItem)\n            }\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this._getClosestItem._startXDist = this._getClosestItem._lastXDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX) : null;\n            }\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this._getClosestItem._startYDist = this._getClosestItem._lastYDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY) : null;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.first().prev();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis === Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis === Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertBefore(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.prev();\n            }\n\n            // Check items after the draggee\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this._getClosestItem._lastXDist = this._getClosestItem._startXDist;\n            }\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this._getClosestItem._lastYDist = this._getClosestItem._startYDist;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.last().next();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis === Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis === Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertAfter(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.next();\n            }\n\n            // Return the result\n\n            // Ignore if it's the draggee or insertion\n            if (\n                this._getClosestItem._closestItem !== this.$draggee[0] &&\n                (!this.insertionVisible || this._getClosestItem._closestItem !== this.$insertion[0])\n            ) {\n                return this._getClosestItem._closestItem;\n            }\n            else {\n                return null;\n            }\n        },\n\n        _clearMidpoints: function() {\n            this._midpointVersion++;\n            this._$prevItem = null;\n        },\n\n        _getItemMidpoint: function(item) {\n            if ($.data(item, 'midpointVersion') !== this._midpointVersion) {\n                // If this isn't the draggee, temporarily move the draggee to this item\n                this._getItemMidpoint._repositionDraggee = (\n                    !this.settings.axis &&\n                    (!this.settings.removeDraggee || this.insertionVisible) &&\n                    item !== this.$draggee[0] &&\n                    (!this.$insertion || item !== this.$insertion.get(0))\n                );\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Is this the first time we've had to temporarily reposition the draggee since the last midpoint clearing?\n                    if (!this._$prevItem) {\n                        this._$prevItem = (this.insertionVisible ? this.$insertion : this.$draggee).first().prev();\n                    }\n\n                    this._moveDraggeeToItem(item);\n\n                    // Now figure out which element we're actually getting the midpoint of\n                    if (!this.settings.removeDraggee) {\n                        this._getItemMidpoint._$item = this.$draggee;\n                    }\n                    else {\n                        this._getItemMidpoint._$item = this.$insertion;\n                    }\n                }\n                else {\n                    // We're actually getting the midpoint of this item\n                    this._getItemMidpoint._$item = $(item);\n                }\n\n                this._getItemMidpoint._offset = this._getItemMidpoint._$item.offset();\n\n                $.data(item, 'midpoint', {\n                    x: this._getItemMidpoint._offset.left + this._getItemMidpoint._$item.outerWidth() / 2,\n                    y: this._getItemMidpoint._offset.top + this._getItemMidpoint._$item.outerHeight() / 2\n                });\n\n                $.data(item, 'midpointVersion', this._midpointVersion);\n\n                delete this._getItemMidpoint._$item;\n                delete this._getItemMidpoint._offset;\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Move the draggee back\n                    if (this._$prevItem.length) {\n                        this.$draggee.insertAfter(this._$prevItem);\n                    }\n                    else {\n                        this.$draggee.prependTo(this.$draggee.parent());\n                    }\n\n                    this._placeInsertionWithDraggee();\n                }\n            }\n\n            return $.data(item, 'midpoint');\n        },\n\n        _testForClosestItem: function(item) {\n            this._testForClosestItem._midpoint = this._getItemMidpoint(item);\n            this._testForClosestItem._mouseDistX = Math.abs(this._testForClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n            this._testForClosestItem._mouseDistY = Math.abs(this._testForClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n\n            // Don't even consider items that are further away on the Y axis\n            if (\n                this._getClosestItem._closestItem === null ||\n                this._testForClosestItem._mouseDistY < this._getClosestItem._closestItemMouseDistY ||\n                (\n                    this._testForClosestItem._mouseDistY === this._getClosestItem._closestItemMouseDistY &&\n                    this._testForClosestItem._mouseDistX <= this._getClosestItem._closestItemMouseDistX\n                )\n            ) {\n                this._getClosestItem._closestItem = item;\n                this._getClosestItem._closestItemMouseDistX = this._testForClosestItem._mouseDistX;\n                this._getClosestItem._closestItemMouseDistY = this._testForClosestItem._mouseDistY;\n            }\n        },\n\n        /**\n         * Updates the position of the insertion point.\n         */\n        _updateInsertion: function() {\n            if (this.closestItem) {\n                this._moveDraggeeToItem(this.closestItem);\n            }\n\n            // Now that things have shifted around, invalidate the midpoints\n            this._clearMidpoints();\n\n            this.onInsertionPointChange();\n        },\n\n        _moveDraggeeToItem: function(item) {\n            // Going down?\n            if (this.$draggee.index() < $(item).index()) {\n                this.$draggee.insertAfter(item);\n            }\n            else {\n                this.$draggee.insertBefore(item);\n            }\n\n            this._placeInsertionWithDraggee();\n        },\n\n        _placeInsertionWithDraggee: function() {\n            if (this.$insertion) {\n                this.$insertion.insertBefore(this.$draggee.first());\n                this.insertionVisible = true;\n            }\n        },\n\n        /**\n         * Removes the insertion, if it's visible.\n         */\n        _removeInsertion: function() {\n            if (this.insertionVisible) {\n                this.$insertion.remove();\n                this.insertionVisible = false;\n            }\n        }\n    },\n    {\n        defaults: {\n            container: null,\n            insertion: null,\n            moveTargetItemToFront: false,\n            magnetStrength: 1,\n            onInsertionPointChange: $.noop,\n            onSortChange: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * ESC key manager class\n * @deprecated Use Garnish.ShortcutManager instead\n */\nGarnish.EscManager = Garnish.Base.extend(\n    {\n        handlers: null,\n\n        init: function() {\n            this.handlers = [];\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.escapeLatest(ev);\n                }\n            });\n        },\n\n        register: function(obj, func) {\n            this.handlers.push({\n                obj: obj,\n                func: func\n            });\n        },\n\n        unregister: function(obj) {\n            for (var i = this.handlers.length - 1; i >= 0; i--) {\n                if (this.handlers[i].obj === obj) {\n                    this.handlers.splice(i, 1);\n                }\n            }\n        },\n\n        escapeLatest: function(ev) {\n            if (this.handlers.length) {\n                var handler = this.handlers.pop();\n\n                var func;\n\n                if (typeof handler.func === 'function') {\n                    func = handler.func;\n                }\n                else {\n                    func = handler.obj[handler.func];\n                }\n\n                func.call(handler.obj, ev);\n\n                if (typeof handler.obj.trigger === 'function') {\n                    handler.obj.trigger('escape');\n                }\n            }\n        }\n    }\n);\n\nGarnish.escManager = new Garnish.EscManager();\n\n/** global: Garnish */\n/**\n * HUD\n */\nGarnish.HUD = Garnish.Base.extend(\n    {\n        $trigger: null,\n        $fixedTriggerParent: null,\n        $hud: null,\n        $tip: null,\n        $body: null,\n        $header: null,\n        $footer: null,\n        $mainContainer: null,\n        $main: null,\n        $shade: null,\n\n        showing: false,\n        orientation: null,\n\n        updatingSizeAndPosition: false,\n        windowWidth: null,\n        windowHeight: null,\n        scrollTop: null,\n        scrollLeft: null,\n        mainWidth: null,\n        mainHeight: null,\n\n        /**\n         * Constructor\n         */\n        init: function(trigger, bodyContents, settings) {\n\n            this.$trigger = $(trigger);\n\n            this.setSettings(settings, Garnish.HUD.defaults);\n            this.on('show', this.settings.onShow);\n            this.on('hide', this.settings.onHide);\n            this.on('submit', this.settings.onSubmit);\n\n            if (typeof Garnish.HUD.activeHUDs === 'undefined') {\n                Garnish.HUD.activeHUDs = {};\n            }\n\n            this.$shade = $('<div/>', {'class': this.settings.shadeClass});\n            this.$hud = $('<div/>', {'class': this.settings.hudClass}).data('hud', this);\n            this.$tip = $('<div/>', {'class': this.settings.tipClass}).appendTo(this.$hud);\n            this.$body = $('<form/>', {'class': this.settings.bodyClass}).appendTo(this.$hud);\n            this.$mainContainer = $('<div/>', {'class': this.settings.mainContainerClass}).appendTo(this.$body);\n            this.$main = $('<div/>', {'class': this.settings.mainClass}).appendTo(this.$mainContainer);\n\n            this.updateBody(bodyContents);\n\n            // See if the trigger is fixed\n            var $parent = this.$trigger;\n\n            do {\n                if ($parent.css('position') === 'fixed') {\n                    this.$fixedTriggerParent = $parent;\n                    break;\n                }\n\n                $parent = $parent.offsetParent();\n            }\n            while ($parent.length && $parent.prop('nodeName') !== 'HTML');\n\n            if (this.$fixedTriggerParent) {\n                this.$hud.css('position', 'fixed');\n            }\n            else {\n                this.$hud.css('position', 'absolute');\n            }\n\n            // Hide the HUD until it gets positioned\n\t\t\tthis.$hud.css('opacity', 0);\n            this.show();\n            this.$hud.css('opacity', 1);\n\n            this.addListener(this.$body, 'submit', '_handleSubmit');\n\n            if (this.settings.hideOnShadeClick) {\n                this.addListener(this.$shade, 'tap,click', 'hide');\n            }\n\n            if (this.settings.closeBtn) {\n                this.addListener(this.settings.closeBtn, 'activate', 'hide');\n            }\n\n            this.addListener(Garnish.$win, 'resize', 'updateSizeAndPosition');\n            this.addListener(this.$main, 'resize', 'updateSizeAndPosition');\n            if (!this.$fixedTriggerParent && Garnish.$scrollContainer[0] !== Garnish.$win[0]) {\n                this.addListener(Garnish.$scrollContainer, 'scroll', 'updateSizeAndPosition');\n            }\n        },\n\n        /**\n         * Update the body contents\n         */\n        updateBody: function(bodyContents) {\n            // Cleanup\n            this.$main.html('');\n\n            if (this.$header) {\n                this.$hud.removeClass('has-header');\n                this.$header.remove();\n                this.$header = null;\n            }\n\n            if (this.$footer) {\n                this.$hud.removeClass('has-footer');\n                this.$footer.remove();\n                this.$footer = null;\n            }\n\n            // Append the new body contents\n            this.$main.append(bodyContents);\n\n            // Look for a header and footer\n            var $header = this.$main.find('.' + this.settings.headerClass + ':first'),\n                $footer = this.$main.find('.' + this.settings.footerClass + ':first');\n\n            if ($header.length) {\n                this.$header = $header.insertBefore(this.$mainContainer);\n                this.$hud.addClass('has-header');\n            }\n\n            if ($footer.length) {\n                this.$footer = $footer.insertAfter(this.$mainContainer);\n                this.$hud.addClass('has-footer');\n            }\n        },\n\n        /**\n         * Show\n         */\n        show: function(ev) {\n            if (ev && ev.stopPropagation) {\n                ev.stopPropagation();\n            }\n\n            if (this.showing) {\n                return;\n            }\n\n            if (this.settings.closeOtherHUDs) {\n                for (var hudID in Garnish.HUD.activeHUDs) {\n                    if (!Garnish.HUD.activeHUDs.hasOwnProperty(hudID)) {\n                        continue;\n                    }\n                    Garnish.HUD.activeHUDs[hudID].hide();\n                }\n            }\n\n            // Move it to the end of <body> so it gets the highest sub-z-index\n            this.$shade.appendTo(Garnish.$bod);\n            this.$hud.appendTo(Garnish.$bod);\n\n            this.$hud.show();\n            this.$shade.show();\n            this.showing = true;\n            Garnish.HUD.activeHUDs[this._namespace] = this;\n\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.hideOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n            }\n\n            this.onShow();\n            this.enable();\n\n            if (this.updateRecords()) {\n                // Prevent the browser from jumping\n                this.$hud.css('top', Garnish.$scrollContainer.scrollTop());\n\n                this.updateSizeAndPosition(true);\n            }\n        },\n\n        onShow: function() {\n            this.trigger('show');\n        },\n\n        updateRecords: function() {\n            var changed = false;\n            changed = (this.windowWidth !== (this.windowWidth = Garnish.$win.width())) || changed;\n            changed = (this.windowHeight !== (this.windowHeight = Garnish.$win.height())) || changed;\n            changed = (this.scrollTop !== (this.scrollTop = Garnish.$scrollContainer.scrollTop())) || changed;\n            changed = (this.scrollLeft !== (this.scrollLeft = Garnish.$scrollContainer.scrollLeft())) || changed;\n            changed = (this.mainWidth !== (this.mainWidth = this.$main.outerWidth())) || changed;\n            changed = (this.mainHeight !== (this.mainHeight = this.$main.outerHeight())) || changed;\n            return changed;\n        },\n\n        updateSizeAndPosition: function(force) {\n            if (force === true || (this.updateRecords() && !this.updatingSizeAndPosition)) {\n                this.updatingSizeAndPosition = true;\n                Garnish.requestAnimationFrame(this.updateSizeAndPositionInternal.bind(this));\n            }\n        },\n\n        updateSizeAndPositionInternal: function() {\n            var triggerWidth,\n                triggerHeight,\n                triggerOffset,\n                windowScrollLeft,\n                windowScrollTop,\n                scrollContainerTriggerOffset,\n                scrollContainerScrollLeft,\n                scrollContainerScrollTop,\n                hudBodyWidth,\n                hudBodyHeight;\n\n            // Get the window sizes and trigger offset\n\n            windowScrollLeft = Garnish.$win.scrollLeft();\n            windowScrollTop = Garnish.$win.scrollTop();\n\n            // Get the trigger's dimensions\n            triggerWidth = this.$trigger.outerWidth();\n            triggerHeight = this.$trigger.outerHeight();\n\n            // Get the offsets for each side of the trigger element\n            triggerOffset = this.$trigger.offset();\n\n            if (this.$fixedTriggerParent) {\n                triggerOffset.left -= windowScrollLeft;\n                triggerOffset.top -= windowScrollTop;\n\n                scrollContainerTriggerOffset = triggerOffset;\n\n                windowScrollLeft = 0;\n                windowScrollTop = 0;\n                scrollContainerScrollLeft = 0;\n                scrollContainerScrollTop = 0;\n            }\n            else {\n                scrollContainerTriggerOffset = Garnish.getOffset(this.$trigger);\n\n                scrollContainerScrollLeft = Garnish.$scrollContainer.scrollLeft();\n                scrollContainerScrollTop = Garnish.$scrollContainer.scrollTop();\n            }\n\n            triggerOffset.right = triggerOffset.left + triggerWidth;\n            triggerOffset.bottom = triggerOffset.top + triggerHeight;\n\n            scrollContainerTriggerOffset.right = scrollContainerTriggerOffset.left + triggerWidth;\n            scrollContainerTriggerOffset.bottom = scrollContainerTriggerOffset.top + triggerHeight;\n\n            // Get the HUD dimensions\n            this.$hud.css({\n                width: ''\n            });\n\n            this.$mainContainer.css({\n                height: '',\n                'overflow-x': '',\n                'overflow-y': ''\n            });\n\n            hudBodyWidth = this.$body.width();\n            hudBodyHeight = this.$body.height();\n\n            // Determine the best orientation for the HUD\n\n            // Find the actual available top/right/bottom/left clearances\n            var clearances = {\n                bottom: this.windowHeight + scrollContainerScrollTop - scrollContainerTriggerOffset.bottom,\n                top: scrollContainerTriggerOffset.top - scrollContainerScrollTop,\n                right: this.windowWidth + scrollContainerScrollLeft - scrollContainerTriggerOffset.right,\n                left: scrollContainerTriggerOffset.left - scrollContainerScrollLeft\n            };\n\n            // Find the first position that has enough room\n            this.orientation = null;\n\n            for (var i = 0; i < this.settings.orientations.length; i++) {\n                var orientation = this.settings.orientations[i],\n                    relevantSize = (orientation === 'top' || orientation === 'bottom' ? hudBodyHeight : hudBodyWidth);\n\n                if (clearances[orientation] - (this.settings.windowSpacing + this.settings.triggerSpacing) >= relevantSize) {\n                    // This is the first orientation that has enough room in order of preference, so we'll go with this\n                    this.orientation = orientation;\n                    break;\n                }\n\n                if (!this.orientation || clearances[orientation] > clearances[this.orientation]) {\n                    // Use this as a fallback as it's the orientation with the most clearance so far\n                    this.orientation = orientation;\n                }\n            }\n\n            // Just in case...\n            if (!this.orientation || $.inArray(this.orientation, ['bottom', 'top', 'right', 'left']) === -1) {\n                this.orientation = 'bottom'\n            }\n\n            // Update the tip class\n            if (this.tipClass) {\n                this.$tip.removeClass(this.tipClass);\n            }\n\n            this.tipClass = this.settings.tipClass + '-' + Garnish.HUD.tipClasses[this.orientation];\n            this.$tip.addClass(this.tipClass);\n\n            // Make sure the HUD body is within the allowed size\n\n            var maxHudBodyWidth,\n                maxHudBodyHeight;\n\n            if (this.orientation === 'top' || this.orientation === 'bottom') {\n                maxHudBodyWidth = this.windowWidth - this.settings.windowSpacing * 2;\n                maxHudBodyHeight = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n            }\n            else {\n                maxHudBodyWidth = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n                maxHudBodyHeight = this.windowHeight - this.settings.windowSpacing * 2;\n            }\n\n            if (maxHudBodyWidth < this.settings.minBodyWidth) {\n                maxHudBodyWidth = this.settings.minBodyWidth;\n            }\n\n            if (maxHudBodyHeight < this.settings.minBodyHeight) {\n                maxHudBodyHeight = this.settings.minBodyHeight;\n            }\n\n            if (hudBodyWidth > maxHudBodyWidth || hudBodyWidth < this.settings.minBodyWidth) {\n                if (hudBodyWidth > maxHudBodyWidth) {\n                    hudBodyWidth = maxHudBodyWidth;\n                }\n                else {\n                    hudBodyWidth = this.settings.minBodyWidth;\n                }\n\n                this.$hud.width(hudBodyWidth);\n\n                // Is there any overflow now?\n                if (this.mainWidth > maxHudBodyWidth) {\n                    this.$mainContainer.css('overflow-x', 'scroll');\n                }\n\n                // The height may have just changed\n                hudBodyHeight = this.$body.height();\n            }\n\n            if (hudBodyHeight > maxHudBodyHeight || hudBodyHeight < this.settings.minBodyHeight) {\n                if (hudBodyHeight > maxHudBodyHeight) {\n                    hudBodyHeight = maxHudBodyHeight;\n                }\n                else {\n                    hudBodyHeight = this.settings.minBodyHeight;\n                }\n\n                var mainHeight = hudBodyHeight;\n\n                if (this.$header) {\n                    mainHeight -= this.$header.outerHeight();\n                }\n\n                if (this.$footer) {\n                    mainHeight -= this.$footer.outerHeight();\n                }\n\n                this.$mainContainer.height(mainHeight);\n\n                // Is there any overflow now?\n                if (this.mainHeight > mainHeight) {\n                    this.$mainContainer.css('overflow-y', 'scroll');\n                }\n            }\n\n            // Set the HUD/tip positions\n            var triggerCenter, left, top;\n\n            if (this.orientation === 'top' || this.orientation === 'bottom') {\n                // Center the HUD horizontally\n                var maxLeft = (this.windowWidth + windowScrollLeft) - (hudBodyWidth + this.settings.windowSpacing);\n                var minLeft = (windowScrollLeft + this.settings.windowSpacing);\n                triggerCenter = triggerOffset.left + Math.round(triggerWidth / 2);\n                left = triggerCenter - Math.round(hudBodyWidth / 2);\n\n                if (left > maxLeft) {\n                    left = maxLeft;\n                }\n                if (left < minLeft) {\n                    left = minLeft;\n                }\n\n                this.$hud.css('left', left);\n\n                var tipLeft = (triggerCenter - left) - (this.settings.tipWidth / 2);\n                this.$tip.css({left: tipLeft, top: ''});\n\n                if (this.orientation === 'top') {\n                    top = triggerOffset.top - (hudBodyHeight + this.settings.triggerSpacing);\n                    this.$hud.css('top', top);\n                }\n                else {\n                    top = triggerOffset.bottom + this.settings.triggerSpacing;\n                    this.$hud.css('top', top);\n                }\n            }\n            else {\n                // Center the HUD vertically\n                var maxTop = (this.windowHeight + windowScrollTop) - (hudBodyHeight + this.settings.windowSpacing);\n                var minTop = (windowScrollTop + this.settings.windowSpacing);\n                triggerCenter = triggerOffset.top + Math.round(triggerHeight / 2);\n                top = triggerCenter - Math.round(hudBodyHeight / 2);\n\n                if (top > maxTop) {\n                    top = maxTop;\n                }\n                if (top < minTop) {\n                    top = minTop;\n                }\n\n                this.$hud.css('top', top);\n\n                var tipTop = (triggerCenter - top) - (this.settings.tipWidth / 2);\n                this.$tip.css({top: tipTop, left: ''});\n\n\n                if (this.orientation === 'left') {\n                    left = triggerOffset.left - (hudBodyWidth + this.settings.triggerSpacing);\n                    this.$hud.css('left', left);\n                }\n                else {\n                    left = triggerOffset.right + this.settings.triggerSpacing;\n                    this.$hud.css('left', left);\n                }\n            }\n\n            this.updatingSizeAndPosition = false;\n            this.trigger('updateSizeAndPosition');\n        },\n\n        /**\n         * Hide\n         */\n        hide: function() {\n            if (!this.showing) {\n                return;\n            }\n\n            this.disable();\n\n            this.$hud.hide();\n            this.$shade.hide();\n\n            this.showing = false;\n            delete Garnish.HUD.activeHUDs[this._namespace];\n            Garnish.shortcutManager.removeLayer();\n            this.onHide();\n        },\n\n        onHide: function() {\n            this.trigger('hide');\n        },\n\n        toggle: function() {\n            if (this.showing) {\n                this.hide();\n            }\n            else {\n                this.show();\n            }\n        },\n\n        submit: function() {\n            this.onSubmit();\n        },\n\n        onSubmit: function() {\n            this.trigger('submit');\n        },\n\n        _handleSubmit: function(ev) {\n            ev.preventDefault();\n            this.submit();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$hud) {\n                this.$hud.remove();\n            }\n\n            if (this.$shade) {\n                this.$shade.remove();\n            }\n\n            this.base();\n        }\n    },\n    {\n        tipClasses: {bottom: 'top', top: 'bottom', right: 'left', left: 'right'},\n\n        defaults: {\n            shadeClass: 'hud-shade',\n            hudClass: 'hud',\n            tipClass: 'tip',\n            bodyClass: 'body',\n            headerClass: 'hud-header',\n            footerClass: 'hud-footer',\n            mainContainerClass: 'main-container',\n            mainClass: 'main',\n            orientations: ['bottom', 'top', 'right', 'left'],\n            triggerSpacing: 10,\n            windowSpacing: 10,\n            tipWidth: 30,\n            minBodyWidth: 200,\n            minBodyHeight: 0,\n            onShow: $.noop,\n            onHide: $.noop,\n            onSubmit: $.noop,\n            closeBtn: null,\n            closeOtherHUDs: true,\n            hideOnEsc: true,\n            hideOnShadeClick: true,\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Menu Button\n */\nGarnish.MenuBtn = Garnish.Base.extend(\n    {\n        $btn: null,\n        menu: null,\n        showingMenu: false,\n        disabled: true,\n\n        /**\n         * Constructor\n         */\n        init: function(btn, menu, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(menu)) {\n                // (btn, settings)\n                settings = menu;\n                menu = null;\n            }\n\n            this.$btn = $(btn);\n            var $menu;\n\n            // Is this already a menu button?\n            if (this.$btn.data('menubtn')) {\n                // Grab the old MenuBtn's menu container\n                if (!menu) {\n                    $menu = this.$btn.data('menubtn').menu.$container;\n                }\n\n                Garnish.log('Double-instantiating a menu button on an element');\n                this.$btn.data('menubtn').destroy();\n            }\n            else if (!menu) {\n                $menu = this.$btn.next('.menu').detach();\n            }\n\n            this.$btn.data('menubtn', this);\n\n            this.setSettings(settings, Garnish.MenuBtn.defaults);\n\n            this.menu = menu || new Garnish.CustomSelect($menu);\n            this.menu.$anchor = $(this.settings.menuAnchor || this.$btn);\n            this.menu.on('optionselect', function(ev) {\n                this.onOptionSelect(ev.selectedOption);\n            }.bind(this));\n\n            this.$btn.attr({\n                'tabindex': 0,\n                'aria-controls': this.menu.menuId,\n                'aria-haspopup': 'listbox',\n                'aria-expanded': 'false'\n            });\n\n            this.menu.on('hide', this.onMenuHide.bind(this));\n            this.addListener(this.$btn, 'mousedown', 'onMouseDown');\n            this.addListener(this.$btn, 'keydown', 'onKeyDown');\n            this.addListener(this.$btn, 'blur', 'onBlur');\n            this.enable();\n        },\n\n        onBlur: function() {\n            if (this.showingMenu) {\n                Garnish.requestAnimationFrame(function() {\n                    if (!$.contains(this.menu.$container.get(0), document.activeElement)) {\n                        this.hideMenu();\n                    }\n                }.bind(this));\n            }\n        },\n\n        onKeyDown: function(ev) {\n            var $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n\n                    const $currentOption = this.menu.$options.filter('.hover');\n                    if ($currentOption.length > 0) {\n                        $currentOption.get(0).click();\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        const $currentOption = this.menu.$options.filter('.hover');\n                        if ($currentOption.length > 0) {\n                            $currentOption.get(0).click();\n                        }\n                    } else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.first();\n                        }\n\n                        this.focusOption($option);\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index + 1) < this.menu.$options.length) {\n                                        $option = $(this.menu.$options[(index + 1)]);\n                                    }\n                                }\n                            }\n                        }.bind(this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[0]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.first();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index - 1) >= 0) {\n                                        $option = $(this.menu.$options[(index - 1)]);\n                                    }\n                                }\n                            }\n                        }.bind(this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[(this.menu.$options.length - 1)]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.last();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n            }\n        },\n\n        focusOption: function($option) {\n            this.menu.$options.removeClass('hover');\n\n            $option.addClass('hover');\n\n            this.menu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n            this.$btn.attr('aria-activedescendant', $option.attr('id'));\n        },\n\n        onMouseDown: function(ev) {\n            if (ev.which !== Garnish.PRIMARY_CLICK || Garnish.isCtrlKeyPressed(ev) || ev.target.nodeName === 'INPUT') {\n                return;\n            }\n\n            ev.preventDefault();\n\n            if (this.showingMenu) {\n                this.hideMenu();\n            }\n            else {\n                this.showMenu();\n            }\n        },\n\n        showMenu: function() {\n            if (this.disabled) {\n                return;\n            }\n\n            this.menu.show();\n            this.$btn.addClass('active');\n            this.$btn.trigger('focus');\n            this.$btn.attr('aria-expanded', 'true');\n\n            this.showingMenu = true;\n\n            setTimeout(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'onMouseDown');\n            }.bind(this), 1);\n        },\n\n        hideMenu: function() {\n            this.menu.hide();\n        },\n\n        onMenuHide: function() {\n            this.$btn.removeClass('active');\n            this.$btn.attr('aria-expanded', 'false');\n            this.showingMenu = false;\n\n            this.removeListener(Garnish.$doc, 'mousedown');\n        },\n\n        onOptionSelect: function(option) {\n            this.settings.onOptionSelect(option);\n            this.trigger('optionSelect', {option: option});\n        },\n\n        enable: function() {\n            this.disabled = false;\n        },\n\n        disable: function() {\n            this.disabled = true;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$btn.removeData('menubtn');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuAnchor: null,\n            onOptionSelect: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Mixed input\n *\n * @todo RTL support, in the event that the input doesn't have dir=\"ltr\".\n */\nGarnish.MixedInput = Garnish.Base.extend(\n    {\n        $container: null,\n        elements: null,\n        focussedElement: null,\n        blurTimeout: null,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n            this.setSettings(settings, Garnish.MixedInput.defaults);\n\n            this.elements = [];\n\n            // Allow the container to receive focus\n            this.$container.attr('tabindex', 0);\n            this.addListener(this.$container, 'focus', 'onFocus');\n        },\n\n        getElementIndex: function($elem) {\n            return $.inArray($elem, this.elements);\n        },\n\n        isText: function($elem) {\n            return ($elem.prop('nodeName') === 'INPUT');\n        },\n\n        onFocus: function() {\n            // Set focus to the first element\n            if (this.elements.length) {\n                var $elem = this.elements[0];\n                this.setFocus($elem);\n                this.setCarotPos($elem, 0);\n            }\n            else {\n                this.addTextElement();\n            }\n        },\n\n        addTextElement: function(index) {\n            var text = new TextElement(this);\n            this.addElement(text.$input, index);\n            return text;\n        },\n\n        addElement: function($elem, index) {\n            // Was a target index passed, and is it valid?\n            if (typeof index === 'undefined') {\n                if (this.focussedElement) {\n                    var focussedElement = this.focussedElement,\n                        focussedElementIndex = this.getElementIndex(focussedElement);\n\n                    // Is the focus on a text element?\n                    if (this.isText(focussedElement)) {\n                        var selectionStart = focussedElement.prop('selectionStart'),\n                            selectionEnd = focussedElement.prop('selectionEnd'),\n                            val = focussedElement.val(),\n                            preVal = val.substring(0, selectionStart),\n                            postVal = val.substr(selectionEnd);\n\n                        if (preVal && postVal) {\n                            // Split the input into two\n                            focussedElement.val(preVal).trigger('change');\n                            var newText = new TextElement(this);\n                            newText.$input.val(postVal).trigger('change');\n                            this.addElement(newText.$input, focussedElementIndex + 1);\n\n                            // Insert the new element in between them\n                            index = focussedElementIndex + 1;\n                        }\n                        else if (!preVal) {\n                            // Insert the new element before this one\n                            index = focussedElementIndex;\n                        }\n                        else {\n                            // Insert it after this one\n                            index = focussedElementIndex + 1;\n                        }\n                    }\n                    else {\n                        // Just insert the new one after this one\n                        index = focussedElementIndex + 1;\n                    }\n                }\n                else {\n                    // Insert the new element at the end\n                    index = this.elements.length;\n                }\n            }\n\n            // Add the element\n            if (typeof this.elements[index] !== 'undefined') {\n                $elem.insertBefore(this.elements[index]);\n                this.elements.splice(index, 0, $elem);\n            }\n            else {\n                // Just for safe measure, set the index to what it really will be\n                index = this.elements.length;\n\n                this.$container.append($elem);\n                this.elements.push($elem);\n            }\n\n            // Make sure that there are text elements surrounding all non-text elements\n            if (!this.isText($elem)) {\n                // Add a text element before?\n                if (index === 0 || !this.isText(this.elements[index - 1])) {\n                    this.addTextElement(index);\n                    index++;\n                }\n\n                // Add a text element after?\n                if (index === this.elements.length - 1 || !this.isText(this.elements[index + 1])) {\n                    this.addTextElement(index + 1);\n                }\n            }\n\n            // Add event listeners\n            this.addListener($elem, 'click', function() {\n                this.setFocus($elem);\n            });\n\n            // Set focus to the new element\n            setTimeout(function() {\n                this.setFocus($elem);\n            }.bind(this), 1);\n        },\n\n        removeElement: function($elem) {\n            var index = this.getElementIndex($elem);\n            if (index !== -1) {\n                this.elements.splice(index, 1);\n\n                if (!this.isText($elem)) {\n                    // Combine the two now-adjacent text elements\n                    var $prevElem = this.elements[index - 1],\n                        $nextElem = this.elements[index];\n\n                    if (this.isText($prevElem) && this.isText($nextElem)) {\n                        var prevElemVal = $prevElem.val(),\n                            newVal = prevElemVal + $nextElem.val();\n                        $prevElem.val(newVal).trigger('change');\n                        this.removeElement($nextElem);\n                        this.setFocus($prevElem);\n                        this.setCarotPos($prevElem, prevElemVal.length);\n                    }\n                }\n\n                $elem.remove();\n            }\n        },\n\n        setFocus: function($elem) {\n            this.$container.addClass('focus');\n\n            if (!this.focussedElement) {\n                // Prevent the container from receiving focus\n                // as long as one of its elements has focus\n                this.$container.attr('tabindex', '-1');\n            }\n            else {\n                // Blur the previously-focussed element\n                this.blurFocussedElement();\n            }\n\n            $elem.attr('tabindex', '0');\n            $elem.focus();\n            this.focussedElement = $elem;\n\n            this.addListener($elem, 'blur', function() {\n                this.blurTimeout = setTimeout(function() {\n                    if (this.focussedElement === $elem) {\n                        this.blurFocussedElement();\n                        this.focussedElement = null;\n                        this.$container.removeClass('focus');\n\n                        // Get ready for future focus\n                        this.$container.attr('tabindex', '0');\n                    }\n                }.bind(this), 1);\n            });\n        },\n\n        blurFocussedElement: function() {\n            this.removeListener(this.focussedElement, 'blur');\n            this.focussedElement.attr('tabindex', '-1');\n        },\n\n        focusPreviousElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index > 0) {\n                var $elem = this.elements[index - 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the end\n                if (this.isText($elem)) {\n                    var length = $elem.val().length;\n                    this.setCarotPos($elem, length);\n                }\n            }\n        },\n\n        focusNextElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index < this.elements.length - 1) {\n                var $elem = this.elements[index + 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the beginning\n                if (this.isText($elem)) {\n                    this.setCarotPos($elem, 0)\n                }\n            }\n        },\n\n        setCarotPos: function($elem, pos) {\n            $elem.prop('selectionStart', pos);\n            $elem.prop('selectionEnd', pos);\n        }\n\n    });\n\n\nvar TextElement = Garnish.Base.extend({\n\n        parentInput: null,\n        $input: null,\n        $stage: null,\n        val: null,\n        focussed: false,\n        interval: null,\n\n        init: function(parentInput) {\n            this.parentInput = parentInput;\n\n            this.$input = $('<input type=\"text\"/>').appendTo(this.parentInput.$container);\n            this.$input.css('margin-right', (2 - TextElement.padding) + 'px');\n\n            this.setWidth();\n\n            this.addListener(this.$input, 'focus', 'onFocus');\n            this.addListener(this.$input, 'blur', 'onBlur');\n            this.addListener(this.$input, 'keydown', 'onKeyDown');\n            this.addListener(this.$input, 'change', 'checkInput');\n        },\n\n        getIndex: function() {\n            return this.parentInput.getElementIndex(this.$input);\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                position: 'absolute',\n                top: -9999,\n                left: -9999,\n                wordWrap: 'nowrap'\n            });\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getTextWidth: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (val) {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Spaces\n                val = val.replace(/ /g, '&nbsp;');\n            }\n\n            this.$stage.html(val);\n            this.stageWidth = this.$stage.width();\n            return this.stageWidth;\n        },\n\n        onFocus: function() {\n            this.focussed = true;\n            this.interval = setInterval(this.checkInput.bind(this), Garnish.NiceText.interval);\n            this.checkInput();\n        },\n\n        onBlur: function() {\n            this.focussed = false;\n            clearInterval(this.interval);\n            this.checkInput();\n        },\n\n        onKeyDown: function(ev) {\n            setTimeout(this.checkInput.bind(this), 1);\n\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    if (this.$input.prop('selectionStart') === 0 && this.$input.prop('selectionEnd') === 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    if (this.$input.prop('selectionStart') === this.val.length && this.$input.prop('selectionEnd') === this.val.length) {\n                        // Set focus to the next element\n                        this.parentInput.focusNextElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.DELETE_KEY: {\n                    if (this.$input.prop('selectionStart') === 0 && this.$input.prop('selectionEnd') === 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                        ev.preventDefault();\n                    }\n                }\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        setVal: function(val) {\n            this.$input.val(val);\n            this.checkInput();\n        },\n\n        checkInput: function() {\n            // Has the value changed?\n            var changed = (this.val !== this.getVal());\n            if (changed) {\n                this.setWidth();\n                this.onChange();\n            }\n\n            return changed;\n        },\n\n        setWidth: function() {\n            // has the width changed?\n            if (this.stageWidth !== this.getTextWidth(this.val)) {\n                // update the textarea width\n                var width = this.stageWidth + TextElement.padding;\n                this.$input.width(width);\n            }\n        },\n\n        onChange: $.noop\n    },\n    {\n        padding: 20\n    }\n);\n\n/** global: Garnish */\n/**\n * Modal\n */\nGarnish.Modal = Garnish.Base.extend(\n    {\n        $container: null,\n        $shade: null,\n\n        visible: false,\n\n        dragger: null,\n\n        desiredWidth: null,\n        desiredHeight: null,\n        resizeDragger: null,\n        resizeStartWidth: null,\n        resizeStartHeight: null,\n\n        init: function(container, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n            }\n\n            this.setSettings(settings, Garnish.Modal.defaults);\n\n            // Create the shade\n            this.$shade = $('<div class=\"' + this.settings.shadeClass + '\"/>');\n\n            // If the container is already set, drop the shade below it.\n            if (container) {\n                this.$shade.insertBefore(container);\n            }\n            else {\n                this.$shade.appendTo(Garnish.$bod);\n            }\n\n            if (container) {\n                Garnish.addModalAttributes(container);\n                this.setContainer(container);\n\n                if (this.settings.autoShow) {\n                    this.show();\n                }\n            }\n\n            Garnish.Modal.instances.push(this);\n        },\n\n        setContainer: function(container) {\n            this.$container = $(container);\n\n            // Is this already a modal?\n            if (this.$container.data('modal')) {\n                Garnish.log('Double-instantiating a modal on an element');\n                this.$container.data('modal').destroy();\n            }\n\n            this.$container.data('modal', this);\n\n            if (this.settings.draggable) {\n                this.dragger = new Garnish.DragMove(this.$container, {\n                    handle: (this.settings.dragHandleSelector ? this.$container.find(this.settings.dragHandleSelector) : this.$container)\n                });\n            }\n\n            if (this.settings.resizable) {\n                var $resizeDragHandle = $('<div class=\"resizehandle\"/>').appendTo(this.$container);\n\n                this.resizeDragger = new Garnish.BaseDrag($resizeDragHandle, {\n                    onDragStart: this._handleResizeStart.bind(this),\n                    onDrag: this._handleResize.bind(this)\n                });\n            }\n\n            this.addListener(this.$container, 'click', function(ev) {\n                ev.stopPropagation();\n            });\n\n            // Show it if we're late to the party\n            if (this.visible) {\n                this.show();\n            }\n        },\n\n        show: function() {\n            // Close other modals as needed\n            if (this.settings.closeOtherModals && Garnish.Modal.visibleModal && Garnish.Modal.visibleModal !== this) {\n                Garnish.Modal.visibleModal.hide();\n            }\n\n            if (this.$container) {\n                // Move it to the end of <body> so it gets the highest sub-z-index\n                this.$shade.appendTo(Garnish.$bod);\n                this.$container.appendTo(Garnish.$bod);\n\n                this.$container.show();\n                this.updateSizeAndPosition();\n\n                this.$shade.velocity('fadeIn', {\n                    duration: 50,\n                    complete: function() {\n                        this.$container.velocity('fadeIn', {\n                            complete: function() {\n                                this.updateSizeAndPosition();\n                                Garnish.setFocusWithin(this.$container);\n                                this.onFadeIn();\n                            }.bind(this)\n                        });\n                    }.bind(this)\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.addListener(this.$shade, 'click', 'hide');\n                }\n\n                // Add focus trap\n                Garnish.trapFocusWithin(this.$container);\n\n                this.addListener(Garnish.$win, 'resize', '_handleWindowResize');\n            }\n\n            this.enable();\n\n            if (!this.visible) {\n                this.visible = true;\n                Garnish.Modal.visibleModal = this;\n\n                Garnish.shortcutManager.addLayer();\n\n                if (this.settings.hideOnEsc) {\n                    Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n                }\n\n                Garnish.hideModalBackgroundContent(this.$container);\n\n                this.trigger('show');\n                this.settings.onShow();\n            }\n        },\n\n        quickShow: function() {\n            this.show();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n        },\n\n        hide: function(ev) {\n            if (!this.visible) {\n                return;\n            }\n\n            this.disable();\n\n            if (ev) {\n                ev.stopPropagation();\n            }\n\n            if (this.$container) {\n                this.$container.velocity('fadeOut', {duration: Garnish.FX_DURATION});\n                this.$shade.velocity('fadeOut', {\n                    duration: Garnish.FX_DURATION,\n                    complete: this.onFadeOut.bind(this)\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.removeListener(this.$shade, 'click');\n                }\n\n                this.removeListener(Garnish.$win, 'resize');\n            }\n\n            if (this.settings.triggerElement) {\n                this.settings.triggerElement.focus();\n            }\n\n            this.visible = false;\n            Garnish.Modal.visibleModal = null;\n            Garnish.shortcutManager.removeLayer();\n            this.trigger('hide');\n            Garnish.resetBackgroundContentVisibility(this.$container);\n            this.settings.onHide();\n        },\n\n        quickHide: function() {\n            this.hide();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.css('opacity', 0).hide();\n\n                this.$shade.velocity('stop');\n                this.$shade.css('opacity', 0).hide();\n            }\n        },\n\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            this.$container.css({\n                'width': (this.desiredWidth ? Math.max(this.desiredWidth, 200) : ''),\n                'height': (this.desiredHeight ? Math.max(this.desiredHeight, 200) : ''),\n                'min-width': '',\n                'min-height': ''\n            });\n\n            // Set the width first so that the height can adjust for the width\n            this.updateSizeAndPosition._windowWidth = Garnish.$win.width();\n            this.updateSizeAndPosition._width = Math.min(this.getWidth(), this.updateSizeAndPosition._windowWidth - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'width': this.updateSizeAndPosition._width,\n                'min-width': this.updateSizeAndPosition._width,\n                'left': Math.round((this.updateSizeAndPosition._windowWidth - this.updateSizeAndPosition._width) / 2)\n            });\n\n            // Now set the height\n            this.updateSizeAndPosition._windowHeight = Garnish.$win.height();\n            this.updateSizeAndPosition._height = Math.min(this.getHeight(), this.updateSizeAndPosition._windowHeight - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'height': this.updateSizeAndPosition._height,\n                'min-height': this.updateSizeAndPosition._height,\n                'top': Math.round((this.updateSizeAndPosition._windowHeight - this.updateSizeAndPosition._height) / 2)\n            });\n\n            this.trigger('updateSizeAndPosition');\n        },\n\n        onFadeIn: function() {\n            this.trigger('fadeIn');\n            this.settings.onFadeIn();\n        },\n\n        onFadeOut: function() {\n            this.trigger('fadeOut');\n            this.settings.onFadeOut();\n        },\n\n        getHeight: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the height of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            this.getHeight._height = this.$container.outerHeight();\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getHeight._height;\n        },\n\n        getWidth: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the width of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            // Chrome might be 1px shy here for some reason\n            this.getWidth._width = this.$container.outerWidth() + 1;\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getWidth._width;\n        },\n\n        _handleWindowResize: function(ev) {\n            // ignore propagated resize events\n            if (ev.target === window) {\n                this.updateSizeAndPosition();\n            }\n        },\n\n        _handleResizeStart: function() {\n            this.resizeStartWidth = this.getWidth();\n            this.resizeStartHeight = this.getHeight();\n        },\n\n        _handleResize: function() {\n            if (Garnish.ltr) {\n                this.desiredWidth = this.resizeStartWidth + (this.resizeDragger.mouseDistX * 2);\n            }\n            else {\n                this.desiredWidth = this.resizeStartWidth - (this.resizeDragger.mouseDistX * 2);\n            }\n\n            this.desiredHeight = this.resizeStartHeight + (this.resizeDragger.mouseDistY * 2);\n\n            this.updateSizeAndPosition();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$container) {\n                this.$container.removeData('modal').remove();\n            }\n\n            if (this.$shade) {\n                this.$shade.remove();\n            }\n\n            if (this.dragger) {\n                this.dragger.destroy();\n            }\n\n            if (this.resizeDragger) {\n                this.resizeDragger.destroy();\n            }\n\n            this.base();\n        }\n    },\n    {\n        relativeElemPadding: 8,\n        defaults: {\n            autoShow: true,\n            draggable: false,\n            dragHandleSelector: null,\n            resizable: false,\n            minGutter: 10,\n            onShow: $.noop,\n            onHide: $.noop,\n            onFadeIn: $.noop,\n            onFadeOut: $.noop,\n            closeOtherModals: false,\n            hideOnEsc: true,\n            hideOnShadeClick: true,\n            triggerElement: null,\n            shadeClass: 'modal-shade',\n        },\n        instances: [],\n        visibleModal: null\n    }\n);\n\n/** global: Garnish */\n/**\n * Nice Text\n */\nGarnish.NiceText = Garnish.Base.extend(\n    {\n        $input: null,\n        $hint: null,\n        $stage: null,\n        $charsLeft: null,\n        autoHeight: null,\n        maxLength: null,\n        showCharsLeft: false,\n        showingHint: false,\n        val: null,\n        inputBoxSizing: 'content-box',\n        width: null,\n        height: null,\n        minHeight: null,\n        initialized: false,\n\n        init: function(input, settings) {\n            this.$input = $(input);\n            this.settings = $.extend({}, Garnish.NiceText.defaults, settings);\n\n            if (this.isVisible()) {\n                this.initialize();\n            }\n            else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n\n        isVisible: function() {\n            return (this.$input.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            this.maxLength = this.$input.attr('maxlength');\n\n            if (this.maxLength) {\n                this.maxLength = parseInt(this.maxLength);\n            }\n\n            if (this.maxLength && (this.settings.showCharsLeft || Garnish.hasAttr(this.$input, 'data-show-chars-left'))) {\n                this.showCharsLeft = true;\n\n                // Remove the maxlength attribute\n                this.$input.removeAttr('maxlength');\n            }\n\n            // Is this already a transparent text input?\n            if (this.$input.data('nicetext')) {\n                Garnish.log('Double-instantiating a transparent text input on an element');\n                this.$input.data('nicetext').destroy();\n            }\n\n            this.$input.data('nicetext', this);\n\n            this.getVal();\n\n            this.autoHeight = (this.settings.autoHeight && this.$input.prop('nodeName') === 'TEXTAREA');\n\n            if (this.autoHeight) {\n                this.minHeight = this.getHeightForValue('');\n                this.updateHeight();\n\n                // Update height when the window resizes\n                this.width = this.$input.width();\n                this.addListener(Garnish.$win, 'resize', 'updateHeightIfWidthChanged');\n            }\n\n            if (this.settings.hint) {\n                this.$hintContainer = $('<div class=\"texthint-container\"/>').insertBefore(this.$input);\n                this.$hint = $('<div class=\"texthint\">' + this.settings.hint + '</div>').appendTo(this.$hintContainer);\n                this.$hint.css({\n                    top: (parseInt(this.$input.css('borderTopWidth')) + parseInt(this.$input.css('paddingTop'))),\n                    left: (parseInt(this.$input.css('borderLeftWidth')) + parseInt(this.$input.css('paddingLeft')) + 1)\n                });\n                Garnish.copyTextStyles(this.$input, this.$hint);\n\n                if (this.val) {\n                    this.$hint.hide();\n                }\n                else {\n                    this.showingHint = true;\n                }\n\n                // Focus the input when clicking on the hint\n                this.addListener(this.$hint, 'mousedown', function(ev) {\n                    ev.preventDefault();\n                    this.$input.focus();\n                });\n            }\n\n            if (this.showCharsLeft) {\n                this.$charsLeft = $('<div aria-live=\"polite\" class=\"' + this.settings.charsLeftClass + '\"/>').insertAfter(this.$input);\n                this.updateCharsLeft();\n            }\n\n            this.addListener(this.$input, 'textchange', 'onTextChange');\n            this.addListener(this.$input, 'keydown', 'onKeyDown');\n        },\n\n        initializeIfVisible: function() {\n            if (this.isVisible()) {\n                this.initialize();\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        showHint: function() {\n            this.$hint.velocity('fadeIn', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = true;\n        },\n\n        hideHint: function() {\n            this.$hint.velocity('fadeOut', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = false;\n        },\n\n        onTextChange: function() {\n            this.getVal();\n\n            if (this.$hint) {\n                if (this.showingHint && this.val) {\n                    this.hideHint();\n                }\n                else if (!this.showingHint && !this.val) {\n                    this.showHint();\n                }\n            }\n\n            if (this.autoHeight) {\n                this.updateHeight();\n            }\n\n            if (this.showCharsLeft) {\n                this.updateCharsLeft();\n            }\n        },\n\n        onKeyDown: function(ev) {\n            // If Ctrl/Command + Return is pressed, submit the closest form\n            if (ev.keyCode === Garnish.RETURN_KEY && Garnish.isCtrlKeyPressed(ev)) {\n                ev.preventDefault();\n                this.$input.closest('form').submit();\n            }\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                display: 'block',\n                position: 'absolute',\n                top: -9999,\n                left: -9999\n            });\n\n            this.inputBoxSizing = this.$input.css('box-sizing');\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.$stage.css({\n                    'border-top': this.$input.css('border-top'),\n                    'border-right': this.$input.css('border-right'),\n                    'border-bottom': this.$input.css('border-bottom'),\n                    'border-left': this.$input.css('border-left'),\n                    'padding-top': this.$input.css('padding-top'),\n                    'padding-right': this.$input.css('padding-right'),\n                    'padding-bottom': this.$input.css('padding-bottom'),\n                    'padding-left': this.$input.css('padding-left'),\n                    '-webkit-box-sizing': this.inputBoxSizing,\n                    '-moz-box-sizing': this.inputBoxSizing,\n                    'box-sizing': this.inputBoxSizing\n                });\n            }\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getHeightForValue: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.$stage.css('width', this.$input.outerWidth());\n            }\n            else {\n                this.$stage.css('width', this.$input.width());\n            }\n\n            if (!val) {\n                val = '&nbsp;';\n                for (var i = 1; i < this.$input.prop('rows'); i++) {\n                    val += '<br/>&nbsp;';\n                }\n            }\n            else {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Multiple spaces\n                val = val.replace(/ {2,}/g, function(spaces) {\n                    // TODO: replace with String.repeat() when more broadly available?\n                    var replace = '';\n                    for (var i = 0; i < spaces.length - 1; i++) {\n                        replace += '&nbsp;';\n                    }\n                    return replace + ' ';\n                });\n\n                // Line breaks\n                val = val.replace(/[\\n\\r]$/g, '<br/>&nbsp;');\n                val = val.replace(/[\\n\\r]/g, '<br/>');\n            }\n\n            this.$stage.html(val);\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.getHeightForValue._height = this.$stage.outerHeight();\n            }\n            else {\n                this.getHeightForValue._height = this.$stage.height();\n            }\n\n            if (this.minHeight && this.getHeightForValue._height < this.minHeight) {\n                this.getHeightForValue._height = this.minHeight;\n            }\n\n            return this.getHeightForValue._height;\n        },\n\n        updateHeight: function() {\n            // has the height changed?\n            if (this.height !== (this.height = this.getHeightForValue(this.val))) {\n                this.$input.css('min-height', this.height);\n\n                if (this.initialized) {\n                    this.onHeightChange();\n                }\n            }\n        },\n\n        updateHeightIfWidthChanged: function() {\n            if (this.isVisible() && this.width !== (this.width = this.$input.width()) && this.width) {\n                this.updateHeight();\n            }\n        },\n\n        onHeightChange: function() {\n            this.settings.onHeightChange();\n        },\n\n        updateCharsLeft: function() {\n            this.updateCharsLeft._charsLeft = this.maxLength - this.val.length;\n            this.$charsLeft.html(Garnish.NiceText.charsLeftHtml(this.updateCharsLeft._charsLeft));\n\n            if (this.updateCharsLeft._charsLeft >= 0) {\n                this.$charsLeft.removeClass(this.settings.negativeCharsLeftClass);\n            }\n            else {\n                this.$charsLeft.addClass(this.settings.negativeCharsLeftClass);\n            }\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$input.removeData('nicetext');\n\n            if (this.$hint) {\n                this.$hint.remove();\n            }\n\n            if (this.$stage) {\n                this.$stage.remove();\n            }\n\n            this.base();\n        }\n    },\n    {\n        interval: 100,\n        hintFadeDuration: 50,\n        charsLeftHtml: function(charsLeft) {\n            return charsLeft;\n        },\n        defaults: {\n            autoHeight: true,\n            showCharsLeft: false,\n            charsLeftClass: 'chars-left',\n            negativeCharsLeftClass: 'negative-chars-left',\n            onHeightChange: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Select\n */\nGarnish.Select = Garnish.Base.extend(\n    {\n        $container: null,\n        $items: null,\n        $selectedItems: null,\n        $focusedItem: null,\n\n        mousedownTarget: null,\n        mouseUpTimeout: null,\n        callbackFrame: null,\n\n        $focusable: null,\n        $first: null,\n        first: null,\n        $last: null,\n        last: null,\n\n        /**\n         * Constructor\n         */\n        init: function(container, items, settings) {\n            this.$container = $(container);\n\n            // Param mapping\n            if (typeof items === 'undefined' && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n                items = null;\n            }\n            else if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (container, settings)\n                settings = items;\n                items = null;\n            }\n\n            // Is this already a select?\n            if (this.$container.data('select')) {\n                Garnish.log('Double-instantiating a select on an element');\n                this.$container.data('select').destroy();\n            }\n\n            this.$container.data('select', this);\n\n            this.setSettings(settings, Garnish.Select.defaults);\n\n            this.$items = $();\n            this.$selectedItems = $();\n\n            this.addItems(items);\n\n            // --------------------------------------------------------------------\n\n            if (this.settings.allowEmpty && !this.settings.checkboxMode) {\n                this.addListener(this.$container, 'click', function() {\n                    if (this.ignoreClick) {\n                        this.ignoreClick = false;\n                    }\n                    else {\n                        // Deselect all items on container click\n                        this.deselectAll(true);\n                    }\n                });\n            }\n        },\n\n        /**\n         * Get Item Index\n         */\n        getItemIndex: function($item) {\n            return this.$items.index($item[0]);\n        },\n\n        /**\n         * Is Selected?\n         */\n        isSelected: function(item) {\n            if (Garnish.isJquery(item)) {\n                if (!item[0]) {\n                    return false;\n                }\n\n                item = item[0];\n            }\n\n            return ($.inArray(item, this.$selectedItems) !== -1);\n        },\n\n        /**\n         * Select Item\n         */\n        selectItem: function($item, focus, preventScroll) {\n            if (!this.settings.multi) {\n                this.deselectAll();\n            }\n\n            this.$first = this.$last = $item;\n            this.first = this.last = this.getItemIndex($item);\n\n            if (focus) {\n                this.setFocusableItem($item);\n                this.focusItem($item, preventScroll);\n            }\n\n            this._selectItems($item);\n        },\n\n        selectAll: function() {\n            if (!this.settings.multi || !this.$items.length) {\n                return;\n            }\n\n            this.first = 0;\n            this.last = this.$items.length - 1;\n            this.$first = this.$items.eq(this.first);\n            this.$last = this.$items.eq(this.last);\n\n            this._selectItems(this.$items);\n        },\n\n        /**\n         * Select Range\n         */\n        selectRange: function($item, preventScroll) {\n            if (!this.settings.multi) {\n                return this.selectItem($item, true, true);\n            }\n\n            this.deselectAll();\n\n            this.$last = $item;\n            this.last = this.getItemIndex($item);\n\n            this.setFocusableItem($item);\n            this.focusItem($item, preventScroll);\n\n            // prepare params for $.slice()\n            var sliceFrom, sliceTo;\n\n            if (this.first < this.last) {\n                sliceFrom = this.first;\n                sliceTo = this.last + 1;\n            }\n            else {\n                sliceFrom = this.last;\n                sliceTo = this.first + 1;\n            }\n\n            this._selectItems(this.$items.slice(sliceFrom, sliceTo));\n        },\n\n        /**\n         * Deselect Item\n         */\n        deselectItem: function($item) {\n            var index = this.getItemIndex($item);\n            if (this.first === index) {\n                this.$first = this.first = null;\n            }\n            if (this.last === index) {\n                this.$last = this.last = null;\n            }\n\n            this._deselectItems($item);\n        },\n\n        /**\n         * Deselect All\n         */\n        deselectAll: function(clearFirst) {\n            if (clearFirst) {\n                this.$first = this.first = this.$last = this.last = null;\n            }\n\n            this._deselectItems(this.$items);\n        },\n\n        /**\n         * Deselect Others\n         */\n        deselectOthers: function($item) {\n            this.deselectAll();\n            this.selectItem($item, true, true);\n        },\n\n        /**\n         * Toggle Item\n         */\n        toggleItem: function($item, preventScroll) {\n            if (!this.isSelected($item)) {\n                this.selectItem($item, true, preventScroll);\n            }\n            else {\n                if (this._canDeselect($item)) {\n                    this.deselectItem($item, true);\n                }\n            }\n        },\n\n        clearMouseUpTimeout: function() {\n            clearTimeout(this.mouseUpTimeout);\n        },\n\n        getFirstItem: function() {\n            if (this.$items.length) {\n                return this.$items.first();\n            }\n        },\n\n        getLastItem: function() {\n            if (this.$items.length) {\n                return this.$items.last();\n            }\n        },\n\n        isPreviousItem: function(index) {\n            return (index > 0);\n        },\n\n        isNextItem: function(index) {\n            return (index < this.$items.length - 1);\n        },\n\n        getPreviousItem: function(index) {\n            if (this.isPreviousItem(index)) {\n                return this.$items.eq(index - 1);\n            }\n        },\n\n        getNextItem: function(index) {\n            if (this.isNextItem(index)) {\n                return this.$items.eq(index + 1);\n            }\n        },\n\n        getItemToTheLeft: function(index) {\n            var func = (Garnish.ltr ? 'Previous' : 'Next');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '<');\n                }\n            }\n        },\n\n        getItemToTheRight: function(index) {\n            var func = (Garnish.ltr ? 'Next' : 'Previous');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                else if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '>');\n                }\n            }\n        },\n\n        getItemAbove: function(index) {\n            if (this.isPreviousItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getPreviousItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '<');\n                }\n            }\n        },\n\n        getItemBelow: function(index) {\n            if (this.isNextItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getNextItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '>');\n                }\n            }\n        },\n\n        getClosestItem: function(index, axis, dir) {\n            var axisProps = Garnish.Select.closestItemAxisProps[axis],\n                dirProps = Garnish.Select.closestItemDirectionProps[dir];\n\n            var $thisItem = this.$items.eq(index),\n                thisOffset = $thisItem.offset(),\n                thisMidpoint = thisOffset[axisProps.midpointOffset] + Math.round($thisItem[axisProps.midpointSizeFunc]() / 2),\n                otherRowPos = null,\n                smallestMidpointDiff = null,\n                $closestItem = null;\n\n            // Go the other way if this is the X axis and a RTL page\n            var step;\n\n            if (Garnish.rtl && axis === Garnish.X_AXIS) {\n                step = dirProps.step * -1;\n            }\n            else {\n                step = dirProps.step;\n            }\n\n            for (var i = index + step; (typeof this.$items[i] !== 'undefined'); i += step) {\n                var $otherItem = this.$items.eq(i),\n                    otherOffset = $otherItem.offset();\n\n                // Are we on the next row yet?\n                if (dirProps.isNextRow(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    // Is this the first time we've seen this row?\n                    if (otherRowPos === null) {\n                        otherRowPos = otherOffset[axisProps.rowOffset];\n                    }\n                    // Have we gone too far?\n                    else if (otherOffset[axisProps.rowOffset] !== otherRowPos) {\n                        break;\n                    }\n\n                    var otherMidpoint = otherOffset[axisProps.midpointOffset] + Math.round($otherItem[axisProps.midpointSizeFunc]() / 2),\n                        midpointDiff = Math.abs(thisMidpoint - otherMidpoint);\n\n                    // Are we getting warmer?\n                    if (smallestMidpointDiff === null || midpointDiff < smallestMidpointDiff) {\n                        smallestMidpointDiff = midpointDiff;\n                        $closestItem = $otherItem;\n                    }\n                    // Getting colder?\n                    else {\n                        break;\n                    }\n                }\n                // Getting colder?\n                else if (dirProps.isWrongDirection(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    break;\n                }\n            }\n\n            return $closestItem;\n        },\n\n        getFurthestItemToTheLeft: function(index) {\n            return this.getFurthestItem(index, 'ToTheLeft');\n        },\n\n        getFurthestItemToTheRight: function(index) {\n            return this.getFurthestItem(index, 'ToTheRight');\n        },\n\n        getFurthestItemAbove: function(index) {\n            return this.getFurthestItem(index, 'Above');\n        },\n\n        getFurthestItemBelow: function(index) {\n            return this.getFurthestItem(index, 'Below');\n        },\n\n        getFurthestItem: function(index, dir) {\n            var $item, $testItem;\n\n            while ($testItem = this['getItem' + dir](index)) {\n                $item = $testItem;\n                index = this.getItemIndex($item);\n            }\n\n            return $item;\n        },\n\n        /**\n         * totalSelected getter\n         */\n        get totalSelected() {\n            return this.getTotalSelected();\n        },\n\n        /**\n         * Get Total Selected\n         */\n        getTotalSelected: function() {\n            return this.$selectedItems.length;\n        },\n\n        /**\n         * Add Items\n         */\n        addItems: function(items) {\n            var $items = $(items);\n\n            for (var i = 0; i < $items.length; i++) {\n                var item = $items[i];\n\n                // Make sure this element doesn't belong to another selector\n                if ($.data(item, 'select')) {\n                    Garnish.log('Element was added to more than one selector');\n                    $.data(item, 'select').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'select', this);\n\n                // Get the handle\n                var $handle;\n\n                if (this.settings.handle) {\n                    if (typeof this.settings.handle === 'object') {\n                        $handle = $(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle === 'string') {\n                        $handle = $(item).find(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle === 'function') {\n                        $handle = $(this.settings.handle(item));\n                    }\n                }\n                else {\n                    $handle = $(item);\n                }\n\n                $.data(item, 'select-handle', $handle);\n                $handle.data('select-item', item);\n\n                this.addListener($handle, 'mousedown', 'onMouseDown');\n                this.addListener($handle, 'mouseup', 'onMouseUp');\n                this.addListener($handle, 'click', function() {\n                    this.ignoreClick = true;\n                });\n\n                this.addListener(item, 'keydown', 'onKeyDown');\n            }\n\n            this.$items = this.$items.add($items);\n            this.updateIndexes();\n        },\n\n        /**\n         * Remove Items\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            var itemsChanged = false,\n                selectionChanged = false;\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index !== -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                    itemsChanged = true;\n\n                    var selectedIndex = $.inArray(item, this.$selectedItems);\n                    if (selectedIndex !== -1) {\n                        this.$selectedItems.splice(selectedIndex, 1);\n                        selectionChanged = true;\n                    }\n                }\n            }\n\n            if (itemsChanged) {\n                this.updateIndexes();\n\n                if (selectionChanged) {\n                    $(items).removeClass(this.settings.selectedClass);\n                    this.onSelectionChange();\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n            this.$selectedItems = $();\n            this.updateIndexes();\n        },\n\n        /**\n         * Update First/Last indexes\n         */\n        updateIndexes: function() {\n            if (this.first !== null) {\n                this.first = this.getItemIndex(this.$first);\n                this.setFocusableItem(this.$first);\n            }\n            else if (this.$items.length) {\n                this.setFocusableItem($(this.$items[0]));\n            }\n\n            if (this.$focusedItem) {\n                this.setFocusableItem(this.$focusedItem);\n                this.focusItem(this.$focusedItem, true);\n            }\n\n            if (this.last !== null) {\n                this.last = this.getItemIndex(this.$last);\n            }\n        },\n\n        /**\n         * Reset Item Order\n         */\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.$selectedItems = $().add(this.$selectedItems);\n            this.updateIndexes();\n        },\n\n        /**\n         * Sets the focusable item.\n         *\n         * We only want to have one focusable item per selection list, so that the user\n         * doesn't have to tab through a million items.\n         *\n         * @param {object} $item\n         */\n        setFocusableItem: function($item) {\n            if (this.$focusable) {\n                this.$focusable.removeAttr('tabindex');\n            }\n\n            this.$focusable = $item.attr('tabindex', '0');\n        },\n\n        /**\n         * Sets the focus on an item.\n         */\n        focusItem: function($item, preventScroll) {\n            $item[0].focus({preventScroll: !!preventScroll});\n            this.$focusedItem = $item;\n            this.trigger('focusItem', {item: $item});\n        },\n\n        /**\n         * Get Selected Items\n         */\n        getSelectedItems: function() {\n            return this.$selectedItems;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('select');\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Mouse Down\n         */\n        onMouseDown: function(ev) {\n            // ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enforce the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            this.mousedownTarget = ev.currentTarget;\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            if (this.first !== null && ev.shiftKey) {\n                // Shift key is consistent for both selection modes\n                this.selectRange($item, true);\n            }\n            else if (this._actAsCheckbox(ev)) {\n                this.toggleItem($item, true);\n            }\n        },\n\n        /**\n         * On Mouse Up\n         */\n        onMouseUp: function(ev) {\n            // ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enfore the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            // was this a click?\n            if (\n                !this._actAsCheckbox(ev) && !ev.shiftKey &&\n                ev.currentTarget === this.mousedownTarget\n            ) {\n                // If this is already selected, wait a moment to see if this is a double click before making any rash decisions\n                if (this.isSelected($item)) {\n                    this.clearMouseUpTimeout();\n\n                    this.mouseUpTimeout = setTimeout(function() {\n                        this.deselectOthers($item);\n                    }.bind(this), 300);\n                }\n                else {\n                    this.deselectAll();\n                    this.selectItem($item, true, true);\n                }\n            }\n        },\n\n        /**\n         * On Key Down\n         */\n        onKeyDown: function(ev) {\n            // Ignore if the focus isn't on one of our items\n            if (ev.target !== ev.currentTarget) {\n                return;\n            }\n\n            var ctrlKey = Garnish.isCtrlKeyPressed(ev);\n            var shiftKey = ev.shiftKey;\n\n            var anchor, $item;\n\n            if (!this.settings.checkboxMode || !this.$focusable.length) {\n                anchor = ev.shiftKey ? this.last : this.first;\n            }\n            else {\n                anchor = $.inArray(this.$focusable[0], this.$items);\n\n                if (anchor === -1) {\n                    anchor = 0;\n                }\n            }\n\n            // Ok, what are we doing here?\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            $item = this.getLastItem();\n                        }\n                        else {\n                            $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemToTheLeft(anchor);\n                        }\n                        else {\n                            $item = this.getItemToTheLeft(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            $item = this.getFirstItem();\n                        }\n                        else {\n                            $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemToTheRight(anchor);\n                        }\n                        else {\n                            $item = this.getItemToTheRight(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            $item = this.$focusable.prev();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemAbove(anchor);\n                        }\n                        else {\n                            $item = this.getItemAbove(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            $item = this.$focusable.next();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemBelow(anchor);\n                        }\n                        else {\n                            $item = this.getItemBelow(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getLastItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    if (!ctrlKey && !shiftKey) {\n                        ev.preventDefault();\n\n                        if (this.isSelected(this.$focusable)) {\n                            if (this._canDeselect(this.$focusable)) {\n                                this.deselectItem(this.$focusable);\n                            }\n                        }\n                        else {\n                            this.selectItem(this.$focusable, true, false);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.A_KEY: {\n                    if (ctrlKey) {\n                        ev.preventDefault();\n                        this.selectAll();\n                    }\n\n                    break;\n                }\n            }\n\n            // Is there an item queued up for focus/selection?\n            if ($item && $item.length) {\n                if (!this.settings.checkboxMode) {\n                    // select it\n                    if (this.first !== null && ev.shiftKey) {\n                        this.selectRange($item, false);\n                    }\n                    else {\n                        this.deselectAll();\n                        this.selectItem($item, true, false);\n                    }\n                }\n                else {\n                    // just set the new item to be focusable\n                    this.setFocusableItem($item);\n                    $item.focus();\n                    this.$focusedItem = $item;\n                    this.trigger('focusItem', {item: $item});\n                }\n            }\n        },\n\n        /**\n         * Set Callback Timeout\n         */\n        onSelectionChange: function() {\n            if (this.callbackFrame) {\n                Garnish.cancelAnimationFrame(this.callbackFrame);\n                this.callbackFrame = null;\n            }\n\n            this.callbackFrame = Garnish.requestAnimationFrame(function() {\n                this.callbackFrame = null;\n                this.trigger('selectionChange');\n                this.settings.onSelectionChange();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _actAsCheckbox: function(ev) {\n            if (Garnish.isCtrlKeyPressed(ev)) {\n                return !this.settings.checkboxMode;\n            }\n            else {\n                return this.settings.checkboxMode;\n            }\n        },\n\n        _canDeselect: function($items) {\n            return (this.settings.allowEmpty || this.totalSelected > $items.length);\n        },\n\n        _selectItems: function($items) {\n            $items.addClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.add($items);\n            this.onSelectionChange();\n        },\n\n        _deselectItems: function($items) {\n            $items.removeClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.not($items);\n            this.onSelectionChange();\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            var $handle = $.data(item, 'select-handle');\n\n            if ($handle) {\n                $handle.removeData('select-item');\n                this.removeAllListeners($handle);\n            }\n\n            $.removeData(item, 'select');\n            $.removeData(item, 'select-handle');\n\n            if (this.$focusedItem && this.$focusedItem[0] === item) {\n                this.$focusedItem = null;\n            }\n        }\n    },\n    {\n        defaults: {\n            selectedClass: 'sel',\n            multi: false,\n            allowEmpty: true,\n            vertical: false,\n            horizontal: false,\n            handle: null,\n            filter: null,\n            checkboxMode: false,\n            onSelectionChange: $.noop\n        },\n\n        closestItemAxisProps: {\n            x: {\n                midpointOffset: 'top',\n                midpointSizeFunc: 'outerHeight',\n                rowOffset: 'left'\n            },\n            y: {\n                midpointOffset: 'left',\n                midpointSizeFunc: 'outerWidth',\n                rowOffset: 'top'\n            }\n        },\n\n        closestItemDirectionProps: {\n            '<': {\n                step: -1,\n                isNextRow: function(a, b) {\n                    return (a < b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a > b);\n                }\n            },\n            '>': {\n                step: 1,\n                isNextRow: function(a, b) {\n                    return (a > b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a < b);\n                }\n            }\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Select Menu\n */\nGarnish.SelectMenu = Garnish.CustomSelect.extend(\n    {\n        /**\n         * Constructor\n         */\n        init: function(btn, options, settings, callback) {\n            // argument mapping\n            if (typeof settings === 'function') {\n                // (btn, options, callback)\n                callback = settings;\n                settings = {};\n            }\n\n            settings = $.extend({}, Garnish.SelectMenu.defaults, settings);\n\n            this.base(btn, options, settings, callback);\n\n            this.selected = -1;\n        },\n\n        /**\n         * Build\n         */\n        build: function() {\n            this.base();\n\n            if (this.selected !== -1) {\n                this._addSelectedOptionClass(this.selected);\n            }\n        },\n\n        /**\n         * Select\n         */\n        select: function(option) {\n            // ignore if it's already selected\n            if (option === this.selected) {\n                return;\n            }\n\n            if (this.dom.ul) {\n                if (this.selected !== -1) {\n                    this.dom.options[this.selected].className = '';\n                }\n\n                this._addSelectedOptionClass(option);\n            }\n\n            this.selected = option;\n\n            // set the button text to the selected option\n            this.setBtnText($(this.options[option].label).text());\n\n            this.base(option);\n        },\n\n        /**\n         * Add Selected Option Class\n         */\n        _addSelectedOptionClass: function(option) {\n            this.dom.options[option].className = 'sel';\n        },\n\n        /**\n         * Set Button Text\n         */\n        setBtnText: function(text) {\n            this.dom.$btnLabel.text(text);\n        }\n\n    },\n    {\n        defaults: {\n            ulClass: 'menu select'\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Keyboard shortcut manager class\n *\n * This can be used to map keyboard events to the current UI \"layer\" (whether that's the base document,\n * a modal, an HUD, or a menu).\n */\nGarnish.ShortcutManager = Garnish.Base.extend(\n    {\n        shortcuts: null,\n        layer: 0,\n\n        init: function() {\n            this.shortcuts = [[]];\n            this.addListener(Garnish.$bod, 'keydown', 'triggerShortcut');\n        },\n\n        addLayer: function() {\n            this.layer++;\n            this.shortcuts.push([]);\n            return this;\n        },\n\n        removeLayer: function() {\n            if (this.layer === 0) {\n                throw 'Can’t remove the base layer.';\n            }\n            this.layer--;\n            this.shortcuts.pop();\n            return this;\n        },\n\n        registerShortcut: function(shortcut, callback, layer) {\n            shortcut = this._normalizeShortcut(shortcut);\n            if (typeof layer === 'undefined') {\n                layer = this.layer;\n            }\n            this.shortcuts[layer].push({\n                key: JSON.stringify(shortcut),\n                shortcut: shortcut,\n                callback: callback,\n            });\n            return this;\n        },\n\n        unregisterShortcut: function(shortcut, layer) {\n            shortcut = this._normalizeShortcut(shortcut);\n            var key = JSON.stringify(shortcut);\n            if (typeof layer === 'undefined') {\n                layer = this.layer;\n            }\n            for (var i = 0; i < this.shortcuts[layer].length; i++) {\n                if (this.shortcuts[layer][i].key === key) {\n                    this.shortcuts[layer].splice(i, 1);\n                    break;\n                }\n            }\n            return this;\n        },\n\n        _normalizeShortcut: function(shortcut) {\n            if (typeof shortcut === 'number') {\n                shortcut = {keyCode: shortcut};\n            }\n\n            if (typeof shortcut.keyCode !== 'number') {\n                throw 'Invalid shortcut';\n            }\n\n            return {\n                keyCode: shortcut.keyCode,\n                ctrl: !!shortcut.ctrl,\n                shift: !!shortcut.shift,\n                alt: !!shortcut.alt,\n            };\n        },\n\n        triggerShortcut: function(ev) {\n            var shortcut;\n            for (var i = 0; i < this.shortcuts[this.layer].length; i++) {\n                shortcut = this.shortcuts[this.layer][i].shortcut;\n                if (\n                    shortcut.keyCode === ev.keyCode &&\n                    shortcut.ctrl === Garnish.isCtrlKeyPressed(ev) &&\n                    shortcut.shift === ev.shiftKey &&\n                    shortcut.alt === ev.altKey\n                ) {\n                    ev.preventDefault();\n                    this.shortcuts[this.layer][i].callback(ev);\n                    break;\n                }\n            }\n        },\n    }\n);\n\nGarnish.shortcutManager = new Garnish.ShortcutManager();\n\n})(jQuery);\n"]}