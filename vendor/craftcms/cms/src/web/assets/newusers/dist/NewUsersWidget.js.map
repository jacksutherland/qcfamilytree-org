{"version":3,"file":"NewUsersWidget.js","mappings":"YAAA,IAAWA,EAAAA,EAmJRC,OAhJDC,MAAMC,eAAiBC,QAAQC,KAAKC,OAClC,CACEC,SAAU,KACVC,KAAM,KACNC,UAAW,KACXC,QAAS,KAETC,QAAS,KACTC,MAAO,KAEPC,KAAM,SAAUC,EAAUP,GAAU,WAYlC,OAXAQ,KAAKC,YAAYT,GAEjBQ,KAAKJ,QAAUX,EAAE,UAAYc,GAC7BC,KAAKH,MAAQG,KAAKJ,QAAQM,KAAK,eAC/BF,KAAKG,gBAAkBlB,EAAE,oCAAoCmB,SAC3DJ,KAAKH,OAEPG,KAAKK,OAASpB,EAAE,wBAAwBmB,SAASJ,KAAKH,OAEtCG,KAAKR,SAASc,WAG5B,IAAK,KACHN,KAAKN,UAAYP,MAAMC,eAAemB,cAAc,GACpDP,KAAKL,QAAU,IAAIa,KACnB,MAEF,IAAK,MACHR,KAAKN,UAAYP,MAAMC,eAAemB,cAAc,IACpDP,KAAKL,QAAU,IAAIa,KACnB,MAEF,IAAK,WACHR,KAAKN,UAAYP,MAAMC,eAAemB,cAAc,IACpDP,KAAKL,QAAUR,MAAMC,eAAemB,cAAc,GAClD,MAEF,IAAK,YACHP,KAAKN,UAAYP,MAAMC,eAAemB,cAAc,IACpDP,KAAKL,QAAUR,MAAMC,eAAemB,cAAc,IAKtD,IAAIE,EAAc,CAChBf,UAAWP,MAAMC,eAAesB,aAAaV,KAAKN,WAClDC,QAASR,MAAMC,eAAesB,aAAaV,KAAKL,SAChDgB,YAAaX,KAAKR,SAASmB,aAG7BxB,MAAMyB,kBACJ,4BACAH,GACA,SAACI,EAAUC,GACT,GACiB,YAAfA,QAC0B,IAAnBD,EAASE,MAChB,CACA,EAAKZ,gBAAgBa,YAAY,UAGjC,EAAKC,MAAQ,IAAI9B,MAAM+B,OAAOC,KAAK,EAAKhB,gBAAiB,CACvDiB,MAAO,CACLC,UAAW,SAAUJ,GACnB,OAAO,SAAUK,GACf,IAAIC,EAAS,OAMb,OAJID,GAAKE,KAAKC,MAAMH,KAClBC,EAAS,QAGJN,EAAMS,aAAaH,OAAOA,EAA1BN,CAAkCK,QAMjD,IAAIK,EAAiB,IAAIxC,MAAM+B,OAAOU,UACpCf,EAASgB,WAGPC,EAAgB,CAClBC,YAAalB,EAASkB,YACtBC,UAAWnB,EAASoB,MACpBC,QAASrB,EAASqB,SAGpB,EAAKjB,MAAMkB,KAAKR,EAAgBG,GAGhCM,OAAOC,UAAUC,KAAKC,GACpB,cACA,EAAKC,kBAAkBC,KAAK,QAEzB,CAEL,IAAIC,EAAMvD,MAAMwD,EAAE,iCAGI,IAAb9B,GACPA,QAC0B,IAAnBA,EAASE,QAEhB2B,EAAM7B,EAASE,OAGjB,EAAKV,OAAOuC,KAAKF,GACjB,EAAKrC,OAAOW,YAAY,cAK9BhB,KAAKJ,QAAQH,KAAK,UAAU8C,GAAG,UAAWvC,KAAK6C,QAAQJ,KAAKzC,OAE5Db,MAAMC,eAAe0D,UAAUC,KAAK/C,OAGtCwC,kBAAmB,WACjBxC,KAAKiB,MAAM+B,UAGbH,QAAS,WACP1D,MAAMC,eAAe0D,UAAUG,OAC7BhE,EAAEiE,QAAQlD,KAAMb,MAAMC,eAAe0D,WACrC,GAEF9C,KAAKmD,SAGT,CACEL,UAAW,GAEXvC,cAAe,SAAU6C,GACvB,IAAIC,EAAO,IAAI7C,KAEf,OADA6C,EAAOA,EAAKC,UAAY,MAAeF,EAAO,IACvC,IAAI5C,KAAK6C,IAGlB3C,aAAc,SAAU2C,GACtB,OAAO7B,KAAK+B,MAAMF,EAAKC,UAAY,Q","sources":["webpack:///./NewUsersWidget.js"],"sourcesContent":["(function ($) {\n  /** global: Craft */\n  /** global: Garnish */\n  Craft.NewUsersWidget = Garnish.Base.extend(\n    {\n      settings: null,\n      data: null,\n      startDate: null,\n      endDate: null,\n\n      $widget: null,\n      $body: null,\n\n      init: function (widgetId, settings) {\n        this.setSettings(settings);\n\n        this.$widget = $('#widget' + widgetId);\n        this.$body = this.$widget.find('.body:first');\n        this.$chartContainer = $('<div class=\"chart hidden\"></div>').appendTo(\n          this.$body\n        );\n        this.$error = $('<div class=\"error\"/>').appendTo(this.$body);\n\n        var dateRange = this.settings.dateRange;\n\n        switch (dateRange) {\n          case 'd7':\n            this.startDate = Craft.NewUsersWidget.getDateByDays(6);\n            this.endDate = new Date();\n            break;\n\n          case 'd30':\n            this.startDate = Craft.NewUsersWidget.getDateByDays(30);\n            this.endDate = new Date();\n            break;\n\n          case 'lastweek':\n            this.startDate = Craft.NewUsersWidget.getDateByDays(13);\n            this.endDate = Craft.NewUsersWidget.getDateByDays(7);\n            break;\n\n          case 'lastmonth':\n            this.startDate = Craft.NewUsersWidget.getDateByDays(60);\n            this.endDate = Craft.NewUsersWidget.getDateByDays(30);\n            break;\n        }\n\n        // Request orders report\n        var requestData = {\n          startDate: Craft.NewUsersWidget.getDateValue(this.startDate),\n          endDate: Craft.NewUsersWidget.getDateValue(this.endDate),\n          userGroupId: this.settings.userGroupId,\n        };\n\n        Craft.postActionRequest(\n          'charts/get-new-users-data',\n          requestData,\n          (response, textStatus) => {\n            if (\n              textStatus === 'success' &&\n              typeof response.error === 'undefined'\n            ) {\n              this.$chartContainer.removeClass('hidden');\n\n              // Create chart\n              this.chart = new Craft.charts.Area(this.$chartContainer, {\n                yAxis: {\n                  formatter: function (chart) {\n                    return function (d) {\n                      var format = ',.0f';\n\n                      if (d != Math.round(d)) {\n                        format = ',.1f';\n                      }\n\n                      return chart.formatLocale.format(format)(d);\n                    };\n                  },\n                },\n              });\n\n              var chartDataTable = new Craft.charts.DataTable(\n                response.dataTable\n              );\n\n              var chartSettings = {\n                orientation: response.orientation,\n                dataScale: response.scale,\n                formats: response.formats,\n              };\n\n              this.chart.draw(chartDataTable, chartSettings);\n\n              // Resize chart when grid is refreshed\n              window.dashboard.grid.on(\n                'refreshCols',\n                this.handleGridRefresh.bind(this)\n              );\n            } else {\n              // Error\n              var msg = Craft.t('A server error occurred.');\n\n              if (\n                typeof response !== 'undefined' &&\n                response &&\n                typeof response.error !== 'undefined'\n              ) {\n                msg = response.error;\n              }\n\n              this.$error.html(msg);\n              this.$error.removeClass('hidden');\n            }\n          }\n        );\n\n        this.$widget.data('widget').on('destroy', this.destroy.bind(this));\n\n        Craft.NewUsersWidget.instances.push(this);\n      },\n\n      handleGridRefresh: function () {\n        this.chart.resize();\n      },\n\n      destroy: function () {\n        Craft.NewUsersWidget.instances.splice(\n          $.inArray(this, Craft.NewUsersWidget.instances),\n          1\n        );\n        this.base();\n      },\n    },\n    {\n      instances: [],\n\n      getDateByDays: function (days) {\n        var date = new Date();\n        date = date.getTime() - 60 * 60 * 24 * days * 1000;\n        return new Date(date);\n      },\n\n      getDateValue: function (date) {\n        return Math.floor(date.getTime() / 1000);\n      },\n    }\n  );\n})(jQuery);\n"],"names":["$","jQuery","Craft","NewUsersWidget","Garnish","Base","extend","settings","data","startDate","endDate","$widget","$body","init","widgetId","this","setSettings","find","$chartContainer","appendTo","$error","dateRange","getDateByDays","Date","requestData","getDateValue","userGroupId","postActionRequest","response","textStatus","error","removeClass","chart","charts","Area","yAxis","formatter","d","format","Math","round","formatLocale","chartDataTable","DataTable","dataTable","chartSettings","orientation","dataScale","scale","formats","draw","window","dashboard","grid","on","handleGridRefresh","bind","msg","t","html","destroy","instances","push","resize","splice","inArray","base","days","date","getTime","floor"],"sourceRoot":""}